SimplifyAmplitude[exp_] := Module[{tmp = exp, tmp1, 
      scalars = {Subscript[m, _], T[Subscript[p, _], "d"][_], g[uu[_, _]], 
        \[Eta][uu[_, _]], \[Eta][ud[_, _]], Subscript[x, _], l[u[_]], 
        l[d[_]]}, sub1 = (op:dotOps)[(up_)[pu_], d__, (vp_)[pv_]]*
         (p:T[pu_, "d"][pi_])*(a___) :> op[up[pu], GammaLeft[\[Gamma][u[pi]]][
           Dot[d]], vp[pv]]*p*a, sub1r = 
       (op:dotOps)[(up_)[pu_], d__, (vp_)[pv_]]*(p:T[pv_, "d"][pi_])*
         (a___) :> op[up[pu], GammaRight[\[Gamma][u[pi]]][Dot[d]], vp[pv]]*p*
         a, subm = {(dot:dotOps)[(up_)[pu_], \[Gamma][u[pi_]], a___]*
          T[pu_, "d"][pi_]*(rest___) :> dot[up[pu], a]*Subscript[m, pu[[2]]]*
          rest, (dot:dotOps)[a__, \[Gamma][u[pi_]], (vp_)[pv_]]*
          T[pv_, "d"][pi_]*(rest___) :> dot[a, vp[pv]]*Subscript[m, pv[[2]]]*
          rest}, subsw = term:dotOps[a__]*T[pv_, "u"][pi_]*(rest___) :> 
        UpDownIndexSwap[pi][term]}, 
     Do[tmp = simpleDot3[scalars][tmp]; tmp = MetricContractAll[\[Eta]][
          simpleDot3[scalars][tmp /. sub1]]; tmp = MetricContractAll[\[Eta]][
          simpleDot3[scalars][tmp /. sub1r]]; 
        tmp = TensorSimplify[tmp /. subsw //. subm]; 
        tmp = TensorSimplify[simpleDot3[scalars][tmp //. psA29]], {3}]; tmp]
 
tmp = -4*OverBar[Subscript[u, q]][Subscript[p, q]] . 
       Subscript[v, q][Subscript[p, OverBar[q]]]*
      (-((Subscript[m, Derivative[1][q]] + Subscript[m, q]*
           (-1 + Subscript[x, 2]))*(Subscript[x, 2]*Tensor[Subscript[p, q], 
            {Void}, {\[Mu]e}] - (-1 + Subscript[x, 1])*
           Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]e}])) + 
       Subscript[m, OverBar[Derivative[1][q]]]*
        ((-1 + Subscript[x, 2])*Tensor[Subscript[p, q], {Void}, {\[Mu]e}] - 
         Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, 
           {\[Mu]e}]) - Subscript[m, OverBar[q]]*(-1 + Subscript[x, 1])*
        (-((-1 + Subscript[x, 2])*Tensor[Subscript[p, q], {Void}, 
            {\[Mu]e}]) + Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], 
           {Void}, {\[Mu]e}])) - OverBar[Subscript[u, q]][Subscript[p, q]] . 
       Tensor[\[Gamma], {Void}, {\[Mu]e}] . Subscript[v, q][
        Subscript[p, OverBar[q]]]*(2*Subscript[m, OverBar[Derivative[1][q]]]*
        Subscript[m, Derivative[1][q]] + 2*Subscript[m, OverBar[q]]^2*
        Subscript[x, 1] - 2*Subscript[m, OverBar[q]]^2*Subscript[x, 1]^2 + 
       2*Subscript[m, q]^2*(-1 + Subscript[x, 2])*Subscript[x, 2] + 
       2*Subscript[m, q]*Subscript[m, OverBar[q]]*(-1 + Subscript[x, 1] + 
         Subscript[x, 2]) + Tensor[l, {Void}, {\[Mu]l}]*
        Tensor[l, {\[Mu]l}, {Void}] - 4*Subscript[x, 1]*Subscript[x, 2]*
        Tensor[Subscript[p, q], {\[Nu]g}, {Void}]*
        Tensor[Subscript[p, OverBar[q]], {Void}, {\[Nu]g}] - 
       4*Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, 
         {\[Mu]$12169}]*Tensor[Subscript[p, OverBar[q]], {\[Mu]$12169}, 
         {Void}] + 4*Subscript[x, 1]^2*Tensor[Subscript[p, OverBar[q]], 
         {Void}, {\[Mu]$12169}]*Tensor[Subscript[p, OverBar[q]], 
         {\[Mu]$12169}, {Void}] - 4*Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}] + 
       4*Subscript[x, 1]*Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}] + 
       4*Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}])
 
Attributes[Subscript] = {NHoldRest}
 
u[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[u, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
Attributes[TensorCalculus5`Tensorial`Private`i$] = {Temporary}
 
Attributes[TensorCalculus5`Tensorial`Private`args$] = {Temporary}
 
udsymQ[TensorCalculus5`Tensorial`Private`udsym_Symbol] := 
    And @@ (#1 == "u" || #1 == "d" & ) /@ Characters[
       SymbolName[TensorCalculus5`Tensorial`Private`udsym]]
 
SyntaxInformation[udsymQ] = {"ArgumentsPattern" -> {_}}
 
udsymQ /: udsymQ::usage = 
     "udsymQ[udsym] tests if udsym consists entirely of u and d characters."
 
(TensorCalculus5`Tensorial`Private`fac_)*(TensorCalculus5`Tensorial`Private`z:
      Tensor[zero, _, _]) ^:= TensorCalculus5`Tensorial`Private`z
 
(TensorCalculus5`Tensorial`Private`term_) + 
     (TensorCalculus5`Tensorial`Private`z:Tensor[zero, _, _]) ^:= 
    TensorCalculus5`Tensorial`Private`term
 
Tensor /: Tensor::usage = "Tensor[A, upindices, downindices] represents a \
tensor with the label A and the given up and down indices. The list of up and \
down indices must be equal in length. Missing indices are indicated by Void. \
Tensor[\[Phi]] represents a scalar tensor."
 
zero /: Tensor[zero, {_?(FreeQ[#1, Pattern | Blank] && (#1 === Void || 
            BaseIndexQ[#1]) & )..}, 
      {_?(FreeQ[#1, Pattern | Blank] && (#1 === Void || BaseIndexQ[
             #1]) & )..}] := 0
 
Void /: Void::usage = 
     "Void is used to indicate a blank slot in the up or down tensor \
indices."
 
BaseIndexQ[TensorCalculus5`Tensorial`Private`index_] := 
    MemberQ[GetBaseIndices[TensorCalculus5`Tensorial`Private`index], 
     RawIndex[TensorCalculus5`Tensorial`Private`index]]
 
SyntaxInformation[BaseIndexQ] = {"ArgumentsPattern" -> {_}}
 
BaseIndexQ /: BaseIndexQ::usage = "BaseIndexQ[index] returns True if index \
has a base index value as its raw index and False otherwise. BaseIndexQ takes \
into account any special flavors used in DeclareBaseIndices."
 
GetBaseIndices[TensorCalculus5`Tensorial`Private`index_] := 
    Module[{TensorCalculus5`Tensorial`Private`flavor = 
       GetIndexFlavor[TensorCalculus5`Tensorial`Private`index], 
      TensorCalculus5`Tensorial`Private`work = BaseIndices}, 
     If[TensorCalculus5`Tensorial`Private`flavor === Identity, 
       Return[BaseIndices]]; 
      Scan[If[#1[[1]] === TensorCalculus5`Tensorial`Private`flavor, 
         TensorCalculus5`Tensorial`Private`work = #1[[2]]; Return[]] & , 
       TensorCalculus5`Tensorial`Private`baseflavors, {1}]; 
      TensorCalculus5`Tensorial`Private`work]
 
SyntaxInformation[GetBaseIndices] = {"ArgumentsPattern" -> {_}}
 
GetBaseIndices /: GetBaseIndices::usage = "GetBaseIndices[index] will return \
the list of base indices associated with index. This is the regular \
BaseIndices unless the flavor of index is one of the special ones declared in \
DeclareBaseIndices."
 
GetIndexFlavor[TensorCalculus5`Tensorial`Private`indx_] := 
    Module[{TensorCalculus5`Tensorial`Private`head = 
       Head[TensorCalculus5`Tensorial`Private`indx]}, 
     Switch[TensorCalculus5`Tensorial`Private`head, Symbol | Integer, 
      Identity, _, If[IndexFlavorQ[TensorCalculus5`Tensorial`Private`head], 
       TensorCalculus5`Tensorial`Private`head, $Failed]]]
 
SyntaxInformation[GetIndexFlavor] = {"ArgumentsPattern" -> {_}}
 
GetIndexFlavor /: GetIndexFlavor::usage = "GetIndexFlavor[index] will extract \
the flavor of an index. It returns Identity for indexes without flavors. It \
returns $Failed if the flavor is not a currently declared flavor."
 
IndexFlavorQ[TensorCalculus5`Tensorial`Private`flavor_] := 
    MemberQ[IndexFlavors, {TensorCalculus5`Tensorial`Private`flavor, _}]
 
SyntaxInformation[IndexFlavorQ] = {"ArgumentsPattern" -> {_}}
 
IndexFlavorQ /: IndexFlavorQ::usage = "IndexFlavorQ[flavor] returns True if \
flavor is contained in the IndexFlavors list and False otherwise."
 
IndexFlavors = {{field, RGBColor[0, 1, 0]}, {space, RGBColor[1, 0, 0]}, 
     {timespace, RGBColor[1, 0, 1]}, {feyn, RGBColor[1, 0.5, 0]}, 
     {groupR, RGBColor[0, 0, 1]}, {gaugeG, RGBColor[0, 0, 1]}}
 
IndexFlavors /: IndexFlavors::usage = "IndexFlavors is a list of the \
currently declared index flavors. It has the form {{flavorname, \
flavorform}...} where flavorname is a symbol, such as red or rocket, and \
flavorform is either an RGBColor or a header such as OverHat."
 
MakeBoxes[field[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 1, 0]], FormatType]
 
Format[field[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 1, 0]]
 
Attributes[MakeBoxes] = {HoldAllComplete}
 
MakeBoxes[Tensor[TensorCalculus5`Tensorial`Private`A_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {MakeBoxes[TensorCalculus5`Tensorial`Private`A, 
       TensorCalculus5`Tensorial`Private`form], 
      Tensor[TensorCalculus5`Tensorial`Private`A]}
 
MakeBoxes[Tensor[TensorCalculus5`Tensorial`Private`A_, 
      TensorCalculus5`Tensorial`Private`up_List, 
      TensorCalculus5`Tensorial`Private`down_List], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := 
    Module[{TensorCalculus5`Tensorial`Private`newdown = 
       TensorCalculus5`Tensorial`Private`down, 
      TensorCalculus5`Tensorial`Private`newup = 
       TensorCalculus5`Tensorial`Private`up, 
      TensorCalculus5`Tensorial`Private`makespace}, 
     TensorCalculus5`Tensorial`Private`makespace = 
       If[#1 === Void, Style[#2, ShowContents -> False], #1] & ; 
      TensorCalculus5`Tensorial`Private`newup = 
       Inner[TensorCalculus5`Tensorial`Private`makespace, 
        TensorCalculus5`Tensorial`Private`newup, 
        TensorCalculus5`Tensorial`Private`newdown, List]; 
      TensorCalculus5`Tensorial`Private`newdown = 
       Inner[TensorCalculus5`Tensorial`Private`makespace, 
        TensorCalculus5`Tensorial`Private`newdown, 
        TensorCalculus5`Tensorial`Private`newup, List]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False], 
          Rule[BaseStyle, List[Rule[AutoMultiplicationSymbol, False]]]] & ) \
@@ {SubsuperscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`A, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[(MakeBoxes[#1, TensorCalculus5`Tensorial`Private`form] & ) /@ 
           TensorCalculus5`Tensorial`Private`newdown], 
         RowBox[(MakeBoxes[#1, TensorCalculus5`Tensorial`Private`form] & ) /@ 
           TensorCalculus5`Tensorial`Private`newup]], 
        Tensor[TensorCalculus5`Tensorial`Private`A, 
         TensorCalculus5`Tensorial`Private`up, 
         TensorCalculus5`Tensorial`Private`down]}]
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`labs:{_, _, _, _}][
      TensorCalculus5`Tensorial`Private`w_, 
      (TensorCalculus5`Tensorial`Private`Tx_Tensor) | 
       (TensorCalculus5`Tensorial`Private`Tx_Symbol)], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[PartialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`w, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\[PartialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`Tx, 
             TensorCalculus5`Tensorial`Private`form]\)\), 
      PartialD[TensorCalculus5`Tensorial`Private`labs][
       TensorCalculus5`Tensorial`Private`w, 
       TensorCalculus5`Tensorial`Private`Tx]}
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`labs:{_, _, _, _}][
      TensorCalculus5`Tensorial`Private`w_, 
      TensorCalculus5`Tensorial`Private`Tx_List], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`Tx], 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{"\[PartialD]", MakeBoxes[#1]} & , 
          {TensorCalculus5`Tensorial`Private`Tx}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[
         \(\[PartialD]\^\*ToString[TensorCalculus5`Tensorial`Private`p] 
            \*MakeBoxes[TensorCalculus5`Tensorial`Private`w, 
              TensorCalculus5`Tensorial`Private`form]\), 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        PartialD[TensorCalculus5`Tensorial`Private`labs][
         TensorCalculus5`Tensorial`Private`w, 
         TensorCalculus5`Tensorial`Private`Tx]}]
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`t_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
        MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`form]}], 
      TotalD[TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t_ /; 
        !VectorQ[TensorCalculus5`Tensorial`Private`t]], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {FractionBox[RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`form]}], 
       RowBox[{TensorCalculus5`Tensorial`Private`TDd, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form]}]], 
      TotalD[TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t:{__}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`t], 
      TensorCalculus5`Tensorial`Private`numboxes, 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`numboxes = 
       If[TensorCalculus5`Tensorial`Private`p == 1, 
        RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}], 
        RowBox[{SuperscriptBox[TensorCalculus5`Tensorial`Private`TDu, 
           ToString[TensorCalculus5`Tensorial`Private`p]], 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}]]; 
      TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{TensorCalculus5`Tensorial`Private`TDd, 
            MakeBoxes[#1]} & , {TensorCalculus5`Tensorial`Private`t}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[TensorCalculus5`Tensorial`Private`numboxes, 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        TotalD[TensorCalculus5`Tensorial`Private`expr, 
         TensorCalculus5`Tensorial`Private`t]}]
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
           TensorCalculus5`Tensorial`Private`form]\), 
      Dt[TensorCalculus5`Tensorial`Private`f]}
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol, 
      TensorCalculus5`Tensorial`Private`t_Symbol], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
             TensorCalculus5`Tensorial`Private`form]\)\), 
      Dt[TensorCalculus5`Tensorial`Private`f, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol, 
      {TensorCalculus5`Tensorial`Private`t_Symbol, 
       TensorCalculus5`Tensorial`Private`n_Integer}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[DifferentialD]\^\*MakeBoxes[TensorCalculus5`Tensorial`Private`n, 
              TensorCalculus5`Tensorial`Private`form] 
           \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\ \[VeryThinSpace]\[DifferentialD] 
            \*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form]\)\^
          \*MakeBoxes[TensorCalculus5`Tensorial`Private`n, 
            TensorCalculus5`Tensorial`Private`form]\), 
      Dt[TensorCalculus5`Tensorial`Private`f, 
       {TensorCalculus5`Tensorial`Private`t, 
        TensorCalculus5`Tensorial`Private`n}]}
 
MakeBoxes[AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t_ /; 
        !VectorQ[TensorCalculus5`Tensorial`Private`t]], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {FractionBox[RowBox[{TensorCalculus5`Tensorial`Private`ADu, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`form]}], 
       RowBox[{TensorCalculus5`Tensorial`Private`ADd, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form]}]], 
      AbsoluteD[TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t:{__}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`t], 
      TensorCalculus5`Tensorial`Private`numboxes, 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`numboxes = 
       If[TensorCalculus5`Tensorial`Private`p == 1, 
        RowBox[{TensorCalculus5`Tensorial`Private`ADu, 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}], 
        RowBox[{SuperscriptBox[TensorCalculus5`Tensorial`Private`ADu, 
           ToString[TensorCalculus5`Tensorial`Private`p]], 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}]]; 
      TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{TensorCalculus5`Tensorial`Private`ADd, 
            MakeBoxes[#1]} & , {TensorCalculus5`Tensorial`Private`t}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[TensorCalculus5`Tensorial`Private`numboxes, 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        AbsoluteD[TensorCalculus5`Tensorial`Private`expr, 
         TensorCalculus5`Tensorial`Private`t]}]
 
MakeBoxes[CovariantD[TensorCalculus5`Tensorial`Private`t_, 
      TensorCalculus5`Tensorial`Private`upindices__, 
      TensorCalculus5`Tensorial`Private`downindices__], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := 
    Module[{TensorCalculus5`Tensorial`Private`downindx = 
       Flatten[{TensorCalculus5`Tensorial`Private`downindices}] /. 
        Void -> Style[" ", ShowContents -> False], 
      TensorCalculus5`Tensorial`Private`upindx = 
       Flatten[{TensorCalculus5`Tensorial`Private`upindices}] /. 
        Void -> Style[" ", ShowContents -> False]}, 
     If[MatchQ[TensorCalculus5`Tensorial`Private`t, Tensor[_, _, _] | 
        Tensor[_Symbol]], (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubsuperscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[{TensorCalculus5`Tensorial`Private`CovSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`downindx]}], 
         RowBox[{ToBoxes[Invisible[TensorCalculus5`Tensorial`Private`CovSym], 
            TensorCalculus5`Tensorial`Private`form], 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`upindx]}]], 
        CovariantD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`upindices, 
         TensorCalculus5`Tensorial`Private`downindices]}, (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubsuperscriptBox[
         \((\*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form])\), 
         RowBox[{TensorCalculus5`Tensorial`Private`CovSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`downindx]}], 
         RowBox[{ToBoxes[Invisible[TensorCalculus5`Tensorial`Private`CovSym], 
            TensorCalculus5`Tensorial`Private`form], 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`upindx]}]], 
        CovariantD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`upindices, 
         TensorCalculus5`Tensorial`Private`downindices]}]]
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`t_, 
      TensorCalculus5`Tensorial`Private`indices_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`windx = 
       Flatten[{TensorCalculus5`Tensorial`Private`indices}]}, 
     If[MatchQ[TensorCalculus5`Tensorial`Private`t, Tensor[_, _, _] | 
        Tensor[TensorCalculus5`Tensorial`Private`f_Symbol]], (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[{TensorCalculus5`Tensorial`Private`DifSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`windx]}]], 
        PartialD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`indices]}, (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubscriptBox[
         \((\*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form])\), 
         RowBox[{TensorCalculus5`Tensorial`Private`DifSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`windx]}]], 
        PartialD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`indices]}]]
 
MakeBoxes[ExteriorD[(TensorForms1V6`TensorialForms`Private`x_Symbol) | 
       (TensorForms1V6`TensorialForms`Private`x_Tensor) | 
       (TensorForms1V6`TensorialForms`Private`x_ExteriorD)], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[DoubleStruckD] \[VeryThinSpace] 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`x, 
            TensorForms1V6`TensorialForms`Private`form]\), ExteriorD, 
        Rule[SyntaxForm, "Wedge"]], ExteriorD[
       TensorForms1V6`TensorialForms`Private`x]}
 
MakeBoxes[ExteriorD[TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[DoubleStruckD] \[NegativeThinSpace] 
          \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr, 
              TensorForms1V6`TensorialForms`Private`form])\)\), ExteriorD, 
        Rule[SyntaxForm, "Wedge"]], ExteriorD[
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules_][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := 
    Switch[Head[TensorForms1V6`TensorialForms`Private`expr], 
     Symbol | Tensor | ExteriorD, (InterpretationBox[#1, Slot[2]] & ) @@ {
       \(\*StyleBox["\[SixPointedStar]", Rule[FontSize, 16]] 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr]\), 
       HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        TensorForms1V6`TensorialForms`Private`expr]}, _, (
       InterpretationBox[#1, Slot[2]] & ) @@ {
       \(\*StyleBox["\[SixPointedStar]", Rule[FontSize, 16]](
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr])\), 
       HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        TensorForms1V6`TensorialForms`Private`expr]}]
 
MakeBoxes[FormIntegral[TensorForms1V6`TensorialForms`Private`\[Alpha]_, 
      TensorForms1V6`TensorialForms`Private`surface_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[Integral]\_\(\*MakeBoxes[TensorForms1V6`TensorialForms`Pr\
ivate`surface, TensorForms1V6`TensorialForms`Private`form]\) 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`\[Alpha], 
            TensorForms1V6`TensorialForms`Private`form]\), FormIntegral, 
        Rule[SyntaxForm, "Integrate"]], FormIntegral[
       TensorForms1V6`TensorialForms`Private`\[Alpha], 
       TensorForms1V6`TensorialForms`Private`surface]}
 
MakeBoxes[FormIntegralDomain[TensorForms1V6`TensorialForms`Private`S_, 
      TensorForms1V6`TensorialForms`Private`domain_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \(\*MakeBoxes[TensorForms1V6`TensorialForms`Private`S, 
           TensorForms1V6`TensorialForms`Private`form]\), 
      FormIntegralDomain[TensorForms1V6`TensorialForms`Private`S, 
       TensorForms1V6`TensorialForms`Private`domain]}
 
MakeBoxes[grad[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[grad[TensorForms1V6`TensorialForms`Private`expr]], 
      grad[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[curl[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[curl[TensorForms1V6`TensorialForms`Private`expr]], 
      curl[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[div[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[div[TensorForms1V6`TensorialForms`Private`expr]], 
      div[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[cross[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`a_, 
      TensorForms1V6`TensorialForms`Private`b_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`a, 
           TensorForms1V6`TensorialForms`Private`form]) \[Cross] (
         \*MakeBoxes[TensorForms1V6`TensorialForms`Private`b, 
           TensorForms1V6`TensorialForms`Private`form])\), 
      cross[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`a, 
       TensorForms1V6`TensorialForms`Private`b]}
 
MakeBoxes[dot[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`a_, 
      TensorForms1V6`TensorialForms`Private`b_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`a, 
           TensorForms1V6`TensorialForms`Private`form]) . (
         \*MakeBoxes[TensorForms1V6`TensorialForms`Private`b, 
           TensorForms1V6`TensorialForms`Private`form])\), 
      dot[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`a, 
       TensorForms1V6`TensorialForms`Private`b]}
 
MakeBoxes[laplacian[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`f_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {RowBox[{SuperscriptBox["\[Del]", 2], MakeBoxes[
         TensorForms1V6`TensorialForms`Private`f]}], 
      laplacian[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`f]}
 
MakeBoxes[zero, TensorCalculus5`Tensorial`Private`form$:
      StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {MakeBoxes[0, TensorCalculus5`Tensorial`Private`form$], zero}
 
MakeBoxes[Slash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["/"] \*AdjustmentBox[ToBoxes[symbol], 
           Rule[BoxMargins, List[List[-0.8`, 0], List[0.`, 0]]]]\), 
      Slash[symbol]}
 
MakeBoxes[PartialDSlash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["/"] \*AdjustmentBox["\[PartialD]", 
           Rule[BoxMargins, List[List[-0.8`, 0.`], List[0.`, 0.`]]]] 
         \*ToBoxes[symbol]\), PartialDSlash[symbol]}
 
MakeBoxes[CovariantDSlash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["\[ScriptCapitalD]"] 
         \*AdjustmentBox["/", Rule[BoxMargins, 
            List[List[-0.6666666666666666`, -0.6666`], List[0.`, 0.`]]]][
         \*ToBoxes[symbol]]\), CovariantDSlash[symbol]}
 
MakeBoxes[GammaSlash[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Overscript[Style[a, Bold], "/"]], GammaSlash[a]}
 
MakeBoxes[IntegralOp[v_, a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript["\[Integral]", Column[v]][a]], IntegralOp[v, a]}
 
MakeBoxes[Transpose[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Superscript[a, T]], 
      Transpose[a]}
 
MakeBoxes[ConjugateTranspose[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[SuperDagger[a]], 
      ConjugateTranspose[a]}
 
MakeBoxes[Conjugate[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[SuperStar[a]], Conjugate[a]}
 
MakeBoxes[xPartialD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[PartialD]"], b][a]], xPartialD[a, b]}
 
MakeBoxes[xPartialDu[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar["\[PartialD]"], b][a]], xPartialDu[a, b]}
 
MakeBoxes[xCovariantD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[GothicCapitalD]"], b][a]], 
      xCovariantD[a, b]}
 
MakeBoxes[xCovariantDu[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar["\[GothicCapitalD]"], b][a]], 
      xCovariantDu[a, b]}
 
MakeBoxes[xLieD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[ScriptCapitalL]"], b][a]], xLieD[a, b]}
 
MakeBoxes[deltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[Delta]"], b][a]], deltaD[a, b]}
 
MakeBoxes[xDeltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[Del]"], b][a]], xDeltaD[a, b]}
 
MakeBoxes[xDeltaD[s_, a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Subscript[UnderBar[s], b][a]], 
      xDeltaD[s, a, b]}
 
MakeBoxes[xD[s_][a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Subscript[UnderBar[s], b][a]], 
      xD[s][a, b]}
 
MakeBoxes[xDu[s_][a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar[s], b][a]], xDu[s][a, b]}
 
MakeBoxes[xDDeltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["D"], b][a]], xDDeltaD[a, b]}
 
MakeBoxes[xDiscreteDelta[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar["\[Delta]"][a, b]], 
      xDiscreteDelta[a, b]}
 
MakeBoxes[xSum[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Underscript[UnderBar["\[Sum]"], Column[{b}]][a]], xSum[a, b]}
 
MakeBoxes[xProduct[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Underscript[UnderBar["\[Product]"], Column[{b}]][a]], 
      xProduct[a, b]}
 
MakeBoxes[Bra[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightBracketingBar]", Bold]\)\), Bra[b]}
 
MakeBoxes[Ket[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftBracketingBar]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), Ket[b]}
 
MakeBoxes[BraKet[b__, c__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["|", Bold]\) \(\*ToBoxes[c]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), BraKet[b, c]}
 
MakeBoxes[BraKet[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), BraKet[b]}
 
MakeBoxes[CommutatorM[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \([\(\*ToBoxes[a]\), \(\*ToBoxes[b]\)]\), CommutatorM[a, b]}
 
MakeBoxes[CommutatorP[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {\({\*ToBoxes[a], \*ToBoxes[b]}\), 
      CommutatorP[a, b]}
 
MakeBoxes[HodgeStar[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar["*"][a]], 
      HodgeStar[a]}
 
MakeBoxes[DifForm[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar[d][a]], DifForm[a]}
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_List, 
     TensorCalculus5`Tensorial`Private`v__] := 
    (PartialD[{TensorCalculus5`Tensorial`Private`x, 
         TensorCalculus5`Tensorial`Private`\[Delta], 
         TensorCalculus5`Tensorial`Private`g, 
         TensorCalculus5`Tensorial`Private`\[CapitalGamma]}][#1, 
       TensorCalculus5`Tensorial`Private`v] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, _, _}][
     TotalD[Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`a_}, {Void}], 
      TensorCalculus5`Tensorial`Private`t_], 
     Tensor[TensorCalculus5`Tensorial`Private`x_, 
      {TensorCalculus5`Tensorial`Private`b_}, {Void}]] := 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_, 
     TensorCalculus5`Tensorial`Private`v_List] := 
    D[TensorCalculus5`Tensorial`Private`w, Sequence @@ 
       TensorCalculus5`Tensorial`Private`v] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`w] && 
      And @@ (FreeTensorQ[#1] & ) /@ TensorCalculus5`Tensorial`Private`v
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_, 
     TensorCalculus5`Tensorial`Private`v_] := 
    D[TensorCalculus5`Tensorial`Private`w, 
      TensorCalculus5`Tensorial`Private`v] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`w] && 
      FreeTensorQ[TensorCalculus5`Tensorial`Private`v]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`s_SeriesData, 
     TensorCalculus5`Tensorial`Private`v_List] := 
    D[TensorCalculus5`Tensorial`Private`s, Sequence @@ 
      TensorCalculus5`Tensorial`Private`v]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`s_SeriesData, 
     TensorCalculus5`Tensorial`Private`v_] := 
    D[TensorCalculus5`Tensorial`Private`s, 
     TensorCalculus5`Tensorial`Private`v]
 
PartialD[TensorCalculus5`Tensorial`Private`labs_List][
      (TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`b_), 
      TensorCalculus5`Tensorial`Private`c_] /; 
     FreeQ[TensorCalculus5`Tensorial`Private`a, Tensor[__] | 
        TensorCalculus5`Tensorial`Private`c] && 
      FreeQ[TensorCalculus5`Tensorial`Private`c, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     PartialD[TensorCalculus5`Tensorial`Private`labs][
      TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`c]
 
PartialD[_][(TensorCalculus5`Tensorial`Private`a_)?NumericQ, _] := 0
 
PartialD[_][TensorCalculus5`Tensorial`Private`u_Symbol, 
     TensorCalculus5`Tensorial`Private`v__] := 
    0 /; MemberQ[Attributes[TensorCalculus5`Tensorial`Private`u], Constant]
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     TensorCalculus5`Tensorial`Private`T_Plus, 
     TensorCalculus5`Tensorial`Private`v_] := 
    (PartialD[TensorCalculus5`Tensorial`Private`labels][#1, 
       TensorCalculus5`Tensorial`Private`v] & ) /@ 
     TensorCalculus5`Tensorial`Private`T
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`labels_][
      (TensorCalculus5`Tensorial`Private`w_) . 
       (TensorCalculus5`Tensorial`Private`u_), 
      TensorCalculus5`Tensorial`Private`j_]] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`u + 
      PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] === False
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     (TensorCalculus5`Tensorial`Private`T_)*
      (TensorCalculus5`Tensorial`Private`U_), 
     TensorCalculus5`Tensorial`Private`v_] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`T, 
        TensorCalculus5`Tensorial`Private`v]*
       TensorCalculus5`Tensorial`Private`U + 
      TensorCalculus5`Tensorial`Private`T*
       PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`U, 
        TensorCalculus5`Tensorial`Private`v] /; 
     VectorQ[TensorCalculus5`Tensorial`Private`v] == False
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
     TensorCalculus5`Tensorial`Private`w_, {}] := 
    TensorCalculus5`Tensorial`Private`w
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
     TensorCalculus5`Tensorial`Private`w_, 
     {TensorCalculus5`Tensorial`Private`i_}] := 
    PartialD[TensorCalculus5`Tensorial`Private`labs][
     TensorCalculus5`Tensorial`Private`w, TensorCalculus5`Tensorial`Private`i]
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
      TensorCalculus5`Tensorial`Private`T_, 
      TensorCalculus5`Tensorial`Private`u_List] /; 
      !OrderedQ[TensorCalculus5`Tensorial`Private`u] := 
    PartialD[TensorCalculus5`Tensorial`Private`labs][
     TensorCalculus5`Tensorial`Private`T, 
     Sort[TensorCalculus5`Tensorial`Private`u]]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`i_}, {Void}], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`j_}, {Void}]] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`j] = 
    Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
     {TensorCalculus5`Tensorial`Private`i, Void}, 
     {Void, TensorCalculus5`Tensorial`Private`j}]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, {Void}, 
       {TensorCalculus5`Tensorial`Private`i_}], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, {Void}, 
       {TensorCalculus5`Tensorial`Private`j_}]] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`j] = 
    Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
     {TensorCalculus5`Tensorial`Private`j, Void}, 
     {Void, TensorCalculus5`Tensorial`Private`i}]
 
HoldPattern[PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`U1:{__}, 
       TensorCalculus5`Tensorial`Private`U2_], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`V__]]] := 
    Module[{TensorCalculus5`Tensorial`Private`ind}, 
      TensorCalculus5`Tensorial`Private`ind = MapThread[
         TensorCalculus5`Tensorial`Private`FilterPD, MapAt[Reverse[#1] & , 
          {{TensorCalculus5`Tensorial`Private`U1, 
            TensorCalculus5`Tensorial`Private`U2}, 
           {TensorCalculus5`Tensorial`Private`V}}, 2], 2]; 
       Times @@ (Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
           {#1[[1]], Void}, {Void, #1[[2]]}] & ) /@ 
         Transpose[TensorCalculus5`Tensorial`Private`ind]] /; 
     Count[TensorCalculus5`Tensorial`Private`ind = 
         MapThread[TensorCalculus5`Tensorial`Private`FilterPD, 
          MapAt[Reverse[#1] & , {{TensorCalculus5`Tensorial`Private`U1, 
             TensorCalculus5`Tensorial`Private`U2}, 
            {TensorCalculus5`Tensorial`Private`V}}, 2], 2], 
        TensorCalculus5`Tensorial`Private`FilterPD[__], 2] == 0 && 
      And @@ MapThread[Head[#1] === Head[#2] & , 
        Append[Transpose[TensorCalculus5`Tensorial`Private`ind], {1, 2}]]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     Tensor[TensorCalculus5`Tensorial`Private`\[Delta]_, __], _] := 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`i_}, {Void}], 
      {___, Tensor[TensorCalculus5`Tensorial`Private`x_, 
        {TensorCalculus5`Tensorial`Private`j_}, {Void}], ___, 
       Tensor[TensorCalculus5`Tensorial`Private`x_, 
        {TensorCalculus5`Tensorial`Private`k_}, {Void}], ___}] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
      Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`k] = 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, _, _, _}][
      TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`expr_] /; 
      !MatchQ[TensorCalculus5`Tensorial`Private`expr, 
       Tensor[TensorCalculus5`Tensorial`Private`x, 
        {TensorCalculus5`Tensorial`Private`i_}, {Void}]] := 1
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`labels_][
       TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`u_]], 
     TensorCalculus5`Tensorial`Private`v_] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
     TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`v, 
       TensorCalculus5`Tensorial`Private`u}]]
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     TensorCalculus5`Tensorial`Private`T_Times, 
     TensorCalculus5`Tensorial`Private`u_List] := 
    Fold[PartialD[TensorCalculus5`Tensorial`Private`labels][#1, #2] & , 
     TensorCalculus5`Tensorial`Private`T, TensorCalculus5`Tensorial`Private`u]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g_], 
      TensorCalculus5`Tensorial`Private`t_List]] := 
    Fold[PartialD[TensorCalculus5`Tensorial`Private`lab][#1, #2] & , 
      TensorCalculus5`Tensorial`Private`f[
       TensorCalculus5`Tensorial`Private`g], 
      TensorCalculus5`Tensorial`Private`t] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
       TensorCalculus5`Tensorial`Private`f]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`F_)[
       TensorCalculus5`Tensorial`Private`g_], 
      TensorCalculus5`Tensorial`Private`T_]] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`F][
       TensorCalculus5`Tensorial`Private`g]*
      PartialD[TensorCalculus5`Tensorial`Private`lab][
       TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`T] /; 
      !(MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`F] || 
       MatchQ[TensorCalculus5`Tensorial`Private`g, 
        Tensor[TensorCalculus5`Tensorial`Private`lab[[1]], 
         {(TensorCalculus5`Tensorial`Private`i_)?( !BaseIndexQ[#1] & )}, 
         {Void}]])
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`g_)^
       (TensorCalculus5`Tensorial`Private`n_), 
      TensorCalculus5`Tensorial`Private`T_]] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`T] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`T] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`T]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`g_)^
       (TensorCalculus5`Tensorial`Private`n_), 
      {TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`S__}]] := 
    PartialD[TensorCalculus5`Tensorial`Private`lab][
     Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`T] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`T], 
     {TensorCalculus5`Tensorial`Private`S}]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g__], 
      {TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`s__}]] := 
    PartialD[TensorCalculus5`Tensorial`Private`lab][
      PartialD[TensorCalculus5`Tensorial`Private`lab][
       TensorCalculus5`Tensorial`Private`f[
        TensorCalculus5`Tensorial`Private`g], 
       TensorCalculus5`Tensorial`Private`t], 
      {TensorCalculus5`Tensorial`Private`s}] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g__], 
      TensorCalculus5`Tensorial`Private`t_]] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*
         PartialD[TensorCalculus5`Tensorial`Private`lab][#2, 
          TensorCalculus5`Tensorial`Private`t] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t] && 
       !(Length[{TensorCalculus5`Tensorial`Private`g}] == 1 && 
        MatchQ[TensorCalculus5`Tensorial`Private`g, 
         Tensor[TensorCalculus5`Tensorial`Private`lab[[1]], 
          {(TensorCalculus5`Tensorial`Private`i_)?( !BaseIndexQ[#1] & )}, 
          {Void}]])
 
PartialD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
PartialD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`indices__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    PartialD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`indices_] := 
    PartialD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`indices] + 
     PartialD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`indices_] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`a}, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     PartialD[TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`t1_)*
       (TensorCalculus5`Tensorial`Private`t2__), 
      TensorCalculus5`Tensorial`Private`l_List] /; 
     Length[TensorCalculus5`Tensorial`Private`l] > 1 := 
    PartialD[PartialD[TensorCalculus5`Tensorial`Private`t1*
       TensorCalculus5`Tensorial`Private`t2, 
      Rest[TensorCalculus5`Tensorial`Private`l]], 
     First[TensorCalculus5`Tensorial`Private`l]]
 
PartialD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_PartialD))*
      (TensorCalculus5`Tensorial`Private`t2__), 
     {(TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ} | 
      (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ] := 
    PartialD[TensorCalculus5`Tensorial`Private`t1, 
       TensorCalculus5`Tensorial`Private`i]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*
      PartialD[Times @@ {TensorCalculus5`Tensorial`Private`t2}, 
       TensorCalculus5`Tensorial`Private`i]
 
PartialD[HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
       (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ]], 
     (TensorCalculus5`Tensorial`Private`j_)?SymbolicIndexQ] := 
    PartialD[TensorCalculus5`Tensorial`Private`t, 
     {TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`j}]
 
PartialD[HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`l_List]], 
     TensorCalculus5`Tensorial`Private`j_] := 
    PartialD[TensorCalculus5`Tensorial`Private`t, 
     Flatten[{TensorCalculus5`Tensorial`Private`l, 
       TensorCalculus5`Tensorial`Private`j}]]
 
PartialD[(TensorCalculus5`Tensorial`Private`w_) . 
      (TensorCalculus5`Tensorial`Private`u_), 
     TensorCalculus5`Tensorial`Private`j_] := 
    PartialD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`u + 
      PartialD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] === False
 
PartialD[TensorCalculus5`Tensorial`Private`w_, {}] := 
    TensorCalculus5`Tensorial`Private`w
 
PartialD[TensorCalculus5`Tensorial`Private`w_, 
     {TensorCalculus5`Tensorial`Private`i_}] := 
    PartialD[TensorCalculus5`Tensorial`Private`w, 
     TensorCalculus5`Tensorial`Private`i]
 
SyntaxInformation[PartialD] = {"ArgumentsPattern" -> {__}}
 
PartialD /: PartialD::usage = "PartialD[tensor, i]  calculates the partial \
derivative of the tensor with respect to the coordinate of index i. \n \
PartialD[tensor, {i,j,...}] represents the covariant derivative with repect \
to the list of indices.\nOn display a comma precedes the set of partial \
indices.\n\nThis is ambiguous until we expand the partial derivative \
providing the specific coordinate positions using ExpandPartialD. The \
derivative in this form does can not calculate partial derivatives of \
components of tensors because the coordinate positions and the Kronecker \
tensor are not yet specified. Symbols are considered constants when PartialD \
is used in this form.\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][tensor, \
Tensor[x,{i},{Void}]] calculates the partial derivative respect to the \
ith-coordinate position using coordinate label x and Kronecker tensor label \
\[Delta].\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][tensor, \
{Tensor[x,{i},{Void}]..}] calculates the higher order partial derivative over \
the coordinate positions. Symbols are not considered constants when the \
derivative is carried out over coordinates in this form of the partial \
derivative (with labels)\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][expr, v] \
is the partial derivative of expr with respect to the symbol v. When expr is \
free from tensor objects PartialD is reduced to the standard Mathematica \
partial derivative function D."
 
TotalD[\[CircleTimes](TensorCalculus5`Tensorial`Private`args__), 
     TensorCalculus5`Tensorial`Private`t__] := 
    Module[{TensorCalculus5`Tensorial`Private`n = 
       Length[{TensorCalculus5`Tensorial`Private`args}], 
      TensorCalculus5`Tensorial`Private`i}, 
     Sum[CircleTimes @@ Join[{TensorCalculus5`Tensorial`Private`args}[[
         Range[1, TensorCalculus5`Tensorial`Private`i - 1]]], 
        {TotalD[{TensorCalculus5`Tensorial`Private`args}[[
           TensorCalculus5`Tensorial`Private`i]], 
          TensorCalculus5`Tensorial`Private`t]}, 
        {TensorCalculus5`Tensorial`Private`args}[[
         Range[TensorCalculus5`Tensorial`Private`i + 1, 
          TensorCalculus5`Tensorial`Private`n]]]], 
      {TensorCalculus5`Tensorial`Private`i, 1, 
       TensorCalculus5`Tensorial`Private`n}]]
 
TotalD[TensorCalculus5`Tensorial`Private`w_List, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_List] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Equal, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Equal] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)?NumericQ, ___] := 0
 
TotalD[TensorCalculus5`Tensorial`Private`u_, 
     TensorCalculus5`Tensorial`Private`u_] := 1
 
TotalD[TensorCalculus5`Tensorial`Private`u_Symbol, 
     TensorCalculus5`Tensorial`Private`v___] := 
    0 /; MemberQ[Attributes[TensorCalculus5`Tensorial`Private`u], Constant]
 
TotalD[TensorCalculus5`Tensorial`Private`w_Plus, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Plus] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`j_] := 
    TotalD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j]*
       TensorCalculus5`Tensorial`Private`u + 
      TotalD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j]*
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] == False
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_)] := 
    TotalD[TensorCalculus5`Tensorial`Private`w]*
       TensorCalculus5`Tensorial`Private`u + 
      TotalD[TensorCalculus5`Tensorial`Private`u]*
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] == False
 
TotalD[(TensorCalculus5`Tensorial`Private`w_)?FreeTensorQ, 
     TensorCalculus5`Tensorial`Private`t_] := 
    Dt[TensorCalculus5`Tensorial`Private`w, 
      TensorCalculus5`Tensorial`Private`t] /; 
     Head[TensorCalculus5`Tensorial`Private`w] =!= PartialD && 
      Head[TensorCalculus5`Tensorial`Private`w] =!= TotalD && 
      Head[Head[TensorCalculus5`Tensorial`Private`w]] =!= PartialD && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[\[CircleTimes](TensorCalculus5`Tensorial`Private`args__)] := 
    Module[{TensorCalculus5`Tensorial`Private`n = 
       Length[{TensorCalculus5`Tensorial`Private`args}], 
      TensorCalculus5`Tensorial`Private`i}, 
     Sum[CircleTimes @@ Join[{TensorCalculus5`Tensorial`Private`args}[[
         Range[1, TensorCalculus5`Tensorial`Private`i - 1]]], 
        {TotalD[{TensorCalculus5`Tensorial`Private`args}[[
           TensorCalculus5`Tensorial`Private`i]]]}, 
        {TensorCalculus5`Tensorial`Private`args}[[
         Range[TensorCalculus5`Tensorial`Private`i + 1, 
          TensorCalculus5`Tensorial`Private`n]]]], 
      {TensorCalculus5`Tensorial`Private`i, 1, 
       TensorCalculus5`Tensorial`Private`n}]]
 
TotalD[(TensorCalculus5`Tensorial`Private`w_)?FreeTensorQ] := 
    Dt[TensorCalculus5`Tensorial`Private`w] /; 
     Head[TensorCalculus5`Tensorial`Private`w] =!= PartialD && 
      Head[TensorCalculus5`Tensorial`Private`w] =!= TotalD && 
      Head[Head[TensorCalculus5`Tensorial`Private`w]] =!= PartialD && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`g_)^
      (TensorCalculus5`Tensorial`Private`n_), 
     TensorCalculus5`Tensorial`Private`t_] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       TotalD[TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`t] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       TotalD[TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`t] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`g_)^
      (TensorCalculus5`Tensorial`Private`n_)] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`n]*
      TotalD[TensorCalculus5`Tensorial`Private`g] + 
     Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`n]*
      TotalD[TensorCalculus5`Tensorial`Private`n]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g_], 
     TensorCalculus5`Tensorial`Private`t_] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`f][
       TensorCalculus5`Tensorial`Private`g]*
      TotalD[TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`t] /; 
     TensorCalculus5`Tensorial`Private`f =!= Tensor && 
      TensorCalculus5`Tensorial`Private`f =!= Times && 
      TensorCalculus5`Tensorial`Private`f =!= Plus && 
      TensorCalculus5`Tensorial`Private`f =!= TotalD && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g_]] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`f][
       TensorCalculus5`Tensorial`Private`g]*
      TotalD[TensorCalculus5`Tensorial`Private`g] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g__], 
     TensorCalculus5`Tensorial`Private`t_] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*TotalD[#2, 
          TensorCalculus5`Tensorial`Private`t] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g__]] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*TotalD[#2] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`j_List] := Fold[TotalD[#1, #2] & , 
     TensorCalculus5`Tensorial`Private`w*TensorCalculus5`Tensorial`Private`u, 
     TensorCalculus5`Tensorial`Private`j]
 
TotalD[HoldPattern[TotalD[TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`u_]], 
     TensorCalculus5`Tensorial`Private`v_] := 
    TotalD[TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`u, 
       TensorCalculus5`Tensorial`Private`v}]]
 
TotalD[TensorCalculus5`Tensorial`Private`T_, 
     TensorCalculus5`Tensorial`Private`u_List] := 
    Fold[TotalD[#1, #2] & , TensorCalculus5`Tensorial`Private`T, 
      TensorCalculus5`Tensorial`Private`u] /; 
     Head[TensorCalculus5`Tensorial`Private`T] =!= Tensor
 
SyntaxInformation[TotalD] = {"ArgumentsPattern" -> {__}}
 
TotalD /: TotalD::usage = "TotalD[expr, t] calculates the total derivative of \
expr with respect to the parameter t. Symbols are not considered constants \
unless they have the Constant attribute.\n \nTotalD[expr, {t,v,...}] \
represents the covariant derivative with repect to the list of parameters \n \
\nThis derivative can be we expanded in terms of its partial derivative over \
the coordinate positions using ExpandTotalD.\n\nTotalD is reduced to the \
standard Mathematica Dt if expr is free from tensor objects."
 
CircleTimes /: CircleTimes::usage = "CircleTimes is used to represent full \
form tensor products. It maintains the order of tensor factors."
 
FreeTensorQ[TensorCalculus5`Tensorial`Private`w_] := 
    Position[TensorCalculus5`Tensorial`Private`w, Tensor] == {}
 
SyntaxInformation[FreeTensorQ] = {"ArgumentsPattern" -> {_}}
 
FreeTensorQ /: FreeTensorQ::usage = 
     "FreeTensorQ[ expr ], gives True or False if expr contains a Tensor "
 
Attributes[Derivative] = {NHoldAll, ReadProtected}
 
AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`difvars__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    AbsoluteD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`difvars_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`difvars] + 
     AbsoluteD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`difvars_] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`a}, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     AbsoluteD[TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`t1_Tensor)*
       (TensorCalculus5`Tensorial`Private`t2__Tensor), 
      TensorCalculus5`Tensorial`Private`l_List] /; 
     Length[TensorCalculus5`Tensorial`Private`l] > 1 := 
    AbsoluteD[AbsoluteD[TensorCalculus5`Tensorial`Private`t1*
       TensorCalculus5`Tensorial`Private`t2, 
      Drop[TensorCalculus5`Tensorial`Private`l, -1]], 
     Last[TensorCalculus5`Tensorial`Private`l]]
 
AbsoluteD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_AbsoluteD) | 
       (TensorCalculus5`Tensorial`Private`t1_TotalD))*
      (TensorCalculus5`Tensorial`Private`t2__), 
     {TensorCalculus5`Tensorial`Private`i_} | 
      (TensorCalculus5`Tensorial`Private`i_)] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t1, 
       TensorCalculus5`Tensorial`Private`i]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*
      AbsoluteD[Times @@ {TensorCalculus5`Tensorial`Private`t2}, 
       TensorCalculus5`Tensorial`Private`i]
 
AbsoluteD[HoldPattern[AbsoluteD[TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`i_]], 
     TensorCalculus5`Tensorial`Private`j_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t, 
     {TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`j}]
 
AbsoluteD[0, TensorCalculus5`Tensorial`Private`j_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t_, 
     Flatten[{TensorCalculus5`Tensorial`Private`l, 
       TensorCalculus5`Tensorial`Private`j}]]
 
AbsoluteD[Tensor[TensorCalculus5`Tensorial`Private`T_], 
      TensorCalculus5`Tensorial`Private`j_] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`j] && 
      FreeQ[TensorCalculus5`Tensorial`Private`T, Tensor] := 
    TotalD[Tensor[TensorCalculus5`Tensorial`Private`T], 
     TensorCalculus5`Tensorial`Private`j]
 
AbsoluteD[Tensor[TensorCalculus5`Tensorial`Private`T_], 
     {TensorCalculus5`Tensorial`Private`j_}] := 
    TotalD[Tensor[TensorCalculus5`Tensorial`Private`T], 
     TensorCalculus5`Tensorial`Private`j]
 
SyntaxInformation[AbsoluteD] = {"ArgumentsPattern" -> {_, _}}
 
AbsoluteD /: AbsoluteD::usage = "AbsoluteD[tensor, t]  represents the \
absolute derivative of the tensor with respect to the parameter t. \
\nAbsoluteD[tensor, {t,v,...}] represents the absolute derivative with repect \
to the list of parameters \nThis derivative is ambiguous until we expand the \
partial derivative providing the specific coordinate positions using \
ExpandAbsoluteD."
 
LieD[TensorCalculus5`Tensorial`Private`w_Plus, 
     TensorCalculus5`Tensorial`Private`V_] := 
    (LieD[#1, TensorCalculus5`Tensorial`Private`V] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
LieD[(TensorCalculus5`Tensorial`Private`u_)?NumericQ, __] := 0
 
LieD[TensorCalculus5`Tensorial`Private`u_Symbol, _] := 0
 
LieD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`V_] := 
    LieD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`V]*
       TensorCalculus5`Tensorial`Private`u + 
      LieD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`V]*
       TensorCalculus5`Tensorial`Private`w /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`V]
 
LieD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`V_List] := 
    Fold[LieD[#1, #2] & , TensorCalculus5`Tensorial`Private`w*
      TensorCalculus5`Tensorial`Private`u, 
     TensorCalculus5`Tensorial`Private`V]
 
LieD[LieD[TensorCalculus5`Tensorial`Private`T_, 
      TensorCalculus5`Tensorial`Private`U_], 
     TensorCalculus5`Tensorial`Private`V_] := 
    LieD[TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`U, 
       TensorCalculus5`Tensorial`Private`V}]]
 
LieD[TensorCalculus5`Tensorial`Private`T_, 
     TensorCalculus5`Tensorial`Private`U_List] := 
    Fold[LieD[#1, #2] & , TensorCalculus5`Tensorial`Private`T, 
      TensorCalculus5`Tensorial`Private`U] /; 
     Head[TensorCalculus5`Tensorial`Private`T] =!= Tensor
 
SyntaxInformation[LieD] = {"ArgumentsPattern" -> {_, _}}
 
LieD /: LieD::usage = "LieD[tensor, V]  represents the Lie derivative of the \
tensor with respect to the vector field V.\nLieD[tensor, {U,V...}] represents \
the Lie derivative with repect to the list of vector fields.\nThis derivative \
is ambiguous until we expand the partial derivatives, providing the specific \
coordinate positions using ExpandLieD."
 
TensorCalculus5`Tensorial`Private`FilterPD[Void, Void] := Sequence[]
 
TensorCalculus5`Tensorial`Private`FilterPD[
     TensorCalculus5`Tensorial`Private`i_, Void] := 
    TensorCalculus5`Tensorial`Private`i
 
TensorCalculus5`Tensorial`Private`FilterPD[Void, 
     TensorCalculus5`Tensorial`Private`i_] := 
    TensorCalculus5`Tensorial`Private`i
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ] := 
    CovariantD[TensorCalculus5`Tensorial`Private`tensor, {Void}, 
     {TensorCalculus5`Tensorial`Private`i}]
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     TensorCalculus5`Tensorial`Private`downs:{_?SymbolicIndexQ..}] := 
    Module[{TensorCalculus5`Tensorial`Private`l = 
       Length[TensorCalculus5`Tensorial`Private`downs]}, 
     CovariantD[TensorCalculus5`Tensorial`Private`tensor, 
      Table[Void, {TensorCalculus5`Tensorial`Private`l}], 
      TensorCalculus5`Tensorial`Private`downs]]
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     (TensorCalculus5`Tensorial`Private`f_)?udsymQ[
      TensorCalculus5`Tensorial`Private`indices__]] := 
    CovariantD[TensorCalculus5`Tensorial`Private`tensor, 
     Parseud[TensorCalculus5`Tensorial`Private`f[
       TensorCalculus5`Tensorial`Private`indices]]]
 
CovariantD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
CovariantD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`indices__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    CovariantD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[HoldPattern[CovariantD[TensorCalculus5`Tensorial`Private`expr_, 
       TensorCalculus5`Tensorial`Private`iup_, 
       TensorCalculus5`Tensorial`Private`idown_]], 
     TensorCalculus5`Tensorial`Private`jup_, 
     TensorCalculus5`Tensorial`Private`jdown_] := 
    CovariantD[TensorCalculus5`Tensorial`Private`expr, 
     Join[TensorCalculus5`Tensorial`Private`iup, 
      TensorCalculus5`Tensorial`Private`jup], 
     Join[TensorCalculus5`Tensorial`Private`idown, 
      TensorCalculus5`Tensorial`Private`jdown]]
 
CovariantD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`indices__] := 
    CovariantD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`indices] + 
     CovariantD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`indices__] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`a] := 
    TensorCalculus5`Tensorial`Private`a*CovariantD[
      TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_CovariantD))*
      (TensorCalculus5`Tensorial`Private`t2_), 
     {TensorCalculus5`Tensorial`Private`upi_}, 
     {TensorCalculus5`Tensorial`Private`downi_}] := 
    CovariantD[TensorCalculus5`Tensorial`Private`t1, 
       {TensorCalculus5`Tensorial`Private`upi}, 
       {TensorCalculus5`Tensorial`Private`downi}]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*CovariantD[
       TensorCalculus5`Tensorial`Private`t2, 
       {TensorCalculus5`Tensorial`Private`upi}, 
       {TensorCalculus5`Tensorial`Private`downi}]
 
CovariantD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_CovariantD))*
      (TensorCalculus5`Tensorial`Private`t2_), 
     TensorCalculus5`Tensorial`Private`upi_, 
     TensorCalculus5`Tensorial`Private`downi_] := 
    Module[{TensorCalculus5`Tensorial`Private`firstind, 
      TensorCalculus5`Tensorial`Private`restind, 
      TensorCalculus5`Tensorial`Private`allinds}, 
     TensorCalculus5`Tensorial`Private`allinds = 
       Transpose[{TensorCalculus5`Tensorial`Private`upi, 
         TensorCalculus5`Tensorial`Private`downi}]; 
      TensorCalculus5`Tensorial`Private`firstind = 
       ({#1} & ) /@ First[TensorCalculus5`Tensorial`Private`allinds]; 
      TensorCalculus5`Tensorial`Private`restind = 
       Transpose[Rest[TensorCalculus5`Tensorial`Private`allinds]]; 
      CovariantD[CovariantD[TensorCalculus5`Tensorial`Private`t1*
         TensorCalculus5`Tensorial`Private`t2, Sequence @@ 
         TensorCalculus5`Tensorial`Private`firstind], 
       Sequence @@ TensorCalculus5`Tensorial`Private`restind]]
 
SyntaxInformation[CovariantD] = {"ArgumentsPattern" -> {_, __}}
 
CovariantD /: CovariantD::usage = "CovariantD[tensor,i] represents the \
covariant derivative of the tensor with respect to the down index \
i.\nCovariantD[tensor, {i,j,...}] represents the covariant derivative with \
repect to the list of down indices indices.\n CovariantD[tensor,ud..[i,j,..] \
represents the covariant and contravariant derivative with respect to the \
indices i, j,.... ud... is a series of 'u' and 'd' characters signifying the \
up and down positions of the covariant indices.\n Symbols are considered \
constants."
 
SymbolicIndexQ[TensorCalculus5`Tensorial`Private`i_] := 
    Module[{TensorCalculus5`Tensorial`Private`ISymbol}, 
     TensorCalculus5`Tensorial`Private`ISymbol[
        TensorCalculus5`Tensorial`Private`s_] := 
       Head[TensorCalculus5`Tensorial`Private`s] === Symbol && 
         !BaseIndexQ[TensorCalculus5`Tensorial`Private`s]; 
      MatchQ[TensorCalculus5`Tensorial`Private`i, 
       _?TensorCalculus5`Tensorial`Private`ISymbol | _?IndexFlavorQ[
         _?TensorCalculus5`Tensorial`Private`ISymbol]]]
 
SyntaxInformation[SymbolicIndexQ] = {"ArgumentsPattern" -> {_}}
 
SymbolicIndexQ /: SymbolicIndexQ::usage = "SymbolicIndexQ[index] returns true \
if index is a Symbol or if index is flavor[i_Symbol] where flavor is a \
currently active flavor."
 
Parseud[(TensorCalculus5`Tensorial`Private`udsym_)[
      TensorCalculus5`Tensorial`Private`args__]] := 
    Module[{TensorCalculus5`Tensorial`Private`symcharacters = 
       Characters[SymbolName[TensorCalculus5`Tensorial`Private`udsym]], 
      TensorCalculus5`Tensorial`Private`numslots, 
      TensorCalculus5`Tensorial`Private`ups, 
      TensorCalculus5`Tensorial`Private`downs, 
      TensorCalculus5`Tensorial`Private`i}, 
     TensorCalculus5`Tensorial`Private`numslots = 
       Length[TensorCalculus5`Tensorial`Private`symcharacters]; 
      If[TensorCalculus5`Tensorial`Private`numslots != 
        Length[{TensorCalculus5`Tensorial`Private`args}], 
       Message[Parseud::Arguments, TensorCalculus5`Tensorial`Private`udsym[
          TensorCalculus5`Tensorial`Private`args]]; Abort[]]; 
      If[And @@ (#1 == "u" || #1 == "d" & ) /@ 
          TensorCalculus5`Tensorial`Private`symcharacters == False, 
       Message[Parseud::BadHead, TensorCalculus5`Tensorial`Private`udsym]; 
        Abort[]]; TensorCalculus5`Tensorial`Private`ups = 
       TensorCalculus5`Tensorial`Private`downs = Table[Void, 
         {TensorCalculus5`Tensorial`Private`numslots}]; 
      Do[If[TensorCalculus5`Tensorial`Private`symcharacters[[
          TensorCalculus5`Tensorial`Private`i]] == "u", 
        TensorCalculus5`Tensorial`Private`ups = ReplacePart[
          TensorCalculus5`Tensorial`Private`ups, 
          TensorCalculus5`Tensorial`Private`i -> 
           {TensorCalculus5`Tensorial`Private`args}[[
            TensorCalculus5`Tensorial`Private`i]]], 
        TensorCalculus5`Tensorial`Private`downs = ReplacePart[
          TensorCalculus5`Tensorial`Private`downs, 
          TensorCalculus5`Tensorial`Private`i -> 
           {TensorCalculus5`Tensorial`Private`args}[[
            TensorCalculus5`Tensorial`Private`i]]]], 
       {TensorCalculus5`Tensorial`Private`i, 1, 
        TensorCalculus5`Tensorial`Private`numslots}]; 
      Sequence @@ {TensorCalculus5`Tensorial`Private`ups, 
        TensorCalculus5`Tensorial`Private`downs}]
 
SyntaxInformation[Parseud] = {"ArgumentsPattern" -> {_}}
 
Parseud /: Parseud::Arguments = 
     "The arguments in `` do not match the number of up and down slots."
 
Parseud /: Parseud::BadHead = 
     "`` is not a symbol consisting solely of 'u's and 'd's."
 
Parseud /: Parseud::usage = "Parseud[udsym[args]] will parse a ud expression \
and return Sequence[uplist,downlist] with Voids in the empty positions."
 
TensorCalculus5`Tensorial`Private`TDu = "\[DifferentialD]"
 
TensorCalculus5`Tensorial`Private`TDd = "\[DifferentialD]"
 
TensorCalculus5`Tensorial`Private`ADu = "D"
 
TensorCalculus5`Tensorial`Private`ADd = "d"
 
TensorCalculus5`Tensorial`Private`CovSym = ";"
 
TensorCalculus5`Tensorial`Private`DifSym = ","
 
ExteriorD[ExteriorD[TensorForms1V6`TensorialForms`Private`v_]] := 0
 
ExteriorD[TensorForms1V6`TensorialForms`Private`v_] /; 
     NumericQ[TensorForms1V6`TensorialForms`Private`v] || 
      (Head[TensorForms1V6`TensorialForms`Private`v] === Symbol && 
       MatchQ[Constant, Alternatives @@ Attributes[
          TensorForms1V6`TensorialForms`Private`v]]) := 0
 
ExteriorD[TensorForms1V6`TensorialForms`Private`arg_] /; 
     Expand[TensorForms1V6`TensorialForms`Private`arg] =!= 
      TensorForms1V6`TensorialForms`Private`arg := 
    ExteriorD[Expand[TensorForms1V6`TensorialForms`Private`arg]]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`a_) + 
      (TensorForms1V6`TensorialForms`Private`b_)] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`a] + 
     ExteriorD[TensorForms1V6`TensorialForms`Private`b]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`c_)*
       (TensorForms1V6`TensorialForms`Private`d_)] /; 
     NumericQ[TensorForms1V6`TensorialForms`Private`c] || 
      (Head[TensorForms1V6`TensorialForms`Private`c] === Symbol && 
       MatchQ[Constant, Alternatives @@ Attributes[
          TensorForms1V6`TensorialForms`Private`c]]) := 
    TensorForms1V6`TensorialForms`Private`c*
     ExteriorD[TensorForms1V6`TensorialForms`Private`d]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`f_ /; 
       FreeQ[TensorForms1V6`TensorialForms`Private`f, _?WedgeVectorQ | 
         Wedge])*(TensorForms1V6`TensorialForms`Private`dx_)?WedgeVectorQ] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`f] \[Wedge] 
     TensorForms1V6`TensorialForms`Private`dx
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`f_ /; 
       FreeQ[TensorForms1V6`TensorialForms`Private`f, _?WedgeVectorQ])*
      Wedge[TensorForms1V6`TensorialForms`Private`args__]] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`f] \[Wedge] 
      (Wedge[TensorForms1V6`TensorialForms`Private`args]) + 
     TensorForms1V6`TensorialForms`Private`f*
      ExteriorD[Wedge[TensorForms1V6`TensorialForms`Private`args]]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`a_) \[Wedge] 
      (TensorForms1V6`TensorialForms`Private`b__)] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`a] \[Wedge] 
      TensorForms1V6`TensorialForms`Private`b - 
     TensorForms1V6`TensorialForms`Private`a \[Wedge] 
      ExteriorD[If[Length[{TensorForms1V6`TensorialForms`Private`b}] > 1, 
        Wedge[TensorForms1V6`TensorialForms`Private`b], 
        First[{TensorForms1V6`TensorialForms`Private`b}]]]
 
ExteriorD /: ExteriorD::usage = "ExteriorD[\[Phi]] represents the exterior \
derivative of \[Phi], where \[Phi] can be an expression."
 
WedgeVectorQ[TensorForms1V6`TensorialForms`Private`x_] := 
    MatchQ[TensorForms1V6`TensorialForms`Private`x, 
     Flatten[Alternatives @@ WedgeVectors]]
 
WedgeVectorQ /: WedgeVectorQ::usage = 
     "WedgeVectorQ[expr] returns True if expr matches the WedgeVectors \
pattern."
 
WedgeVectors = {None, None}
 
WedgeVectors /: WedgeVectors::usage = "WedgeVectors stores the patterns that \
will represent 1-forms and 1-vectors. It takes the form {form1|form2|..., \
vector1|vector2|...}. Anything that does not fit onr of the patterns in \
WedgeVectors is factored from Wedge products."
 
HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Switch[Head[TensorForms1V6`TensorialForms`Private`expr], 
     List | Equal | TensorForms1V6`TensorialForms`Private`NotEqual | Less | 
      LessEqual | Greater | GreaterEqual | Plus, 
     (HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        Expand[#1]] & ) /@ TensorForms1V6`TensorialForms`Private`expr, _, 
     Module[{TensorForms1V6`TensorialForms`Private`workexpr = 
        TensorForms1V6`TensorialForms`Private`expr, 
       TensorForms1V6`TensorialForms`Private`forms = 
        Drop[Flatten[First /@ TensorForms1V6`TensorialForms`Private`hodgerule\
s], -1], TensorForms1V6`TensorialForms`Private`rule0}, 
      TensorForms1V6`TensorialForms`Private`workexpr = 
        SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
            1]]][TensorForms1V6`TensorialForms`Private`workexpr]; 
       TensorForms1V6`TensorialForms`Private`workexpr = 
        TensorForms1V6`TensorialForms`Private`workexpr /. 
         TensorForms1V6`TensorialForms`Private`hodgerules; 
       If[TensorForms1V6`TensorialForms`Private`workexpr === 
          TensorForms1V6`TensorialForms`Private`expr && 
         FreeQ[TensorForms1V6`TensorialForms`Private`workexpr, 
          Alternatives @@ TensorForms1V6`TensorialForms`Private`forms], 
        TensorForms1V6`TensorialForms`Private`rule0 = 
          TensorForms1V6`TensorialForms`Private`hodgerules[[-1]]; 
         (TensorForms1V6`TensorialForms`Private`workexpr*
           TensorForms1V6`TensorialForms`Private`rule0[[2]])/hodgestar$, 
        TensorForms1V6`TensorialForms`Private`workexpr]]]
 
HodgeStar /: HodgeStar::usage = "HodgeStar[hodgerules][expr] will take the \
Hodge star of expr given the set of hodgerules. hodgerules can be generated \
by the HodgeStarRules routine. HodgeStar will format as a star preceeding \
expr until an actual set of rules is substituted."
 
SortWedge[TensorForms1V6`TensorialForms`Private`baseelements_List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Module[{TensorForms1V6`TensorialForms`Private`BasisQ}, 
     TensorForms1V6`TensorialForms`Private`BasisQ[
        TensorForms1V6`TensorialForms`Private`elem_] := 
       MemberQ[TensorForms1V6`TensorialForms`Private`baseelements, 
        TensorForms1V6`TensorialForms`Private`elem]; 
      TensorForms1V6`TensorialForms`Private`expr /. 
       (TensorForms1V6`TensorialForms`Private`a_.)*
         (TensorForms1V6`TensorialForms`Private`wdg:
          Wedge[(TensorForms1V6`TensorialForms`Private`b__)?
            TensorForms1V6`TensorialForms`Private`BasisQ]) :> 
        TensorForms1V6`TensorialForms`Private`a*
         Module[{TensorForms1V6`TensorialForms`Private`syms, 
           TensorForms1V6`TensorialForms`Private`target, 
           TensorForms1V6`TensorialForms`Private`symorder, 
           TensorForms1V6`TensorialForms`Private`targetorder}, 
          TensorForms1V6`TensorialForms`Private`target = 
            List @@ TensorForms1V6`TensorialForms`Private`wdg; 
           TensorForms1V6`TensorialForms`Private`syms = 
            TensorForms1V6`TensorialForms`Private`UnsortedIntersection[
             TensorForms1V6`TensorialForms`Private`baseelements, 
             TensorForms1V6`TensorialForms`Private`target]; 
           TensorForms1V6`TensorialForms`Private`symorder = 
            Ordering[TensorForms1V6`TensorialForms`Private`syms]; 
           TensorForms1V6`TensorialForms`Private`targetorder = 
            Ordering[TensorForms1V6`TensorialForms`Private`target]; 
           Signature[TensorForms1V6`TensorialForms`Private`symorder]*
            Signature[TensorForms1V6`TensorialForms`Private`targetorder]*
            Wedge @@ TensorForms1V6`TensorialForms`Private`syms]]
 
SortWedge[][TensorForms1V6`TensorialForms`Private`expr_] := 
    TensorForms1V6`TensorialForms`Private`expr /. 
     Wedge[TensorForms1V6`TensorialForms`Private`args__] :> 
      Signature[{TensorForms1V6`TensorialForms`Private`args}]*
       Wedge @@ Sort[{TensorForms1V6`TensorialForms`Private`args}]
 
SortWedge /: SortWedge::usage = "SortWedge[basis:{x,y,z...}][expr] will \
reorder wedge products in expr that involve 1-form basis elements x, y, z... \
so they are in the same order as basis with the appropriate sign adjustments. \
x\[Wedge]y\[Wedge]z... will have a positive sign.\nSortWedge[][expr] will put \
all wedge products in natural sort order."
 
TensorForms1V6`TensorialForms`Private`UnsortedIntersection[
     TensorForms1V6`TensorialForms`Private`basis_, 
     TensorForms1V6`TensorialForms`Private`list_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`basis, 
      TensorForms1V6`TensorialForms`Private`i}, 
     Do[If[ !MemberQ[TensorForms1V6`TensorialForms`Private`list, 
          TensorForms1V6`TensorialForms`Private`work[[
           TensorForms1V6`TensorialForms`Private`i]]], 
        TensorForms1V6`TensorialForms`Private`work[[
          TensorForms1V6`TensorialForms`Private`i]] = Null], 
       {TensorForms1V6`TensorialForms`Private`i, 1, 
        Length[TensorForms1V6`TensorialForms`Private`basis]}]; 
      TensorForms1V6`TensorialForms`Private`work /. Null -> Sequence[]]
 
FormIntegral /: FormIntegral::usage = "FormIntegral[form, domain] represents \
an abstract form integral and displays as such. domain is the symbol that \
will appear in the lower position on the integral sign. The \
FormIntegralDomain header can be used as the domain argument."
 
FormIntegralDomain /: FormIntegralDomain::usage = "FormIntegralDomain[symbol, \
domainInequalities] represents a form integral domain. Only the symbol \
displays. The domainInequalities must be logical statements in the form a < \
xu[flavor@a] < b. The same inequality must be used in both positions. Such \
statements are combined with Ands for higher dimensional domains."
 
grad[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`function_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`function, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`formfunction = 
       ExteriorD[Tensor[TensorForms1V6`TensorialForms`Private`x, {#1}, 
          {Void}]] & ; TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
grad /: grad::usage = "grad[labs, flavor:Identity][scalarfunction] will \
calculate the gradient of a 2D or 3D function. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. The \
optional argument flavor gives the index flavor for the expansion of the \
exterior derivative."
 
ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs:
       {TensorForms1V6`TensorialForms`Private`x_, 
        TensorForms1V6`TensorialForms`Private`\[Delta]_, _, _}, 
      TensorForms1V6`TensorialForms`Private`dummy_ /; 
       Head[TensorForms1V6`TensorialForms`Private`dummy] =!= List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs, 
      {TensorForms1V6`TensorialForms`Private`dummy}][
     TensorForms1V6`TensorialForms`Private`expr]
 
ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs:
       {TensorForms1V6`TensorialForms`Private`x_, 
        TensorForms1V6`TensorialForms`Private`\[Delta]_, _, _}, 
      TensorForms1V6`TensorialForms`Private`dummies_List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`expr}, 
     TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        Wedge[TensorForms1V6`TensorialForms`Private`args__] :> 
         Catch[Module[{TensorForms1V6`TensorialForms`Private`n, 
            TensorForms1V6`TensorialForms`Private`indexpositions, 
            TensorForms1V6`TensorialForms`Private`indexwedge, 
            TensorForms1V6`TensorialForms`Private`u, 
            TensorForms1V6`TensorialForms`Private`i}, 
           TensorForms1V6`TensorialForms`Private`indexpositions = 
             Flatten[Position[Wedge[
                TensorForms1V6`TensorialForms`Private`args], ExteriorD[
                 TensorForms1V6`TensorialForms`Private`darg_] /; 
                 !MatchQ[TensorForms1V6`TensorialForms`Private`darg, 
                  Tensor[TensorForms1V6`TensorialForms`Private`x, {_}, 
                   {Void}]]]]; TensorForms1V6`TensorialForms`Private`n = 
             Length[TensorForms1V6`TensorialForms`Private`indexpositions]; 
            If[TensorForms1V6`TensorialForms`Private`n == 0, 
             Throw[Wedge[TensorForms1V6`TensorialForms`Private`args]]]; 
            If[TensorForms1V6`TensorialForms`Private`n > 
              Length[TensorForms1V6`TensorialForms`Private`dummies], 
             Message[ExpandExteriorD::dummies, 
               TensorForms1V6`TensorialForms`Private`dummies, Wedge[
                TensorForms1V6`TensorialForms`Private`args]]; Abort[]]; 
            TensorForms1V6`TensorialForms`Private`indexwedge = 
             Wedge @@ Array[Unique[
                 TensorForms1V6`TensorialForms`Private`u] & , {
                Length[{TensorForms1V6`TensorialForms`Private`args}]}]; 
            Do[TensorForms1V6`TensorialForms`Private`indexwedge[[
               TensorForms1V6`TensorialForms`Private`indexpositions[[
                TensorForms1V6`TensorialForms`Private`i]]]] = 
              TensorForms1V6`TensorialForms`Private`dummies[[
               TensorForms1V6`TensorialForms`Private`i]], 
             {TensorForms1V6`TensorialForms`Private`i, 1, 
              Length[TensorForms1V6`TensorialForms`Private`indexpositions]}]; 
            Throw[Inner[ExpandExteriorD[
                 TensorForms1V6`TensorialForms`Private`dlabs, {#2}][#1] & , 
              Wedge[TensorForms1V6`TensorialForms`Private`args], 
              TensorForms1V6`TensorialForms`Private`indexwedge, Wedge]]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        ExteriorD[TensorForms1V6`TensorialForms`Private`arg_ /; 
            !MatchQ[TensorForms1V6`TensorialForms`Private`arg, 
             Tensor[TensorForms1V6`TensorialForms`Private`x, {_}, {Void}] | 
              Wedge[__]]] :> 
         With[{TensorForms1V6`TensorialForms`Private`coord = 
            Tensor[TensorForms1V6`TensorialForms`Private`x, 
             {First[TensorForms1V6`TensorialForms`Private`dummies]}, 
             {Void}]}, KroneckerAbsorb[
            TensorForms1V6`TensorialForms`Private`\[Delta]][
           Expand[PartialD[TensorForms1V6`TensorialForms`Private`dlabs][
              TensorForms1V6`TensorialForms`Private`arg, 
              TensorForms1V6`TensorialForms`Private`coord]*
             ExteriorD[TensorForms1V6`TensorialForms`Private`coord]]]]]
 
ExpandExteriorD /: ExpandExteriorD::dummies = "Number of dummies `` does not \
match number of expansion indices needed in ``"
 
ExpandExteriorD /: ExpandExteriorD::usage = "ExpandExteriorD[{x,\[Delta],g,\
\[CapitalGamma]}, index][expr] will expand exterior derivatives in expression \
using index as the dummy index."
 
KroneckerAbsorb[TensorCalculus5`Tensorial`Private`\[Delta]_][
     TensorCalculus5`Tensorial`Private`expr_] := 
    TensorCalculus5`Tensorial`Private`expr //. 
     {Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {TensorCalculus5`Tensorial`Private`i_, Void}, 
          {Void, TensorCalculus5`Tensorial`Private`j_}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KADownTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {TensorCalculus5`Tensorial`Private`j_, Void}, 
          {Void, TensorCalculus5`Tensorial`Private`i_}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KAUpTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {Void, TensorCalculus5`Tensorial`Private`i_}, 
          {TensorCalculus5`Tensorial`Private`j_, Void}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KADownTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {Void, TensorCalculus5`Tensorial`Private`j_}, 
          {TensorCalculus5`Tensorial`Private`i_, Void}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KAUpTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term]}
 
SyntaxInformation[KroneckerAbsorb] = {"ArgumentsPattern" -> {_}}
 
KroneckerAbsorb /: KroneckerAbsorb::usage = "KroneckerAbsorb[\[Delta]][expr] \
will perform all replacement operations of first order mixed tensors with \
labels \[Delta], assumed to be Kronecker deltas."
 
TensorCalculus5`Tensorial`Private`KADownTest[
     TensorCalculus5`Tensorial`Private`i_, 
     TensorCalculus5`Tensorial`Private`termexpr_] := 
    MemberQ[ParseTermIndices[TensorCalculus5`Tensorial`Private`termexpr][[2,
      2]], TensorCalculus5`Tensorial`Private`i]
 
ParseTermIndices[TensorCalculus5`Tensorial`Private`term_] := 
    Module[{TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`term, 
      TensorCalculus5`Tensorial`Private`slotsort, 
      TensorCalculus5`Tensorial`Private`uplist, 
      TensorCalculus5`Tensorial`Private`downlist, 
      TensorCalculus5`Tensorial`Private`slotorder, 
      TensorCalculus5`Tensorial`Private`badlist, 
      TensorCalculus5`Tensorial`Private`dummylist, 
      TensorCalculus5`Tensorial`Private`scalar, 
      TensorCalculus5`Tensorial`Private`tlab, 
      TensorCalculus5`Tensorial`Private`updvars}, 
     TensorCalculus5`Tensorial`Private`slotsort[
        TensorCalculus5`Tensorial`Private`list_] := 
       Sort[TensorCalculus5`Tensorial`Private`list, 
        Position[TensorCalculus5`Tensorial`Private`slotorder, #1][[1,1]] <= 
          Position[TensorCalculus5`Tensorial`Private`slotorder, #2][[1,
           1]] & ]; TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        TensorCalculus5`Tensorial`Private`a_Function :> 
         If[Length[TensorCalculus5`Tensorial`Private`a] < 3, 
          Last[TensorCalculus5`Tensorial`Private`a], 
          TensorCalculus5`Tensorial`Private`a[[2]]]; 
      If[MatchQ[IndexParsingRules, (Rule | RuleDelayed)[_, _] | 
         {(Rule | RuleDelayed)[_, _]..}], 
       TensorCalculus5`Tensorial`Private`wterms = 
        TensorCalculus5`Tensorial`Private`wterms //. IndexParsingRules]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        (TotalD | AbsoluteD | LieD)[TensorCalculus5`Tensorial`Private`t_, 
          ___] -> TensorCalculus5`Tensorial`Private`t; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms //. 
        HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*
          Tensor[TensorCalculus5`Tensorial`Private`tlab, 
           Table[Void, {Length[Flatten[{
                TensorCalculus5`Tensorial`Private`dvars}]]}], 
           Flatten[{TensorCalculus5`Tensorial`Private`dvars}]]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms //. 
        HoldPattern[CovariantD[TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`updvars_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*
          Tensor[TensorCalculus5`Tensorial`Private`tlab, 
           TensorCalculus5`Tensorial`Private`updvars, 
           TensorCalculus5`Tensorial`Private`dvars]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        HoldPattern[PartialD[_][TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*Times @@ 
           Cases[TensorCalculus5`Tensorial`Private`dvars, 
            Tensor[TensorCalculus5`Tensorial`Private`l_, 
              TensorCalculus5`Tensorial`Private`ups_, 
              TensorCalculus5`Tensorial`Private`downs_] -> 
             Tensor[TensorCalculus5`Tensorial`Private`l, 
              TensorCalculus5`Tensorial`Private`downs, 
              TensorCalculus5`Tensorial`Private`ups], {0, 1}]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        Tensor[TensorCalculus5`Tensorial`Private`t_] :> 
         If[FreeQ[{TensorCalculus5`Tensorial`Private`t}, Plus], 
          TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`scalar]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        (TensorCalculus5`Tensorial`Private`t_Tensor)[___] -> 
         TensorCalculus5`Tensorial`Private`t; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
         Dot | CircleTimes | TensorForms1`TensorialForms`Wedge -> Times /. 
        Tensor[_] -> 1; TensorCalculus5`Tensorial`Private`wterms = 
       If[Head[TensorCalculus5`Tensorial`Private`wterms] === Times, 
        List @@ TensorCalculus5`Tensorial`Private`wterms, 
        {TensorCalculus5`Tensorial`Private`wterms}]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       Flatten[(If[MatchQ[#1, (TensorCalculus5`Tensorial`Private`a_Tensor)^
             (TensorCalculus5`Tensorial`Private`n_Integer)?Positive], 
           Table[First[#1], {Last[#1]}], #1] & ) /@ 
         TensorCalculus5`Tensorial`Private`wterms]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       (If[Head[#1] === Tensor, #1, Unevaluated[Sequence[]]] & ) /@ 
        TensorCalculus5`Tensorial`Private`wterms; 
      If[TensorCalculus5`Tensorial`Private`wterms === {}, 
       Return[{{}, {{}, {}}, {}}]]; 
      TensorCalculus5`Tensorial`Private`slotorder = 
       (#1 /. Tensor[_, TensorCalculus5`Tensorial`Private`ups_, 
            TensorCalculus5`Tensorial`Private`downs_] :> 
           (Flatten[Transpose[{TensorCalculus5`Tensorial`Private`ups, 
               TensorCalculus5`Tensorial`Private`downs}]] /. 
            Void -> Sequence[]) & ) /@ 
        TensorCalculus5`Tensorial`Private`wterms; 
      TensorCalculus5`Tensorial`Private`slotorder = 
       TensorCalculus5`Tensorial`Private`UnsortedUnion[Join] @@ 
        TensorCalculus5`Tensorial`Private`slotorder; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Flatten[TensorCalculus5`Tensorial`Private`wterms /. 
          Tensor[_, TensorCalculus5`Tensorial`Private`ups_, _] -> 
           TensorCalculus5`Tensorial`Private`ups] /. Void -> Sequence[]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       (If[BaseIndexQ[#1], Unevaluated[Sequence[]], #1] & ) /@ 
        TensorCalculus5`Tensorial`Private`uplist; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Flatten[TensorCalculus5`Tensorial`Private`wterms /. 
          Tensor[_, _, TensorCalculus5`Tensorial`Private`downs_] -> 
           TensorCalculus5`Tensorial`Private`downs] /. Void -> Sequence[]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       (If[BaseIndexQ[#1], Unevaluated[Sequence[]], #1] & ) /@ 
        TensorCalculus5`Tensorial`Private`downlist; 
      TensorCalculus5`Tensorial`Private`badlist = 
       Union[Flatten[{Cases[Split[Sort[
             TensorCalculus5`Tensorial`Private`uplist]], 
           TensorCalculus5`Tensorial`Private`t_List /; 
            Length[TensorCalculus5`Tensorial`Private`t] > 1], 
          Cases[Split[Sort[TensorCalculus5`Tensorial`Private`downlist]], 
           TensorCalculus5`Tensorial`Private`t_List /; 
            Length[TensorCalculus5`Tensorial`Private`t] > 1]}]]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Complement[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`badlist]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Complement[TensorCalculus5`Tensorial`Private`downlist, 
        TensorCalculus5`Tensorial`Private`badlist]; 
      TensorCalculus5`Tensorial`Private`dummylist = 
       Intersection[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`downlist]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Complement[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`dummylist]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Complement[TensorCalculus5`Tensorial`Private`downlist, 
        TensorCalculus5`Tensorial`Private`dummylist]; 
      {TensorCalculus5`Tensorial`Private`slotsort[
        TensorCalculus5`Tensorial`Private`dummylist], 
       TensorCalculus5`Tensorial`Private`slotsort /@ 
        {TensorCalculus5`Tensorial`Private`uplist, 
         TensorCalculus5`Tensorial`Private`downlist}, 
       TensorCalculus5`Tensorial`Private`badlist}]
 
SyntaxInformation[ParseTermIndices] = {"ArgumentsPattern" -> {_}}
 
ParseTermIndices /: ParseTermIndices::usage = "ParseTermIndices[term] will \
return the lists of indices:\n{dummies, {freeup, freedown}, bad}\n Dummies \
are indicies that occur up and down exactly once. Free indicies are ones that \
occur only once. All other indicies that appear in the term are bad."
 
IndexParsingRules = {OverBar[$ten_Tensor] -> $ten, 
     xPartialDu[xPartialD[$a_, $m_], $n_] -> $a*Tensor[$XXX, {$n}, {$m}], 
     xPartialD[xPartialDu[$a_, $m_], $n_] -> $a*Tensor[$XXX, {$m}, {$n}], 
     xPartialD[$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xPartialDu[$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     xCovariantD[$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xCovariantDu[$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     xD[$s_][$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xDu[$s_][$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     HoldPattern[Derivative][a__][Tensor[$b_, $c_, $d_]] -> 
      Tensor[$b, $c, $d], ExteriorD[$a_] -> $a}
 
IndexParsingRules /: IndexParsingRules::usage = "IndexParsingRules, which is \
initially an empty List, can be assigned a list of rules that will extract \
tensors from an expression, usually as a single tensor or tensor product, so \
they will be parsed by ParseTermIndices. This allows new types of tensor \
expressions to be added to Tensorial."
 
TensorCalculus5`Tensorial`Private`UnsortedUnion[
     TensorCalculus5`Tensorial`Private`x_] := 
    Module[{TensorCalculus5`Tensorial`Private`f}, 
     TensorCalculus5`Tensorial`Private`f[
        TensorCalculus5`Tensorial`Private`y_] := 
       (TensorCalculus5`Tensorial`Private`f[
          TensorCalculus5`Tensorial`Private`y] = Sequence[]; 
        TensorCalculus5`Tensorial`Private`y); 
      TensorCalculus5`Tensorial`Private`f /@ 
       TensorCalculus5`Tensorial`Private`x]
 
TensorCalculus5`Tensorial`Private`GenNewKATerm[
      TensorCalculus5`Tensorial`Private`i_, 
      TensorCalculus5`Tensorial`Private`j_][
     TensorCalculus5`Tensorial`Private`term_] := 
    Module[{TensorCalculus5`Tensorial`Private`uq = 
       Unique[TensorCalculus5`Tensorial`Private`q], 
      TensorCalculus5`Tensorial`Private`u1, 
      TensorCalculus5`Tensorial`Private`newterm}, 
     TensorCalculus5`Tensorial`Private`u1 = 
       If[IndexFlavorQ[Head[TensorCalculus5`Tensorial`Private`i]], 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`uq], 
        TensorCalculus5`Tensorial`Private`uq]; 
      TensorCalculus5`Tensorial`Private`newterm = 
       IndexChange[{TensorCalculus5`Tensorial`Private`i, 
          TensorCalculus5`Tensorial`Private`u1}][
        TensorCalculus5`Tensorial`Private`term]; 
      TensorCalculus5`Tensorial`Private`newterm /. 
       TensorCalculus5`Tensorial`Private`u1 -> 
        TensorCalculus5`Tensorial`Private`j]
 
IndexChange[TensorCalculus5`Tensorial`Private`pair:
       {_?TensorCalculus5`Tensorial`Private`indextest, 
        _?TensorCalculus5`Tensorial`Private`indextest}, 
      TensorCalculus5`Tensorial`Private`sign:1 | -1:1, 
      TensorCalculus5`Tensorial`Private`symboliconly:True | False:True][
     TensorCalculus5`Tensorial`Private`expr_] := 
    IndexChange[{TensorCalculus5`Tensorial`Private`pair}, 
      TensorCalculus5`Tensorial`Private`sign, 
      TensorCalculus5`Tensorial`Private`symboliconly][
     TensorCalculus5`Tensorial`Private`expr]
 
IndexChange[TensorCalculus5`Tensorial`Private`pairs:
       {{_?TensorCalculus5`Tensorial`Private`indextest, 
          _?TensorCalculus5`Tensorial`Private`indextest}..}, 
      TensorCalculus5`Tensorial`Private`sign:1 | -1:1, 
      TensorCalculus5`Tensorial`Private`symboliconly:True | False:True][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`replacetable, 
      TensorCalculus5`Tensorial`Private`npairs = 
       Length[TensorCalculus5`Tensorial`Private`pairs], 
      TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`completeindexspecs}, 
     TensorCalculus5`Tensorial`Private`completeindexspecs = 
       Join[TensorCalculus5`Tensorial`Private`basicIndexPatterns, 
        NewIndexChangePatterns]; 
      TensorCalculus5`Tensorial`Private`replacetable = 
       Flatten[Table[TensorCalculus5`Tensorial`Private`indexreplacement[
          TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`pairs[[
           TensorCalculus5`Tensorial`Private`i]], 
          TensorCalculus5`Tensorial`Private`symboliconly, 
          TensorCalculus5`Tensorial`Private`completeindexspecs], 
         {TensorCalculus5`Tensorial`Private`i, 1, 
          TensorCalculus5`Tensorial`Private`npairs}], 1]; 
      If[Length[TensorCalculus5`Tensorial`Private`replacetable] == 0, 
       Return[TensorCalculus5`Tensorial`Private`expr]]; 
      TensorCalculus5`Tensorial`Private`replacetable = 
       Transpose[TensorCalculus5`Tensorial`Private`replacetable]; 
      TensorCalculus5`Tensorial`Private`sign*ReplacePart[
        TensorCalculus5`Tensorial`Private`expr, 
        TensorCalculus5`Tensorial`Private`replacetable[[1]], 
        TensorCalculus5`Tensorial`Private`replacetable[[2]], 
        Partition[Range[Length[
           TensorCalculus5`Tensorial`Private`replacetable[[1]]]], 1]]]
 
SyntaxInformation[IndexChange] = {"ArgumentsPattern" -> {_, _., _.}}
 
IndexChange /: IndexChange::usage = "IndexChange[{{r, i}, {s, j}...}, sign:1, \
symboliconly:True][expr] will replace the first index in each pair list by \
the second index in the pair list and multiply the expression by sign, which \
has the default value of 1. Only symbolic indices will be replaced unless the \
optional argument symboliconly is set to False./nIndexChange[{r,i}, \
sign:1][expr] may be used in the case of a single index change. The flavor \
must be in the indices."
 
TensorCalculus5`Tensorial`Private`indextest[
     TensorCalculus5`Tensorial`Private`i_] := 
    Module[{TensorCalculus5`Tensorial`Private`good}, 
     Off[RawIndex::notindex]; TensorCalculus5`Tensorial`Private`good = 
       SymbolicIndexQ[TensorCalculus5`Tensorial`Private`i] || 
        BaseIndexQ[TensorCalculus5`Tensorial`Private`i]; 
      On[RawIndex::notindex]; TensorCalculus5`Tensorial`Private`good]
 
RawIndex[TensorCalculus5`Tensorial`Private`index_] := 
    Switch[TensorCalculus5`Tensorial`Private`index, 
     (TensorCalculus5`Tensorial`Private`f_)?IndexFlavorQ[_], 
     First[TensorCalculus5`Tensorial`Private`index], _Symbol | _Integer, 
     TensorCalculus5`Tensorial`Private`index, _, 
     Message[RawIndex::notindex, TensorCalculus5`Tensorial`Private`index]; 
      TensorCalculus5`Tensorial`Private`index]
 
SyntaxInformation[RawIndex] = {"ArgumentsPattern" -> {_}}
 
RawIndex /: RawIndex::notindex = "`` is not a Symbol, Integer or Flavor."
 
RawIndex /: RawIndex::usage = "RawIndex[index] will extract the raw index \
from a flavored index. If the raw index is not a Symbol or Integer an error \
message is issued."
 
TensorCalculus5`Tensorial`Private`basicIndexPatterns = 
    {{2, {2 | 3, _}, Tensor[_, _List, _List]}, 
     {1, {2}, HoldPattern[PartialD[_, 
         TensorCalculus5`Tensorial`Private`i_] /; 
        Head[TensorCalculus5`Tensorial`Private`i] =!= List]}, 
     {2, {2, _}, HoldPattern[PartialD[_, {__}]]}, 
     {1, {2}, HoldPattern[CovariantD[_, 
         TensorCalculus5`Tensorial`Private`i_] /; 
        Head[TensorCalculus5`Tensorial`Private`i] =!= List]}, 
     {2, {2 | 3, _}, HoldPattern[CovariantD[_, {__}, {__}]]}}
 
NewIndexChangePatterns = 
    {{1, {2}, xPartialD[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xPartialD[_, index_List]}, 
     {1, {2}, xCovariantD[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xCovariantD[_, index_List]}, 
     {1, {2}, xD[_][_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xD[_][_, index_List]}, 
     {1, {2}, xPartialDu[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xPartialDu[_, index_List]}, 
     {1, {2}, xCovariantDu[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xCovariantDu[_, index_List]}, 
     {1, {2}, xDu[_][_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xDu[_][_, index_List]}}
 
NewIndexChangePatterns /: NewIndexChangePatterns::usage = "NewIndexChangePatt\
erns is used to specify novel structures that contain indices. They are \
appended to built-in index patterns. Each pattern is a list of three items \
{dropped levels, dropped level patterns, structure pattern}. See \
documentation."
 
TensorCalculus5`Tensorial`Private`indexreplacement[
     TensorCalculus5`Tensorial`Private`expr_, 
     {TensorCalculus5`Tensorial`Private`oldindex_, 
      TensorCalculus5`Tensorial`Private`newindex_}, 
     TensorCalculus5`Tensorial`Private`symboliconly_, 
     TensorCalculus5`Tensorial`Private`indexspecs_] := 
    Module[{TensorCalculus5`Tensorial`Private`putativepositions, 
      TensorCalculus5`Tensorial`Private`actualpositions, 
      TensorCalculus5`Tensorial`Private`positiontest}, 
     TensorCalculus5`Tensorial`Private`positiontest[
        TensorCalculus5`Tensorial`Private`position_] := 
       Module[{TensorCalculus5`Tensorial`Private`testpattern}, 
        TensorCalculus5`Tensorial`Private`testpattern[
            TensorCalculus5`Tensorial`Private`pos_][
           {(TensorCalculus5`Tensorial`Private`ndrop_Integer)?Positive, 
            TensorCalculus5`Tensorial`Private`droppattern_, 
            TensorCalculus5`Tensorial`Private`pattern_}] := 
          Module[{TensorCalculus5`Tensorial`Private`workposition, 
            TensorCalculus5`Tensorial`Private`droppedpositions}, 
           If[TensorCalculus5`Tensorial`Private`ndrop > 
              Length[TensorCalculus5`Tensorial`Private`pos], Return[False]]; 
            TensorCalculus5`Tensorial`Private`workposition = 
             Drop[TensorCalculus5`Tensorial`Private`position, 
              -TensorCalculus5`Tensorial`Private`ndrop]; 
            TensorCalculus5`Tensorial`Private`droppedpositions = 
             Take[TensorCalculus5`Tensorial`Private`position, 
              -TensorCalculus5`Tensorial`Private`ndrop]; 
            MatchQ[TensorCalculus5`Tensorial`Private`expr[[Sequence @@ 
                TensorCalculus5`Tensorial`Private`workposition]], 
              TensorCalculus5`Tensorial`Private`pattern] && 
             MatchQ[TensorCalculus5`Tensorial`Private`droppedpositions, 
              TensorCalculus5`Tensorial`Private`droppattern]]; 
         Or @@ TensorCalculus5`Tensorial`Private`testpattern[
            TensorCalculus5`Tensorial`Private`position] /@ 
           TensorCalculus5`Tensorial`Private`indexspecs]; 
      TensorCalculus5`Tensorial`Private`putativepositions = 
       Position[TensorCalculus5`Tensorial`Private`expr, 
        TensorCalculus5`Tensorial`Private`oldindex]; 
      If[TensorCalculus5`Tensorial`Private`putativepositions === {} || 
        (TensorCalculus5`Tensorial`Private`symboliconly && 
          !SymbolicIndexQ[TensorCalculus5`Tensorial`Private`oldindex]), 
       Return[{}]]; TensorCalculus5`Tensorial`Private`actualpositions = 
       (If[TensorCalculus5`Tensorial`Private`positiontest[#1], #1, 
          Unevaluated[Sequence[]]] & ) /@ 
        TensorCalculus5`Tensorial`Private`putativepositions; 
      Flatten[Outer[List, {TensorCalculus5`Tensorial`Private`newindex}, 
        TensorCalculus5`Tensorial`Private`actualpositions, 1, 1], 1]]
 
TensorCalculus5`Tensorial`Private`KAUpTest[
     TensorCalculus5`Tensorial`Private`i_, 
     TensorCalculus5`Tensorial`Private`termexpr_] := 
    MemberQ[ParseTermIndices[TensorCalculus5`Tensorial`Private`termexpr][[2,
      1]], TensorCalculus5`Tensorial`Private`i]
 
KroneckerEvaluate[TensorCalculus5`Tensorial`Private`\[Delta]_][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`basetest}, 
     TensorCalculus5`Tensorial`Private`basetest[
        TensorCalculus5`Tensorial`Private`indices_List] := 
       Module[{TensorCalculus5`Tensorial`Private`windices = 
          TensorCalculus5`Tensorial`Private`indices /. Void -> Sequence[]}, 
        And @@ BaseIndexQ /@ TensorCalculus5`Tensorial`Private`windices && 
         SameQ @@ GetIndexFlavor /@ 
           TensorCalculus5`Tensorial`Private`windices]; 
      TensorCalculus5`Tensorial`Private`expr /. 
       TensorCalculus5`Tensorial`Private`ten:
         Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          (TensorCalculus5`Tensorial`Private`up_)?
           TensorCalculus5`Tensorial`Private`basetest, 
          (TensorCalculus5`Tensorial`Private`down_)?
           TensorCalculus5`Tensorial`Private`basetest] :> 
        Catch[Module[{TensorCalculus5`Tensorial`Private`ups = 
            TensorCalculus5`Tensorial`Private`up /. Void -> Sequence[], 
           TensorCalculus5`Tensorial`Private`downs = 
            TensorCalculus5`Tensorial`Private`down /. Void -> Sequence[]}, 
          If[Length[TensorCalculus5`Tensorial`Private`ups] != 
             Length[TensorCalculus5`Tensorial`Private`downs], 
            Throw[TensorCalculus5`Tensorial`Private`ten]]; 
           If[ !Union[TensorCalculus5`Tensorial`Private`ups, 
               TensorCalculus5`Tensorial`Private`downs] === 
              Sort[TensorCalculus5`Tensorial`Private`ups], Throw[0]]; 
           Signature[TensorCalculus5`Tensorial`Private`ups]*
            Signature[TensorCalculus5`Tensorial`Private`downs]]]]
 
SyntaxInformation[KroneckerEvaluate] = {"ArgumentsPattern" -> {_}}
 
KroneckerEvaluate /: KroneckerEvaluate::usage = "KroneckerEvaluate[\[Delta]][\
expr] will evaluate Kronecker symbols in expression whose indices are \
entirely single flavor base indices. This includes generalized Kroneckers"
 
EinsteinSum[][TensorCalculus5`Tensorial`Private`expr_] := 
    EinsteinSum[Automatic][TensorCalculus5`Tensorial`Private`expr]
 
EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
     TensorCalculus5`Tensorial`Private`inexpr_] := 
    Module[{TensorCalculus5`Tensorial`Private`sumindices, 
      TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr]}, 
     Switch[Head[TensorCalculus5`Tensorial`Private`expr], List, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Equal | Unequal | Less | 
       Greater | LessEqual | GreaterEqual, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       Distribute[TensorCalculus5`Tensorial`Private`expr, Plus, Times], Plus, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, _, 
      TensorCalculus5`Tensorial`Private`sumindices = 
        First[ParseTermIndices[TensorCalculus5`Tensorial`Private`expr]]; 
       If[Length[TensorCalculus5`Tensorial`Private`sumindices] == 0, 
        Return[TensorCalculus5`Tensorial`Private`expr]]; 
       SumExpansion[TensorCalculus5`Tensorial`Private`sumindices, 
         TensorCalculus5`Tensorial`Private`baseindices][
        TensorCalculus5`Tensorial`Private`expr]]]
 
SyntaxInformation[EinsteinSum] = {"ArgumentsPattern" -> {_.}}
 
EinsteinSum /: EinsteinSum::usage = "EinsteinSum[base:Automatic][expr] will \
do an Einstein summation individually on all terms on both sides of an \
equation, or all terms in a sum, or on a single term. The range of the sum is \
over the base list which has the default value of of the base indices \
associated with the index flavor."
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices__][
      TensorCalculus5`Tensorial`Private`expr_] /; 
     And @@ (Head[#1] =!= List && #1 =!= Automatic & ) /@ 
       {TensorCalculus5`Tensorial`Private`indices} := 
    SumExpansion[{TensorCalculus5`Tensorial`Private`indices}][
     TensorCalculus5`Tensorial`Private`expr]
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices__, 
       TensorCalculus5`Tensorial`Private`baseindices_List][
      TensorCalculus5`Tensorial`Private`expr_] /; 
     And @@ (Head[#1] =!= List && #1 =!= Automatic & ) /@ 
       {TensorCalculus5`Tensorial`Private`indices} := 
    SumExpansion[{TensorCalculus5`Tensorial`Private`indices}, 
      TensorCalculus5`Tensorial`Private`baseindices][
     TensorCalculus5`Tensorial`Private`expr]
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices_List, 
       TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
      TensorCalculus5`Tensorial`Private`inexpr_] /; 
     MatchQ[TensorCalculus5`Tensorial`Private`baseindices, 
      Automatic | {(_Integer | _Symbol)..} | {{(_Integer | _Symbol)..}..}] := 
    Module[{TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr]}, 
     Switch[Head[TensorCalculus5`Tensorial`Private`expr], List, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Equal | Unequal | Less | 
       Greater | LessEqual | GreaterEqual, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Plus, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, _, 
      TensorCalculus5`Tensorial`Private`SumExpansion2[
        TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices][
       TensorCalculus5`Tensorial`Private`expr]]]
 
SyntaxInformation[SumExpansion] = {"ArgumentsPattern" -> {__}}
 
SumExpansion /: SumExpansion::usage = "SumExpansion[i,j,.., \
base:Automatic][expr] will sum on the indices, i, j,..., in the expression. \
The indices must carry their flavors. The expansions will be done on \
individual terms on both sides of an equation and within arrays. The range of \
the sum is over the base list which has the default value of the base indices \
associated with the index flavor.\nSumExpansion[{i,j,..}, \
base:Automatic][expr] may also be used."
 
TensorCalculus5`Tensorial`Private`SumExpansion2[
       TensorCalculus5`Tensorial`Private`indices_List, 
       TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
      TensorCalculus5`Tensorial`Private`inexpr_] /; 
     MatchQ[TensorCalculus5`Tensorial`Private`baseindices, 
      Automatic | {(_Integer | _Symbol)..} | {{(_Integer | _Symbol)..}..}] := 
    Module[{TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr], 
      TensorCalculus5`Tensorial`Private`idx, 
      TensorCalculus5`Tensorial`Private`inindex, 
      TensorCalculus5`Tensorial`Private`wbaseindices, 
      TensorCalculus5`Tensorial`Private`indexstructure, 
      TensorCalculus5`Tensorial`Private`wstructure, 
      TensorCalculus5`Tensorial`Private`replace, 
      TensorCalculus5`Tensorial`Private`uq, 
      TensorCalculus5`Tensorial`Private`q, 
      TensorCalculus5`Tensorial`Private`uqreplace}, 
     TensorCalculus5`Tensorial`Private`wbaseindices = 
       If[VectorQ[TensorCalculus5`Tensorial`Private`baseindices], 
        {TensorCalculus5`Tensorial`Private`baseindices}, 
        TensorCalculus5`Tensorial`Private`baseindices]; 
      TensorCalculus5`Tensorial`Private`indexstructure = 
       Module[{TensorCalculus5`Tensorial`Private`index, 
         TensorCalculus5`Tensorial`Private`bases, 
         TensorCalculus5`Tensorial`Private`subbases}, 
        Table[TensorCalculus5`Tensorial`Private`index = 
           TensorCalculus5`Tensorial`Private`indices[[
            TensorCalculus5`Tensorial`Private`idx]]; 
          TensorCalculus5`Tensorial`Private`bases = GetBaseIndices[
            TensorCalculus5`Tensorial`Private`index]; 
          TensorCalculus5`Tensorial`Private`subbases = 
           If[Length[TensorCalculus5`Tensorial`Private`wbaseindices] >= 
             TensorCalculus5`Tensorial`Private`idx, 
            TensorCalculus5`Tensorial`Private`wbaseindices[[
             TensorCalculus5`Tensorial`Private`idx]], 
            TensorCalculus5`Tensorial`Private`bases]; 
          If[ !Intersection[TensorCalculus5`Tensorial`Private`subbases, 
              TensorCalculus5`Tensorial`Private`bases] === 
             Sort[TensorCalculus5`Tensorial`Private`subbases], 
           Message[SumArrayExpansion::subset, 
             TensorCalculus5`Tensorial`Private`subbases, 
             TensorCalculus5`Tensorial`Private`bases]; Abort[], 
           TensorCalculus5`Tensorial`Private`bases = 
            TensorCalculus5`Tensorial`Private`subbases]; 
          {TensorCalculus5`Tensorial`Private`index, 
           TensorCalculus5`Tensorial`Private`bases}, 
         {TensorCalculus5`Tensorial`Private`idx, 1, 
          Length[TensorCalculus5`Tensorial`Private`indices]}]]; 
      TensorCalculus5`Tensorial`Private`inindex[
        TensorCalculus5`Tensorial`Private`i_] := 
       Count[{TensorCalculus5`Tensorial`Private`expr}, 
          Tensor[_, TensorCalculus5`Tensorial`Private`up_ /; 
              !FreeQ[TensorCalculus5`Tensorial`Private`up, 
               TensorCalculus5`Tensorial`Private`i, 1], 
            TensorCalculus5`Tensorial`Private`down_] | 
           Tensor[_, TensorCalculus5`Tensorial`Private`up_, 
            TensorCalculus5`Tensorial`Private`down_ /; 
              !FreeQ[TensorCalculus5`Tensorial`Private`down, 
               TensorCalculus5`Tensorial`Private`i, 1]] | 
           HoldPattern[PartialD[_, TensorCalculus5`Tensorial`Private`i]] | 
           HoldPattern[PartialD[_, {___, TensorCalculus5`Tensorial`Private`i, 
              ___}]] | HoldPattern[CovariantD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            CovariantD[_, {___, TensorCalculus5`Tensorial`Private`i, ___}]] | 
           HoldPattern[TensorCalculus5`Tensorial`Private`xPartialD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xPartialDu[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xCovariantD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xCovariantDu[_, 
             TensorCalculus5`Tensorial`Private`i]], Infinity, 
          Heads -> True] > 0 &&  !BaseIndexQ[
          TensorCalculus5`Tensorial`Private`i]; 
      TensorCalculus5`Tensorial`Private`replace[
        TensorCalculus5`Tensorial`Private`i_, 
        TensorCalculus5`Tensorial`Private`newindex_] := 
       Switch[Head[TensorCalculus5`Tensorial`Private`i], _?IndexFlavorQ, 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`newindex], _, 
        TensorCalculus5`Tensorial`Private`newindex]; 
      TensorCalculus5`Tensorial`Private`uqreplace[
        TensorCalculus5`Tensorial`Private`i_] := 
       Switch[Head[TensorCalculus5`Tensorial`Private`i], _?IndexFlavorQ, 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`q], _, 
        TensorCalculus5`Tensorial`Private`q]; 
      TensorCalculus5`Tensorial`Private`wstructure = 
       Select[TensorCalculus5`Tensorial`Private`indexstructure, 
        TensorCalculus5`Tensorial`Private`inindex[First[#1]] & ]; 
      Fold[Plus @@ Table[IndexChange[{First[#2], 
              TensorCalculus5`Tensorial`Private`uq = 
               TensorCalculus5`Tensorial`Private`uqreplace[First[#2]]}][
            #1] /. TensorCalculus5`Tensorial`Private`uq -> 
            TensorCalculus5`Tensorial`Private`replace[First[#2], 
             Last[#2][[TensorCalculus5`Tensorial`Private`idx]]], 
          {TensorCalculus5`Tensorial`Private`idx, 1, Length[Last[#2]]}] & , 
       TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`wstructure]]
 
SumArrayExpansion /: SumArrayExpansion::subset = 
     "`` is not a subset of the base indices ``"
 
curl[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`formfield_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`formfield]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
curl /: curl::usage = "curl[labs, hodgerules, flavor:Identity][formfield] \
will calculate the curl of a 3D form field. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. \
Hodgerules is the list of Hodge star transformation rules in the flavor. They \
may be generated by HodgeStarRules. The optional argument flavor gives the \
index flavor for the expansion of the exterior derivative."
 
div[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`formfield_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`formfield]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
div /: div::usage = "div[labs, hodgerules, flavor:Identity][formfield] will \
calculate the divergence of a 3D form field. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. \
Hodgerules is the list of Hodge star transformation rules for the flavor. The \
optional argument flavor gives the index flavor for the expansion of the \
exterior derivative."
 
cross[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`form1_, 
     TensorForms1V6`TensorialForms`Private`form2_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work}, 
     TensorForms1V6`TensorialForms`Private`work = 
       SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
           1]]][EinsteinSum[][
         TensorForms1V6`TensorialForms`Private`form1 \[Wedge] 
          TensorForms1V6`TensorialForms`Private`form2]]; 
      Simplify[TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules]]
 
cross /: cross::usage = "cross[hodgerules, flavor:Identity][form1, form2] \
will calculate the cross product, form1\[Cross]form2, and return the result \
as a 1-form. Hodgerules are the Hodge star transformation rules for 2-forms. \
The optional argument flavor gives the index flavor for the expansion of the \
exterior derivative. "
 
dot[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`form1_, 
     TensorForms1V6`TensorialForms`Private`form2_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`star1}, 
     TensorForms1V6`TensorialForms`Private`star1 = 
       EinsteinSum[][TensorForms1V6`TensorialForms`Private`form1] /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
           1]]][EinsteinSum[][
         TensorForms1V6`TensorialForms`Private`star1 \[Wedge] 
          TensorForms1V6`TensorialForms`Private`form2]]; 
      Simplify[TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules]]
 
dot /: dot::usage = "dot[hodgerules, flavor:Identity][form1, form2] will \
calculate the dot product, form1.form2, and return the result. Hodgerules are \
the Hodge star transformation rules for the flavor. The optional argument \
flavor gives the index flavor for the expansion of the exterior derivative. "
 
laplacian[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`function_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`c, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]], 
      TensorForms1V6`TensorialForms`Private`sortvars}, 
     TensorForms1V6`TensorialForms`Private`sortvars = 
       (ExteriorD[Tensor[TensorForms1V6`TensorialForms`Private`x, 
           {TensorForms1V6`TensorialForms`Private`flavor[#1]}, 
           {Void}]] & ) /@ GetBaseIndices[
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`a]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`function]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[TensorForms1V6`TensorialForms`Private`sortvars][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`c]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[TensorForms1V6`TensorialForms`Private`sortvars][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
laplacian /: laplacian::usage = "laplacian[labs, hodgerules, \
flavor:Identity][function] will calculate the 3D laplacian of scalar \
function. labs are the standard list of symbols used in derivative routines, \
{x, \[Delta], g, \[CapitalGamma]}. Hodgerules is the list of Hodge star \
transformation rules for the flavor. The optional argument flavor gives the \
index flavor for the expansion of the exterior derivative."
 
Attributes[TensorCalculus5`Tensorial`Private`form$] = {Temporary}
 
Attributes[Overscript] = {NHoldRest}
 
Attributes[Superscript] = {NHoldRest, ReadProtected}
 
T[A_, uds_String][index0__] := Module[{tmp, ud = Characters[uds], 
      index = {index0}}, If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
T[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[T, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
T[A_, up_List, down_List] := Module[{tmp, u = up /. Null -> Void, 
      d = down /. Null -> Void}, u = u /. {} -> {Void}; 
      d = d /. {} -> {Void}; 
      If[ !Inner[(#1 =!= Void && #2 =!= Void) || (#1 === Void && 
             #2 === Void) & , u, d, Or] && Length[d] == Length[u], 
       Tensor[A, u, d], Style[Tensor[A, u, d], FontColor -> Red]]]
 
T[A_, uds_String, index_List] := Module[{tmp, ud = Characters[uds]}, 
     If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
A[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[A, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
Attributes[Underscript] = {NHoldRest}
 
c[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[c, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
MakeBoxes[space[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0, 0]], FormatType]
 
Format[space[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0, 0]]
 
MakeBoxes[timespace[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0, 1]], FormatType]
 
Format[timespace[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0, 1]]
 
MakeBoxes[feyn[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0.5, 0]], FormatType]
 
Format[feyn[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0.5, 0]]
 
MakeBoxes[groupR[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 0, 1]], FormatType]
 
Format[groupR[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 0, 1]]
 
MakeBoxes[gaugeG[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 0, 1]], FormatType]
 
Format[gaugeG[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 0, 1]]
 
BaseIndices = {0, 1, 2, 3}
 
BaseIndices /: BaseIndices::usage = "BaseIndices is the current default list \
of symbols or integers being used to index components. It is used with \
unflavored indices and any flavors that have not been declared with \
DeclareBaseIndices."
 
TensorCalculus5`Tensorial`Private`baseflavors = {{field, {1, 2, 3, 4}}, 
     {feyn, {1, 2, 3, 4, 5}}, {space, {1, 2, 3}}, {timespace, {0, 1}}, 
     {groupR, {1, 2, 3}}, {gaugeG, {1, 2, 3}}}
 
q[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[q, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
p[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[p, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
m[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[m, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
x[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[x, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
\[Gamma][(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[\[Gamma], Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
l[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[l, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
tmp1 = OverBar[Subscript[u, q]][Subscript[p, q]] . 
      Subscript[v, q][Subscript[p, OverBar[q]]]*
     (Subscript[m, Derivative[1][q]] - Tensor[l, {Void}, {\[Mu]$12169}] + 
      Tensor[Subscript[p, q], {Void}, {\[Mu]$12169}] - 
      Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Mu]$12169}] + 
      Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, 
        {\[Mu]$12169}])*(Subscript[m, OverBar[Derivative[1][q]]] + 
      Tensor[l, {Void}, {\[Mu]$12175}] + Subscript[x, 2]*
       Tensor[Subscript[p, q], {Void}, {\[Mu]$12175}] + 
      Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12175}] - 
      Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12175}])
 
g[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[g, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
\[Eta] /: Tensor[\[Eta], {0, 0}, {Void, Void}] = 1
 
\[Eta] /: Tensor[\[Eta], {0, 1}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {0, 2}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {0, 3}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {1, 0}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {1, 1}, {Void, Void}] = -1
 
\[Eta] /: Tensor[\[Eta], {1, 2}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {1, 3}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {2, 0}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {2, 1}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {2, 2}, {Void, Void}] = -1
 
\[Eta] /: Tensor[\[Eta], {2, 3}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {3, 0}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {3, 1}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {3, 2}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {3, 3}, {Void, Void}] = -1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {0, 0}] = 1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {0, 1}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {0, 2}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {0, 3}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {1, 0}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {1, 1}] = -1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {1, 2}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {1, 3}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {2, 0}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {2, 1}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {2, 2}] = -1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {2, 3}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {3, 0}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {3, 1}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {3, 2}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {3, 3}] = -1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {timespace[0], timespace[0]}] = 1
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {timespace[0], timespace[1]}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {timespace[1], timespace[0]}] = 0
 
\[Eta] /: Tensor[\[Eta], {Void, Void}, {timespace[1], timespace[1]}] = -1
 
\[Eta] /: Tensor[\[Eta], {timespace[0], timespace[0]}, {Void, Void}] = 1
 
\[Eta] /: Tensor[\[Eta], {timespace[0], timespace[1]}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {timespace[1], timespace[0]}, {Void, Void}] = 0
 
\[Eta] /: Tensor[\[Eta], {timespace[1], timespace[1]}, {Void, Void}] = -1
 
\[Eta][(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[\[Eta], Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
dotOps := Dot | xDot
 
GammaLeft[gamma_Tensor][exp_] := Module[{tmp = exp, tmp1, gammaT, isgamma, 
      DEBUG = 0, mname = "GammaLeft"}, IfDEBUG[mname, DEBUG > 0, 
       {tmp, gamma}, "{tmp,gamma}"]; gammaT = List @@ gamma; 
      isgamma = Count[{gamma}, Tensor[\[Gamma], {_}, {_}]] == 1; 
      While[tmp1 =!= tmp && isgamma, tmp1 = tmp; 
        tmp = tmp /. (a___) . (b_) . gamma . (c___) :> 
           a . CommuteG[b, gamma] . c /; Count[{b}, Tensor[\[Gamma], {_}, {
                _}]] == 1; tmp = Expand[Expand[tmp] //. DotExpand //. 
           simpleDot]; ]; tmp]
 
GammaLeft[exp_, gamma_Tensor] := Module[{tmp = exp, tmp1, gammaT, isgamma, 
      DEBUG = 0, mname = "GammaLeft"}, IfDEBUG[mname, DEBUG > 0, 
       {tmp, gamma}, "{tmp,gamma}"]; gammaT = List @@ gamma; 
      isgamma = Count[{gamma}, Tensor[\[Gamma], {_}, {_}]] == 1; 
      While[tmp1 =!= tmp && isgamma, tmp1 = tmp; 
        tmp = tmp /. (a___) . (b_) . gamma . (c___) :> 
           a . CommuteG[b, gamma] . c /; Count[{b}, Tensor[\[Gamma], {_}, {
                _}]] == 1; tmp = Expand[Expand[tmp] //. DotExpand //. 
           simpleDot]; ]; tmp]
 
IfDEBUG[name_, DEBUG_, list_, comment_] := 
    Module[{}, If[DEBUG == True, Print[name, ":", comment, ":", list]; ]; ]
 
CommuteG[g1_Tensor, g2_Tensor] := Module[{tmp, g1T, g2T, iup, idown, is5, 
      twog, gtmp = 1, out, DEBUG = 0, mname = "CommuteG"}, 
     IfDEBUG[mname, DEBUG > 0, {g1, g2}, "{g1,g2}"]; g1T = List @@ g1; 
      g2T = List @@ g2; iup = Flatten[{g1T[[2]], g2T[[2]]}]; 
      idown = Flatten[{g1T[[3]], g2T[[3]]}]; is5 =  !FreeQ[{iup, idown}, 5]; 
      IfDEBUG[mname, DEBUG > 0, {iup, idown}, "{iup,idown}"]; 
      twog = Count[{g1}, Tensor[\[Gamma], {_}, {_}]] + 
         Count[{g2}, Tensor[\[Gamma], {_}, {_}]] == 2; 
      Which[ !twog, out = g1 . g2, twog && g1 === g2, 
       out = If[is5, 1, Tensor[\[Eta], iup, idown]], twog, 
       gtmp = If[is5, 0, Tensor[\[Eta], iup, idown]]; 
        out = -g2 . g1 + 2*gtmp]]
 
DotExpand = {(op:Dot | xDot)[a___, (b_) + (c_), d___] :> 
      op[a, b, d] + op[a, c, d]}
 
simpleDot := {(op:dotOps)[a___, (n_)*(d_), c___] :> 
      n*op[a, d, c] /; NumericQ[n], (op:dotOps)[a___, b_, c___] :> 
      b*op[a, c] /; NumericQ[b], (op:dotOps)[a___, -(b_), c___] -> 
      -op[a, b, c], Conjugate[(op:dotOps)[a__]] :> 
      op @@ Thread[Conjugate[{a}]]}
 
n[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[n, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
GammaRight[gamma_Tensor][exp_] := Module[{tmp = exp, tmp1, gammaT, isgamma, 
      DEBUG = 0, mname = "GammaRight"}, 
     IfDEBUG[mname, DEBUG > 0, {tmp, gamma}, "{tmp,gamma}"]; 
      gammaT = List @@ gamma; isgamma = 
       Count[{gamma}, Tensor[\[Gamma], {_}, {_}]] == 1; 
      While[tmp1 =!= tmp && isgamma, tmp1 = tmp; 
        tmp = tmp /. (a___) . gamma . (b_) . (c___) :> 
           a . CommuteG[gamma, b] . c /; Count[{b}, Tensor[\[Gamma], {_}, {
                _}]] == 1; tmp = Expand[Expand[tmp] //. DotExpand //. 
           simpleDot]; ]; tmp]
 
GammaRight[exp_, gamma_Tensor] := Module[{tmp = exp, tmp1, gammaT, isgamma, 
      out, DEBUG = 0, mname = "GammaRight"}, 
     IfDEBUG[mname, DEBUG > 0, {tmp, gamma}, "{tmp,gamma}"]; 
      gammaT = List @@ gamma; isgamma = 
       Count[{gamma}, Tensor[\[Gamma], {_}, {_}]] == 1; 
      While[tmp1 =!= tmp && isgamma, tmp1 = tmp; 
        tmp = tmp /. (a___) . gamma . (b_) . (c___) :> 
           a . CommuteG[gamma, b] . c /; Count[{b}, Tensor[\[Gamma], {_}, {
                _}]] == 1; tmp = Expand[Expand[tmp] //. DotExpand //. 
           simpleDot]; ]; tmp]
 
GammaRight[exp_, gamma_] := Module[{tmp = exp, tmp1, out, gpos, Ngpos, igpos, 
      indu = Null, indd = Null, pair, DEBUG = 0}, 
     If[DEBUG > 0, Print["GammaRight: ", tmp, " : ", gamma]]; 
      While[tmp1 =!= tmp, tmp1 = tmp; indu = gamma /. \[Gamma][u[a_]] -> a; 
        indd = gamma /. \[Gamma][d[a_]] -> a; 
        tmp = tmp /. (a___) . gamma . (b_) . (c___) :> 
           a . CommuteG[gamma, b] . c /; MemberQ[{b}, \[Gamma][u[_]] || 
              MemberQ[{b}, \[Gamma][d[_]]]]; 
        tmp = Expand[Expand[tmp] /. simpleDot]; If[DEBUG > 0, 
         Print["GammaRight>  ", tmp]]; tmp = tmp /. Dot -> xDot; 
        tmp = tmp //. xDot[a__] :> DotKeep1[{\[Gamma][d[_]], \[Gamma][u[_]]}, 
            {a}]; tmp = Expand[tmp] /. simpleDot; 
        tmp = tmp //. {(a___) . \[Gamma][d[b_]] . \[Gamma][u[b_]] . (c___) :> 
            dim[x]*a . c, (a___) . \[Gamma][u[b_]] . \[Gamma][d[b_]] . 
             (c___) :> dim[x]*a . c}; If[DEBUG > 0, Print["GammaRight>> ", 
          tmp]]; ]; tmp]
 
DotKeep1[clist_, seq_] := Module[{tmp = seq, i, j, member, dot = {}, 
      times = {1}, test, DEBUG = 0}, tmp = tmp /. Times -> Dot /. simpleDot; 
      If[DEBUG > 0, Print["DotKeep< ", clist, " : ", tmp, " ", Length[tmp]]]; 
      For[i = 1, i <= Length[tmp], i++, test = tmp[[i]]; 
        If[DEBUG > 1, Print["DotKeep: ", test, " : ", clist]]; 
        member = False; If[MemberQ[clist, test], member = True]; 
        For[j = 1, j <= Length[clist], j++, If[ !FreeQ[test, clist[[j]]], 
          member = True]]; If[member, AppendTo[dot, test], 
         AppendTo[times, test]]; If[DEBUG > 1, Print["DotKeep: ", dot, 
          times]]; ]; tmp = 1; If[Length[times] > 0, tmp = Times @@ times]; 
      If[Length[dot] > 0, tmp = tmp*Dot @@ dot]; 
      If[DEBUG > 0, Print["DotKeep>> ", tmp]]; tmp]
 
j[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[j, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
test = (Subscript[x, 3]*(I*\[Epsilon] - Subscript[m, g]^2 + 
        Tensor[g, {Void, Void}, {\[Mu]k, \[Nu]k}]*Tensor[Subscript[k, g], 
          {\[Mu]k}, {Void}]*Tensor[Subscript[k, g], {\[Nu]k}, {Void}]) + 
      Subscript[x, 2]*(I*\[Epsilon] + Tensor[g, {Void, Void}, 
          {\[Mu][Subscript[k, g], Subscript[k, g]], \[Nu][Subscript[k, g], 
            Subscript[k, g]]}]*Tensor[Subscript[k, g], 
          {\[Mu][Subscript[k, g], Subscript[k, g]]}, {Void}]*
         Tensor[Subscript[k, g], {\[Nu][Subscript[k, g], Subscript[k, g]]}, 
          {Void}] - 2*Tensor[g, {Void, Void}, {\[Mu][Subscript[k, g], 
            Subscript[p, q]], \[Nu][Subscript[k, g], Subscript[p, q]]}]*
         Tensor[Subscript[k, g], {\[Mu][Subscript[k, g], Subscript[p, q]]}, 
          {Void}]*Tensor[Subscript[p, q], {\[Nu][Subscript[k, g], 
            Subscript[p, q]]}, {Void}]) + Subscript[x, 1]*
       (I*\[Epsilon] + Tensor[g, {Void, Void}, {\[Mu][Subscript[k, g], 
            Subscript[k, g]], \[Nu][Subscript[k, g], Subscript[k, g]]}]*
         Tensor[Subscript[k, g], {\[Mu][Subscript[k, g], Subscript[k, g]]}, 
          {Void}]*Tensor[Subscript[k, g], {\[Nu][Subscript[k, g], 
            Subscript[k, g]]}, {Void}] + 2*Tensor[g, {Void, Void}, 
          {\[Mu][Subscript[k, g], Subscript[p, OverBar[q]]], 
           \[Nu][Subscript[k, g], Subscript[p, OverBar[q]]]}]*
         Tensor[Subscript[k, g], {\[Mu][Subscript[k, g], Subscript[p, 
             OverBar[q]]]}, {Void}]*Tensor[Subscript[p, OverBar[q]], 
          {\[Nu][Subscript[k, g], Subscript[p, OverBar[q]]]}, {Void}]))^3
 
\[Epsilon][(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[\[Epsilon], Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
subm = {HoldPattern[T[p1_, "d"][i1_]*T[p2_, "u"][i1_]] :> 
      T[p1, "d"][orderArg[\[Mu][p1, p2]]]*T[p2, "u"][
        orderArg[\[Mu][p1, p2]]], 
     pp:Tensor[p1_, {i1_}, {Void}]*Tensor[p2_, {Void}, {i1_}] :> 
      Swap[{p1, p2}][pp] /;  !OrderedQ[{p1, p2}], 
     pp:Tensor[Subscript[p, i_], {Void}, {i1_}]*Tensor[Subscript[p, i_], 
         {i1_}, {Void}] -> Subscript[m, i]^2, 
     Subscript[m, q | Derivative[1][q] | OverBar[q] | 
        OverBar[Derivative[1][q]]] -> Subscript[m, q]}
 
p1[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[p1, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
p2[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[p2, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
orderArg[term_] := Head[term] @@ Sort[List @@ term]
 
Swap[pair_List][exp_] := Module[{tmp = exp, XXXX}, 
     tmp = tmp //. pair[[1]] -> XXXX //. pair[[2]] -> pair[[1]] //. 
        XXXX -> pair[[2]]; tmp]
 
UpDownIndexSwap[index_List][exp_] := Module[{tmp = exp}, 
     tmp = Fold[UpDownIndexSwap[#2][#1] & , exp, index]]
 
UpDownIndexSwap[index_][exp_] := Module[{tmp = exp, XXXX, YYYY}, 
     tmp = LowerIndexTU[index, XXXX][tmp]; tmp = RaiseIndexTU[index, YYYY][
        tmp]; tmp = tmp /. XXXX -> index /. YYYY -> index]
 
UpDownIndexSwap[upos_Integer, dpos_Integer][tensor_Tensor] := 
    Module[{tmp = tensor, $d, $u, xtmp}, xtmp = tmp = List @@ tmp; 
      $u = tmp[[2]]; $d = tmp[[3]]; tmp[[2]] = ReplacePart[$u, 
        {dpos -> $d[[dpos]], upos -> $d[[upos]]}]; 
      tmp[[3]] = ReplacePart[$d, {upos -> $u[[upos]], dpos -> $u[[dpos]]}]; 
      Tensor @@ tmp]
 
LowerIndexTU[from_, to_][exp_] := Module[{upD, dnD, opD, subd, ipos, ip, 
      xexp, xfrom, xto}, upD = {xPartialDu, xCovariantDu, xDu[$a_]}; 
      dnD = {xPartialD, xCovariantD, xD[$a_]}; opD = Alternatives @@ upD; 
      subd = Thread[upD -> RemovePatterns[dnD]]; {xexp, xfrom, xto} = 
       (#1 //. Pattern -> $Pattern & ) /@ {exp, from, to}; 
      xPrint[{xexp, xfrom, xto}]; xexp = xexp //. Tensor[A_, u_, d_] :> 
         Tensor[A, SwapListsN[u, d, ip][[1]], ReplacePart[d, ip -> xto]] /; 
          Length[u] > 0 && (ipos = Position[u, xfrom, 1]) =!= {} && 
           (ip = ipos[[1,1]]) > 0; xexp = xexp //. (OP:opD)[a_, b_] :> 
         (OP /. subd)[a, xto] /; (b //. Pattern -> $Pattern) == xfrom; 
      xexp //. $Pattern -> Pattern]
 
RemovePatterns[exp_] := Module[{tmp = exp}, 
     tmp = tmp //. Pattern -> xPattern //. xPattern[a_, _ | __] :> a /. 
       xPattern -> Pattern]
 
SwapListsN[a1_List, b1_List, i_Integer] := Module[{$h, a = a1, b = b1}, 
     $h = a[[i]]; a[[i]] = b[[i]]; b[[i]] = $h; {a, b}]
 
RaiseIndexTU[from_, to_][exp_] := Module[{upD, dnD, opD, subd, ipos, ip, 
      xexp, xfrom, xto}, upD = {xPartialDu, xCovariantDu, xDu[$a_]}; 
      dnD = {xPartialD, xCovariantD, xD[$a_]}; opD = Alternatives @@ dnD; 
      subd = Thread[dnD -> RemovePatterns[upD]]; {xexp, xfrom, xto} = 
       (#1 //. Pattern -> $Pattern & ) /@ {exp, from, to}; 
      xPrint[{xexp, xfrom, xto}]; xexp = xexp //. Tensor[A_, u_, d_] :> 
         Tensor[A, ReplacePart[u, ip -> xto], SwapListsN[u, d, ip][[2]]] /; 
          Length[d] > 0 && (ipos = Position[d, xfrom, 1]) =!= {} && 
           (ip = ipos[[1,1]]) > 0; xexp = xexp //. (OP:opD)[a_, b_] :> 
         (OP /. subd)[a, xto] /; (b //. Pattern -> $Pattern) == xfrom; 
      xexp //. $Pattern -> Pattern]
 
simpleDot3[scalars_List][exp_] := Module[{tmp = exp, tmp1}, 
     While[tmp =!= tmp1, tmp1 = tmp; tmp = DotExpandAll[tmp]; 
        tmp = tmp //. simpleDot2[scalars]]; tmp]
 
DotExpandAll[exp_] := Module[{tmp = exp}, tmp = ExpandAll[tmp]; 
      tmp = tmp //. DotExpand]
 
simpleDot2[scalars_List] := Flatten[{DotExpand, simpleDot1[scalars]}]
 
simpleDot1[scalars_List] := Flatten[{(op:dotOps)[a___, (d___)*(c_), b___] :> 
       c*op[a, d, b] /; ListMemberQ[c, scalars], 
      (op:dotOps)[a___, (d___)*(c_)^(n_), b___] :> c^n*op[a, d, b] /; 
        ListMemberQ[c, scalars], (op:dotOps)[a___, c_, b___] :> 
       c*op[a, b] /; ListMemberQ[c, scalars] && (Length[{a}] > 0 || 
          Length[{b}] > 0), (op:dotOps)[a___, (c_)^(n_), b___] :> 
       c^n*op[a, b] /; ListMemberQ[c, scalars] && (Length[a] > 0 || 
          Length[b] > 0), simpleTranspose[scalars], simpleDot}]
 
ListMemberQ[variable_, patterns_List] := Module[{tmp, DEBUG = 0}, 
     tmp = (MemberQ[{variable}, #1] & ) /@ Flatten[patterns]; 
      IfDEBUG["ListMemberQ", DEBUG > 0, {tmp, patterns}, "tmp"]; 
      MemberQ[tmp, True]]
 
simpleTranspose[scalar_List] := {Transpose[(a_)*(b___)] :> 
      a*Transpose[b] /; ListMemberQ[a, scalar] || NumericQ[a], 
     Transpose[(a_)^(n_)*(b_)] :> a^n*Transpose[b] /; 
       ListMemberQ[a, scalar] || NumericQ[a], Transpose[a_] :> 
      a /; ListMemberQ[a, scalar] || NumericQ[a], Transpose[(c_)^(x_)] :> 
      c^x /; ListMemberQ[c, scalar], ConjugateTranspose[(a_)^(b_)] :> 
      Conjugate[a^b] /; ListMemberQ[a, scalar], ConjugateTranspose[a_] :> 
      Conjugate[a] /; ListMemberQ[a, scalar], Transpose[xPartialD[c_, x_]] :> 
      xPartialD[c, x] /; ListMemberQ[c, scalar], 
     Transpose[xPartialDu[c_, x_]] :> xPartialDu[c, x] /; 
       ListMemberQ[c, scalar], ConjugateTranspose[xPartialD[c_, x_]] :> 
      Conjugate[xPartialD[c, x]] /; ListMemberQ[c, scalar], 
     ConjugateTranspose[xPartialDu[c_, x_]] :> Conjugate[xPartialDu[c, x]] /; 
       ListMemberQ[c, scalar]}
 
scalar = {e, g, Tensor[g, {_, _}, {Void, Void}]}
 
e[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[e, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
MetricContractAll[g_][exp_] := Module[{}, 
     tmp = Expand[exp] /. term:HoldPattern[Times[a__]] :> 
        MetricContract[g][term]]
 
MetricContractAll[g_, dimension_][exp_] := 
    Module[{}, tmp = Expand[exp] /. term:HoldPattern[Times[a__]] :> 
        MetricContract[g, dimension][term]]
 
MetricContract[g_, dimension_][exp_] := Module[{tmp = Expand[exp]}, 
     tmp = MetricContract[g][tmp]; 
      tmp = tmp //. {T[g, "ud", {a_, a_}] -> dimension, 
         T[g, "du", {a_, a_}] -> dimension}]
 
MetricContract[g_][exp_Times] := Module[{gterm, $u0, $d, $u, $d0, $c, 
      tmp = exp, tmp1, tmp2, gpos, gpos1, ipos, pos, gvar, Igvar, Itmp2, 
      gpat = g[uu[a_, b_]] | g[dd[a_, b_]] | g[ud[a_, b_]] | g[du[a_, b_]]}, 
     gpos1 = gpos = ExtractPositionPattern[tmp, gpat]; 
      While[tmp =!= tmp1, tmp1 = tmp; gpos1 = gpos = ExtractPositionPattern[
           tmp, gpat]; For[ipos = 1, ipos <= Length[gpos] && tmp == tmp1, 
         ipos++, pos = gpos1[[ipos,1]]; gvar = gpos1[[ipos,2]]; 
          tmp2 = ReplacePart[tmp, {pos} -> 1]; Igvar = ParseTermIndicesTU[
            gvar]; Itmp2 = ParseTermIndicesTU[tmp2]; xPrint["tmp2:", 
           {tmp2, Itmp2}]; tmp = Which[($u0 = Intersection[Itmp2[[2,1]], 
                $d = Igvar[[2,2]]]) =!= {} && Length[$d] == 2, 
            LowerIndexTU[$u0[[1]], $c = Complement[$d, {$u0[[1]]}][[1]]][
             tmp2], ($d0 = Intersection[Itmp2[[2,2]], $u = Igvar[[2,1]]]) =!= 
              {} && Length[$u] == 2, RaiseIndexTU[$d0[[1]], 
              $c = Complement[$u, {$d0[[1]]}][[1]]][tmp2], 
            ($u0 = Intersection[Itmp2[[2,1]], $d = Igvar[[2,2]]]) =!= {} && 
             Length[$d] == 1, ReplaceIndexTU[$u0[[1]], $c = Igvar[[2,1]][[
                1]]][tmp2], ($d0 = Intersection[Itmp2[[2,2]], 
                $u = Igvar[[2,1]]]) =!= {} && Length[$u] == 1, 
            ReplaceIndexTU[$d0[[1]], $c = Igvar[[2,2]][[1]]][tmp2], True, 
            tmp]; xPrint[Imply, gvar[$u0[[1]], $c] -> {tmp}]; ]; ]; tmp]
 
tmp2 = Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
      Subscript[m, OverBar[Derivative[1][q]]]*Subscript[m, 
       Derivative[1][q]] + Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
       Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
      Subscript[m, OverBar[Derivative[1][q]]]*Tensor[Subscript[p, q], {Void}, 
       {\[Mu]$12169}] - Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
       Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
      Subscript[m, OverBar[Derivative[1][q]]]*Subscript[x, 2]*
      Tensor[Subscript[p, q], {Void}, {\[Mu]$12169}] + 
     Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
       Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
      Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Mu]$12175}] + 
     Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {\[Mu]$12169}, 
        {Void}] . Tensor[\[Gamma], {Void}, {\[Mu]e}] . 
       Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, 
       OverBar[Derivative[1][q]]]*Subscript[x, 1]*
      Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12169}] + 
     Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
       Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
      Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12175}] - 
     Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
        {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
       Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
      Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, 
       {\[Mu]$12175}] - (Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
        Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
        Tensor[\[Gamma], {Void}, {\[Nu]g}]*
       (Tensor[g, {Void, Void}, {\[Mu]$12169, \[Mu]$12175}]*
         Tensor[l, {Void}, {\[Mu]l}]*Tensor[l, {\[Mu]l}, {Void}] + 
        4*((-1 + Subscript[x, 2])*Tensor[Subscript[p, q], {Void}, 
            {\[Mu]$12169}] - Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], 
            {Void}, {\[Mu]$12169}])*(Subscript[x, 2]*Tensor[Subscript[p, q], 
            {Void}, {\[Mu]$12175}] - (-1 + Subscript[x, 1])*
           Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12175}])))/4
 
pos = {{2, 5} -> OverBar[Subscript[v, e]][Subscript[p, SuperPlus[e]]] . 
       Tensor[\[Gamma], {\[Mu]e}, {Void}] . Subscript[u, e][
        Subscript[p, SuperMinus[e]]], {2, 6, 2, 4, 2, 1, 2} -> 
      (-Subscript[k, g] + Subscript[p, q]) . (-Subscript[k, g] + 
        Subscript[p, q]), {2, 6, 2, 6, 2, 1, 2} -> 
      (Subscript[k, g] + Subscript[p, OverBar[q]]) . (Subscript[k, g] + 
        Subscript[p, OverBar[q]]), {2, 6, 2} -> 
      1 . OverBar[Subscript[u, q]][Subscript[p, q]] . Tensor[\[Gamma], 
         {\[Nu]g}, {Void}] . (-Slash[Subscript[k, g]] + 
         Slash[Subscript[p, q]] + Subscript[m, Derivative[1][q]]) . 
        Tensor[\[Gamma], {Void}, {\[Mu]e}] . (Slash[Subscript[k, g]] + 
         Slash[Subscript[p, OverBar[q]]] + Subscript[m, 
          OverBar[Derivative[1][q]]]) . Tensor[\[Gamma], {Void}, {\[Nu]g}] . 
        Subscript[v, q][Subscript[p, OverBar[q]]]*
       IntegralOp[{{Subscript[x, 1], 0, 1}, {Subscript[x, 2], 0, 
          1 - Subscript[x, 1]}}, 
        2/((Tensor[Subscript[k, g], {ik}, {Void}] + (-2*Subscript[x, 2]*
                Tensor[Subscript[p, q], {ik}, {Void}] + 2*Subscript[x, 1]*
                Tensor[Subscript[p, OverBar[q]], {ik}, {Void}])/2)*
            (Tensor[Subscript[k, g], {Void}, {ik}] + (-2*Subscript[x, 2]*
                Tensor[Subscript[p, q], {Void}, {ik}] + 2*Subscript[x, 1]*
                Tensor[Subscript[p, OverBar[q]], {Void}, {ik}])/2) + 
           (4*(I*\[Epsilon] - Subscript[m, g]^2 + Subscript[m, g]^2*
                Subscript[x, 1] + Subscript[m, g]^2*Subscript[x, 2]) - 
             (-2*Subscript[x, 2]*Tensor[Subscript[p, q], {ik}, {Void}] + 2*
                Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {ik}, 
                 {Void}])*(-2*Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, 
                 {ik}] + 2*Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], 
                 {Void}, {ik}]))/4)^3]}
 
ExtractPositionPattern[exp_, pattern_] := Module[{pos, list}, 
     pos = Position[exp, pattern]; list = Extract[exp, pos]; 
      Thread[pos -> list]]
 
ParseTermIndicesTU[term_] := Module[{tmp, pos, up = {}, dn = {}, updup, 
      dndup, dummy = {}, bad = {}}, If[Head[term] =!= Plus, 
       tmp = term //. IndexParsingRules; pos = ExtractPattern[tmp, 
          Tensor[$A_, $u_, $d_]]; up = (DeleteCases[#1, Void] & )[
          Flatten[(#1[[2]] & ) /@ pos]]; dn = (DeleteCases[#1, Void] & )[
          Flatten[(#1[[3]] & ) /@ pos]]; updup = Tally[up]; 
        dndup = Tally[dn]; bad = (#1[[1]] & ) /@ 
          Join[Cases[updup, {_, n_ /; n > 1}], Cases[dndup, 
            {_, n_ /; n > 1}]]; dummy = Intersection[up, dn]; 
        up = DeleteCases[up, Alternatives @@ Join[dummy, bad]]; 
        dn = DeleteCases[dn, Alternatives @@ Join[dummy, bad]]; ]; 
      {dummy, {up, dn}, bad}]
 
ExtractPattern[pattern_][exp_] := Module[{pos, list}, 
     pos = Position[exp, pattern]; list = Extract[exp, pos]]
 
ExtractPattern[exp_, pattern_] := Module[{pos, list}, 
     pos = Position[exp, pattern]; list = Extract[exp, pos]]
 
ReplaceIndexTU[from_, to_][exp_] := Module[{upD, dnD, subd, ipos, xexp, 
      xfrom, xto, ip}, upD = {xPartialDu, xCovariantDu, xDu[$a_]}; 
      dnD = {xPartialD, xCovariantD, xD[$a_]}; 
      subd = Thread[upD -> RemovePatterns[dnD]]; {xexp, xfrom, xto} = 
       (#1 //. Pattern -> $Pattern & ) /@ {exp, from, to}; 
      xexp = xexp //. Tensor[A_, u_, d_] :> 
         Tensor[A, ReplacePart[u, ip -> xto], d] /; Length[u] > 0 && 
           (ipos = Position[u, xfrom, 1]) =!= {} && (ip = ipos[[1,1]]) > 0; 
      xexp = xexp //. Tensor[A_, u_, d_] :> 
         Tensor[A, u, ReplacePart[d, ip -> xto]] /; Length[d] > 0 && 
           (ipos = Position[d, xfrom, 1]) =!= {} && (ip = ipos[[1,1]]) > 0; 
      xexp = xexp //. (OP:Alternatives @@ Join[upD, dnD])[a_, b_] :> 
         OP[a, xto] /; (b //. Pattern -> $Pattern) == xfrom; 
      xexp //. $Pattern -> Pattern]
 
Imply = "\n\[DoubleRightArrow] "
 
TensorSimplify[TensorCalculus5`Tensorial`Private`expr_] /; 
     MatchQ[Head[TensorCalculus5`Tensorial`Private`expr], 
      List | Equal | Less | Greater | LessEqual | GreaterEqual | Unequal] := 
    TensorSimplify /@ TensorCalculus5`Tensorial`Private`expr
 
TensorSimplify[TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`wexpr = 
       Expand[TensorCalculus5`Tensorial`Private`expr], 
      TensorCalculus5`Tensorial`Private`termpatterns, 
      TensorCalculus5`Tensorial`Private`standardpattern, 
      TensorCalculus5`Tensorial`Private`standardterm, 
      TensorCalculus5`Tensorial`Private`wdummies, 
      TensorCalculus5`Tensorial`Private`k, 
      TensorCalculus5`Tensorial`Private`dum, 
      TensorCalculus5`Tensorial`Private`hit = False}, 
     Off[RawIndex::notindex]; 
      TensorCalculus5`Tensorial`Private`standardpattern[
        TensorCalculus5`Tensorial`Private`term_] := 
       Module[{TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`term, 
         TensorCalculus5`Tensorial`Private`dummylist, 
         TensorCalculus5`Tensorial`Private`freelist, 
         TensorCalculus5`Tensorial`Private`workdummies, 
         TensorCalculus5`Tensorial`Private`workfree, 
         TensorCalculus5`Tensorial`Private`ndummies, 
         TensorCalculus5`Tensorial`Private`f, 
         TensorCalculus5`Tensorial`Private`g}, 
        TensorCalculus5`Tensorial`Private`dummylist = 
          First[ParseTermIndices[TensorCalculus5`Tensorial`Private`term]]; 
         TensorCalculus5`Tensorial`Private`freelist = 
          Flatten[ParseTermIndices[TensorCalculus5`Tensorial`Private`term][[
            2]]]; TensorCalculus5`Tensorial`Private`ndummies = 
          Length[TensorCalculus5`Tensorial`Private`dummylist]; 
         If[TensorCalculus5`Tensorial`Private`ndummies == 0, 
          Return[Sequence[]]]; 
         TensorCalculus5`Tensorial`Private`workdummies = 
          TensorCalculus5`Tensorial`Private`f /@ 
           TensorCalculus5`Tensorial`Private`dummylist; 
         TensorCalculus5`Tensorial`Private`workfree = 
          TensorCalculus5`Tensorial`Private`g /@ 
           TensorCalculus5`Tensorial`Private`freelist; 
         TensorCalculus5`Tensorial`Private`wterm = 
          IndexChange[Transpose[{TensorCalculus5`Tensorial`Private`dummylist, 
              TensorCalculus5`Tensorial`Private`workdummies}]][
           TensorCalculus5`Tensorial`Private`wterm]; 
         If[Length[TensorCalculus5`Tensorial`Private`freelist] > 0, 
          TensorCalculus5`Tensorial`Private`wterm = 
           IndexChange[Transpose[{TensorCalculus5`Tensorial`Private`freelist, 
               TensorCalculus5`Tensorial`Private`workfree}]][
            TensorCalculus5`Tensorial`Private`wterm]]; 
         TensorCalculus5`Tensorial`Private`wterm = SymmetrizePattern[][
           SymmetrizeSlots[][TensorCalculus5`Tensorial`Private`wterm]]; 
         TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`wterm /. 
           Thread[TensorCalculus5`Tensorial`Private`workfree -> 
             TensorCalculus5`Tensorial`Private`freelist]; 
         TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`wterm /. 
           Thread[TensorCalculus5`Tensorial`Private`workdummies -> 
             Table[TensorCalculus5`Tensorial`Private`dum[Unique[
                TensorCalculus5`Tensorial`Private`i]], 
              {TensorCalculus5`Tensorial`Private`ndummies}]]]; 
      TensorCalculus5`Tensorial`Private`standardterm[
        TensorCalculus5`Tensorial`Private`term_] := 
       Module[{TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`term, 
         TensorCalculus5`Tensorial`Private`dummylist, 
         TensorCalculus5`Tensorial`Private`freelist, 
         TensorCalculus5`Tensorial`Private`workdummies, 
         TensorCalculus5`Tensorial`Private`workfree, 
         TensorCalculus5`Tensorial`Private`ndummies, 
         TensorCalculus5`Tensorial`Private`f, 
         TensorCalculus5`Tensorial`Private`g}, 
        TensorCalculus5`Tensorial`Private`dummylist = 
          First[ParseTermIndices[TensorCalculus5`Tensorial`Private`term]]; 
         TensorCalculus5`Tensorial`Private`freelist = 
          Flatten[ParseTermIndices[TensorCalculus5`Tensorial`Private`term][[
            2]]]; TensorCalculus5`Tensorial`Private`ndummies = 
          Length[TensorCalculus5`Tensorial`Private`dummylist]; 
         If[TensorCalculus5`Tensorial`Private`ndummies == 0, 
          Return[TensorCalculus5`Tensorial`Private`term]]; 
         TensorCalculus5`Tensorial`Private`workdummies = 
          TensorCalculus5`Tensorial`Private`f /@ 
           TensorCalculus5`Tensorial`Private`dummylist; 
         TensorCalculus5`Tensorial`Private`workfree = 
          TensorCalculus5`Tensorial`Private`g /@ 
           TensorCalculus5`Tensorial`Private`freelist; 
         TensorCalculus5`Tensorial`Private`wterm = 
          IndexChange[Transpose[{TensorCalculus5`Tensorial`Private`dummylist, 
              TensorCalculus5`Tensorial`Private`workdummies}]][
           TensorCalculus5`Tensorial`Private`wterm]; 
         If[Length[TensorCalculus5`Tensorial`Private`freelist] > 0, 
          TensorCalculus5`Tensorial`Private`wterm = 
           IndexChange[Transpose[{TensorCalculus5`Tensorial`Private`freelist, 
               TensorCalculus5`Tensorial`Private`workfree}]][
            TensorCalculus5`Tensorial`Private`wterm]]; 
         TensorCalculus5`Tensorial`Private`wterm = SymmetrizePattern[][
           SymmetrizeSlots[][TensorCalculus5`Tensorial`Private`wterm]]; 
         TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`wterm /. 
           Thread[TensorCalculus5`Tensorial`Private`workfree -> 
             TensorCalculus5`Tensorial`Private`freelist]; 
         TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`wterm /. 
           Thread[TensorCalculus5`Tensorial`Private`workdummies -> 
             TensorCalculus5`Tensorial`Private`dummylist]]; 
      TensorCalculus5`Tensorial`Private`wexpr = 
       TensorCalculus5`Tensorial`Private`standardterm /@ 
        TensorCalculus5`Tensorial`Private`wexpr; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       List @@ TensorCalculus5`Tensorial`Private`wexpr; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       TensorCalculus5`Tensorial`Private`termpatterns /. 
        (TensorCalculus5`Tensorial`Private`a_)*
           (TensorCalculus5`Tensorial`Private`b_) /; 
          FreeQ[{TensorCalculus5`Tensorial`Private`a}, Tensor[__]] -> 
         TensorCalculus5`Tensorial`Private`b; 
      If[Length[TensorCalculus5`Tensorial`Private`termpatterns] < 1, 
       Return[TensorCalculus5`Tensorial`Private`wexpr]]; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       TensorCalculus5`Tensorial`Private`standardpattern /@ 
        TensorCalculus5`Tensorial`Private`termpatterns; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       Union[TensorCalculus5`Tensorial`Private`termpatterns /. 
         Null -> Sequence[], SameTest -> 
         (MatchQ[#1 /. TensorCalculus5`Tensorial`Private`dum[
              TensorCalculus5`Tensorial`Private`i_] -> 
             TensorCalculus5`Tensorial`Private`k, 
           #2 /. TensorCalculus5`Tensorial`Private`dum[
              TensorCalculus5`Tensorial`Private`i_] -> 
             TensorCalculus5`Tensorial`Private`k] & )]; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       TensorCalculus5`Tensorial`Private`termpatterns /. 
        TensorCalculus5`Tensorial`Private`dum[
          TensorCalculus5`Tensorial`Private`i_] :> 
         With[{TensorCalculus5`Tensorial`Private`x = 
            TensorCalculus5`Tensorial`Private`i}, 
          TensorCalculus5`Tensorial`Private`x_]; 
      TensorCalculus5`Tensorial`Private`termpatterns = 
       (TensorCalculus5`Tensorial`Private`k_.)*
        TensorCalculus5`Tensorial`Private`termpatterns; 
      TensorCalculus5`Tensorial`Private`wexpr = SymmetrizePattern[][
        SymmetrizeSlots[][Fold[
          TensorCalculus5`Tensorial`Private`MapLevelPatterns[
             Simplify[If[Head[#1] === Plus, 
                TensorCalculus5`Tensorial`Private`hit = True; 
                 SimplifyTensorSum[#1], #1]] & , {{#2}}][#1] & , 
          TensorCalculus5`Tensorial`Private`wexpr, 
          TensorCalculus5`Tensorial`Private`termpatterns]]]; 
      On[RawIndex::notindex]; If[TensorCalculus5`Tensorial`Private`hit == 
        False, TensorCalculus5`Tensorial`Private`wexpr /. 
        TensorCalculus5`Tensorial`Private`sum:HoldPattern[Plus[__]] :> 
         SimplifyTensorSum[TensorCalculus5`Tensorial`Private`sum], 
       TensorCalculus5`Tensorial`Private`wexpr]]
 
SyntaxInformation[TensorSimplify] = {"ArgumentsPattern" -> {_}}
 
TensorSimplify /: TensorSimplify::usage = "TensorSimplify[expr] will attempt \
to simplify a tensor expression by applying declared symmetries and \
reindexing terms with similar patterns. It is automatically mapped over lists \
and equations."
 
SymmetrizePattern[][TensorCalculus5`Tensorial`Private`expr_] := 
    Fold[SymmetrizePattern[Sequence @@ #2][#1] & , 
     TensorCalculus5`Tensorial`Private`expr, PatternSymmetries]
 
SymmetrizePattern[TensorCalculus5`Tensorial`Private`pattern_, 
      TensorCalculus5`Tensorial`Private`insymmetries:
       {{-1 | 0 | 1, {_?SymbolicIndexQ, __?SymbolicIndexQ} | 
           {{_?SymbolicIndexQ, __?SymbolicIndexQ}, 
            {_?SymbolicIndexQ, __?SymbolicIndexQ}..}}..}][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`symmetries}, 
     TensorCalculus5`Tensorial`Private`symmetries = 
       TensorCalculus5`Tensorial`Private`insymmetries /. 
        {TensorCalculus5`Tensorial`Private`i_Integer, 
          TensorCalculus5`Tensorial`Private`sym_List} :> 
         {TensorCalculus5`Tensorial`Private`i, 
          Sort[TensorCalculus5`Tensorial`Private`sym]}; 
      TensorCalculus5`Tensorial`Private`SymmetrizePattern2[
        TensorCalculus5`Tensorial`Private`pattern, 
        TensorCalculus5`Tensorial`Private`symmetries][
       TensorCalculus5`Tensorial`Private`expr]]
 
SyntaxInformation[SymmetrizePattern] = {"ArgumentsPattern" -> {_., _.}}
 
SymmetrizePattern /: SymmetrizePattern::usage = "SymmetrizePattern[pattern, \
symmetries][expr] will permute the (anti)symmetrical indices in all terms \
matching the pattern such that they are ordered according to the pattern and \
the specified symmetries. The symmetries take the form\n{{-1|0|1, {index1, \
index2,\[Ellipsis]}}\[Ellipsis]} where -1 is used if the set of indices is \
antisymmetrical and 1 if they are symmetrical. For each term and symmetry \
set, the symmetry set is first sorted. The index values are then picked from \
the values in the corresponding position in the pattern. These are then \
changed to the sorted values of the set with the appropriate sign.\nindex1, \
index2,\[Ellipsis] may also be equal length lists of indices. In that case \
they are each treated as groups of indices that can be interchanged without \
internal rearrangement. \nSymmetrizePattern[][expr] automatically applies all \
the pattern symmetries that have been declared with \
DeclarePatternSymmetries."
 
PatternSymmetries = {}
 
PatternSymmetries /: PatternSymmetries::usage = "PatternSymmetries is a list \
of pattern symmetries that will all be applied with the SymmetrizePattern[] \
command."
 
TensorCalculus5`Tensorial`Private`SymmetrizePattern2[
      TensorCalculus5`Tensorial`Private`pattern_, 
      TensorCalculus5`Tensorial`Private`symmetries_][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`h, 
      TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`symlength = 
       Length[TensorCalculus5`Tensorial`Private`symmetries]}, 
     TensorCalculus5`Tensorial`Private`expr /. 
      TensorCalculus5`Tensorial`Private`term:
        (TensorCalculus5`Tensorial`Private`h_.)*
         TensorCalculus5`Tensorial`Private`pattern :> 
       Module[{TensorCalculus5`Tensorial`Private`wterm = 
          TensorCalculus5`Tensorial`Private`term/
           TensorCalculus5`Tensorial`Private`h, 
         TensorCalculus5`Tensorial`Private`fromindices, 
         TensorCalculus5`Tensorial`Private`toindices, 
         TensorCalculus5`Tensorial`Private`sign}, 
        Do[TensorCalculus5`Tensorial`Private`fromindices = 
            TensorCalculus5`Tensorial`Private`symmetries[[
             TensorCalculus5`Tensorial`Private`i,2]]; 
           TensorCalculus5`Tensorial`Private`toindices = 
            Sort[TensorCalculus5`Tensorial`Private`symmetries[[
              TensorCalculus5`Tensorial`Private`i,2]]]; 
           TensorCalculus5`Tensorial`Private`sign = 
            Switch[TensorCalculus5`Tensorial`Private`symmetries[[
              TensorCalculus5`Tensorial`Private`i,1]], 0, 0, 1, 1, -1, 
             Signature[TensorCalculus5`Tensorial`Private`fromindices]*
              Signature[TensorCalculus5`Tensorial`Private`toindices]]; 
           TensorCalculus5`Tensorial`Private`wterm = 
            TensorCalculus5`Tensorial`Private`sign*
              TensorCalculus5`Tensorial`Private`wterm /. 
             Thread[Flatten[TensorCalculus5`Tensorial`Private`fromindices] -> 
               Flatten[TensorCalculus5`Tensorial`Private`toindices]], 
          {TensorCalculus5`Tensorial`Private`i, 1, 
           TensorCalculus5`Tensorial`Private`symlength}]; 
         TensorCalculus5`Tensorial`Private`h*
          TensorCalculus5`Tensorial`Private`wterm]]
 
SymmetrizeSlots[][TensorCalculus5`Tensorial`Private`expr_] := 
    SymmetrizeSlots[Automatic][TensorCalculus5`Tensorial`Private`expr]
 
SymmetrizeSlots[TensorCalculus5`Tensorial`Private`sargs__][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`plabel, 
      TensorCalculus5`Tensorial`Private`porder, 
      TensorCalculus5`Tensorial`Private`psymmetry, 
      TensorCalculus5`Tensorial`Private`passedsymmetry = False}, 
     If[TensorCalculus5`Tensorial`Private`sargs =!= Automatic && 
        Length[{TensorCalculus5`Tensorial`Private`sargs}] == 3, 
       {TensorCalculus5`Tensorial`Private`plabel, 
          TensorCalculus5`Tensorial`Private`porder, 
          TensorCalculus5`Tensorial`Private`psymmetry} = 
         {TensorCalculus5`Tensorial`Private`sargs}; 
        TensorCalculus5`Tensorial`Private`passedsymmetry = True]; 
      TensorCalculus5`Tensorial`Private`passedsymmetry = 
       If[TensorCalculus5`Tensorial`Private`passedsymmetry && 
         Head[TensorCalculus5`Tensorial`Private`plabel] === Symbol && 
         Head[TensorCalculus5`Tensorial`Private`porder] === Integer && 
         TensorCalculus5`Tensorial`Private`porder > 0, True, False]; 
      TensorCalculus5`Tensorial`Private`expr /. 
       TensorCalculus5`Tensorial`Private`tensor:
         Tensor[TensorCalculus5`Tensorial`Private`label_, 
          TensorCalculus5`Tensorial`Private`ups_, 
          TensorCalculus5`Tensorial`Private`downs_] :> 
        Catch[Module[{TensorCalculus5`Tensorial`Private`order = 
            Length[TensorCalculus5`Tensorial`Private`ups], 
           TensorCalculus5`Tensorial`Private`dummies = 
            First[ParseTermIndices[
              TensorCalculus5`Tensorial`Private`tensor]], 
           TensorCalculus5`Tensorial`Private`tsign = 1, 
           TensorCalculus5`Tensorial`Private`symmetry, 
           TensorCalculus5`Tensorial`Private`slots, 
           TensorCalculus5`Tensorial`Private`processsymmetry, 
           TensorCalculus5`Tensorial`Private`duplicatedummies}, 
          TensorCalculus5`Tensorial`Private`duplicatedummies[
             TensorCalculus5`Tensorial`Private`sslots_] := 
            Module[{TensorCalculus5`Tensorial`Private`work}, 
             TensorCalculus5`Tensorial`Private`work = Outer[
                Module[{TensorCalculus5`Tensorial`Private`indices}, 
                  TensorCalculus5`Tensorial`Private`indices = Cases[#2, 
                     {_Symbol, TensorCalculus5`Tensorial`Private`index_, 
                       1 | -1} -> TensorCalculus5`Tensorial`Private`index, 
                     Infinity]; MatchQ[#1, Alternatives @@ 
                     TensorCalculus5`Tensorial`Private`indices]] & , 
                TensorCalculus5`Tensorial`Private`dummies, 
                TensorCalculus5`Tensorial`Private`sslots, 1]; 
              TensorCalculus5`Tensorial`Private`work = (Count[#1, True, 
                   Infinity] > 1 & ) /@ 
                TensorCalculus5`Tensorial`Private`work; 
              Or @@ TensorCalculus5`Tensorial`Private`work]; 
           TensorCalculus5`Tensorial`Private`processsymmetry[
             TensorCalculus5`Tensorial`Private`subsymmetry_] := 
            Module[{TensorCalculus5`Tensorial`Private`symtype = Head[
                TensorCalculus5`Tensorial`Private`subsymmetry], 
              TensorCalculus5`Tensorial`Private`symslots, 
              TensorCalculus5`Tensorial`Private`subslots, 
              TensorCalculus5`Tensorial`Private`neworder, 
              TensorCalculus5`Tensorial`Private`sign, 
              TensorCalculus5`Tensorial`Private`newsubslots}, 
             If[TensorCalculus5`Tensorial`Private`symtype === List, Return[
                TensorCalculus5`Tensorial`Private`subsymmetry]]; 
              TensorCalculus5`Tensorial`Private`symslots = 
               TensorCalculus5`Tensorial`Private`subsymmetry /. 
                  {TensorCalculus5`Tensorial`Private`args:_Integer..} :> 
                   Sort[{TensorCalculus5`Tensorial`Private`args}] /. 
                 (Symmetric | AntiSymmetric)[
                   TensorCalculus5`Tensorial`Private`args:_List..] -> 
                  {TensorCalculus5`Tensorial`Private`args} /. 
                (Symmetric | AntiSymmetric)[
                  TensorCalculus5`Tensorial`Private`args:_Integer..] :> 
                 Partition[Sort[{TensorCalculus5`Tensorial`Private`args}], 
                  1]; TensorCalculus5`Tensorial`Private`subslots = 
               (TensorCalculus5`Tensorial`Private`slots[[#1]] & ) /@ 
                TensorCalculus5`Tensorial`Private`symslots; 
              TensorCalculus5`Tensorial`Private`neworder = Ordering[
                TensorCalculus5`Tensorial`Private`subslots]; 
              TensorCalculus5`Tensorial`Private`tsign = Which[
                TensorCalculus5`Tensorial`Private`symtype === 
                  AntiSymmetric && 
                 (TensorCalculus5`Tensorial`Private`duplicatedummies[
                   TensorCalculus5`Tensorial`Private`subslots] || 
                  Length[Union[TensorCalculus5`Tensorial`Private`subslots]] < 
                   Length[TensorCalculus5`Tensorial`Private`subslots]), 0, 
                TensorCalculus5`Tensorial`Private`symtype === AntiSymmetric, 
                TensorCalculus5`Tensorial`Private`tsign*Signature[
                  TensorCalculus5`Tensorial`Private`neworder]*Signature[
                  TensorCalculus5`Tensorial`Private`symslots], True, 
                TensorCalculus5`Tensorial`Private`tsign]; 
              TensorCalculus5`Tensorial`Private`newsubslots = Flatten[
                TensorCalculus5`Tensorial`Private`subslots[[
                 TensorCalculus5`Tensorial`Private`neworder]], 1]; 
              TensorCalculus5`Tensorial`Private`slots = ReplacePart[
                TensorCalculus5`Tensorial`Private`slots, 
                TensorCalculus5`Tensorial`Private`newsubslots, Partition[
                 Flatten[TensorCalculus5`Tensorial`Private`symslots, 1], 1], 
                Partition[Range[Length[
                   TensorCalculus5`Tensorial`Private`newsubslots]], 1]]; 
              List @@ TensorCalculus5`Tensorial`Private`subsymmetry]; 
           If[TensorCalculus5`Tensorial`Private`passedsymmetry, 
            TensorCalculus5`Tensorial`Private`symmetry = 
              TensorCalculus5`Tensorial`Private`psymmetry; 
             If[TensorCalculus5`Tensorial`Private`label =!= 
                TensorCalculus5`Tensorial`Private`plabel || 
               TensorCalculus5`Tensorial`Private`order =!= 
                TensorCalculus5`Tensorial`Private`porder, 
              Throw[TensorCalculus5`Tensorial`Private`tensor]], 
            TensorCalculus5`Tensorial`Private`symmetry = dclTensorSymmetry[
               TensorCalculus5`Tensorial`Private`label, 
               TensorCalculus5`Tensorial`Private`order]; 
             If[Head[TensorCalculus5`Tensorial`Private`symmetry] === 
               dclTensorSymmetry, Throw[
               TensorCalculus5`Tensorial`Private`tensor]]]; 
           TensorCalculus5`Tensorial`Private`slots = ExtractTensorSlots[
             TensorCalculus5`Tensorial`Private`tensor]; 
           Map[TensorCalculus5`Tensorial`Private`processsymmetry, 
            TensorCalculus5`Tensorial`Private`symmetry, {0, -2}]; 
           TensorCalculus5`Tensorial`Private`tsign*SlotsToTensor[
             TensorCalculus5`Tensorial`Private`slots]]]]
 
SyntaxInformation[SymmetrizeSlots] = {"ArgumentsPattern" -> {___}}
 
SymmetrizeSlots /: SymmetrizeSlots::usage = "SymmetrizeSlots[][expr] will \
employ any TensorSymmetries that have been declared.\nSymmetrizeSlots[label, \
order, symmetry][expr] will apply the symmetry to tensors with the given \
label and order."
 
AntiSymmetric[TensorCalculus5`Tensorial`Private`args__List /; 
       Length[{TensorCalculus5`Tensorial`Private`args}] > 1, 
      TensorCalculus5`Tensorial`Private`weighting_:True][
     TensorCalculus5`Tensorial`Private`term_] := 
    Fold[AntiSymmetric[#2, TensorCalculus5`Tensorial`Private`weighting][
       #1] & , TensorCalculus5`Tensorial`Private`term, 
     {TensorCalculus5`Tensorial`Private`args}]
 
AntiSymmetric[TensorCalculus5`Tensorial`Private`ind_List, 
      TensorCalculus5`Tensorial`Private`weighting_:True][
     TensorCalculus5`Tensorial`Private`term_] := 
    Module[{TensorCalculus5`Tensorial`Private`indperm, 
      TensorCalculus5`Tensorial`Private`rules, 
      TensorCalculus5`Tensorial`Private`signs, 
      TensorCalculus5`Tensorial`Private`tens, 
      TensorCalculus5`Tensorial`Private`upindices, 
      TensorCalculus5`Tensorial`Private`downindices, 
      TensorCalculus5`Tensorial`Private`numindices = 
       Length[TensorCalculus5`Tensorial`Private`ind], 
      TensorCalculus5`Tensorial`Private`work = 
       Expand[TensorCalculus5`Tensorial`Private`term], 
      TensorCalculus5`Tensorial`Private`kk}, 
     Switch[Head[TensorCalculus5`Tensorial`Private`work], List, 
      AntiSymmetric[TensorCalculus5`Tensorial`Private`ind, 
        TensorCalculus5`Tensorial`Private`weighting] /@ 
       TensorCalculus5`Tensorial`Private`work, Equal | Unequal | Less | 
       Greater | LessEqual | GreaterEqual, 
      AntiSymmetric[TensorCalculus5`Tensorial`Private`ind] /@ 
       TensorCalculus5`Tensorial`Private`work, Plus, 
      AntiSymmetric[TensorCalculus5`Tensorial`Private`ind, 
        TensorCalculus5`Tensorial`Private`weighting] /@ 
       TensorCalculus5`Tensorial`Private`work, _, 
      {TensorCalculus5`Tensorial`Private`upindices, 
         TensorCalculus5`Tensorial`Private`downindices} = 
        ParseTermIndices[TensorCalculus5`Tensorial`Private`term][[2]]; 
       If[ !(Count[TensorCalculus5`Tensorial`Private`ind, Alternatives @@ 
             TensorCalculus5`Tensorial`Private`upindices] == 
           TensorCalculus5`Tensorial`Private`numindices || 
          Count[TensorCalculus5`Tensorial`Private`ind, Alternatives @@ 
             TensorCalculus5`Tensorial`Private`downindices] == 
           TensorCalculus5`Tensorial`Private`numindices), 
        Message[AntiSymmetric::indices, 
          TensorCalculus5`Tensorial`Private`ind, 
          TensorCalculus5`Tensorial`Private`upindices, 
          TensorCalculus5`Tensorial`Private`downindices]; Abort[]]; 
       TensorCalculus5`Tensorial`Private`indperm = Permutations[
         TensorCalculus5`Tensorial`Private`ind]; 
       TensorCalculus5`Tensorial`Private`signs = (Signature[##1] & ) /@ 
         TensorCalculus5`Tensorial`Private`indperm; 
       TensorCalculus5`Tensorial`Private`tens = 
        Table[IndexChange[Transpose[{TensorCalculus5`Tensorial`Private`ind, 
             TensorCalculus5`Tensorial`Private`indperm[[
              TensorCalculus5`Tensorial`Private`kk]]}]][
          TensorCalculus5`Tensorial`Private`work], 
         {TensorCalculus5`Tensorial`Private`kk, 1, 
          Length[TensorCalculus5`Tensorial`Private`indperm]}]; 
       (Signature[TensorCalculus5`Tensorial`Private`ind]*
         TensorCalculus5`Tensorial`Private`signs . 
          TensorCalculus5`Tensorial`Private`tens)/
        If[TensorCalculus5`Tensorial`Private`weighting, 
         Length[TensorCalculus5`Tensorial`Private`indperm], 1]]]
 
SyntaxInformation[AntiSymmetric] = {"ArgumentsPattern" -> {__}}
 
AntiSymmetric /: AntiSymmetric::indices = "AntiSymmetric indices `` must be \
all be in the list of up, ``, or all in the list of down, ``, indices."
 
AntiSymmetric /: AntiSymmetric::usage = " AntiSymmetric[ind][expr], \
calculates the  antisymmetric tensor expression associated with expr for the \
index list ind.\nAntiSymmetric[list1, list2,...][expr] calculates the \
antisymmetric tensor expression for multiple sets of antisymmetric \
indices.\nAntiSymmetric is also a head for the definition of antisymmetric \
slots in setting tensor symmetries."
 
dclTensorSymmetry[f, 3] = AntiSymmetric[1, 2, 3]
 
dclTensorSymmetry /: dclTensorSymmetry::usage = "dclTensorSymmetry[label, \
order] holds the tensor symmetry for the given tensor"
 
f[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[f, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
ExtractTensorSlots[Tensor[TensorCalculus5`Tensorial`Private`label_, 
      TensorCalculus5`Tensorial`Private`ups_, 
      TensorCalculus5`Tensorial`Private`downs_]] := 
    Transpose[{TensorCalculus5`Tensorial`Private`ups, 
       TensorCalculus5`Tensorial`Private`downs}] /. 
     {{TensorCalculus5`Tensorial`Private`index_, Void} -> 
       {TensorCalculus5`Tensorial`Private`label, 
        TensorCalculus5`Tensorial`Private`index, -1}, 
      {Void, TensorCalculus5`Tensorial`Private`index_} -> 
       {TensorCalculus5`Tensorial`Private`label, 
        TensorCalculus5`Tensorial`Private`index, 1}}
 
SyntaxInformation[ExtractTensorSlots] = {"ArgumentsPattern" -> {_}}
 
ExtractTensorSlots /: ExtractTensorSlots::usage = "ExtractTensorSlots[Tensor[\
label, ups, downs] will extract the slots of the tensor and present them as a \
list {{label, index, \[MinusPlus]1}...} where -1 is used for an up index and \
+1 is used for a down index."
 
SlotsToTensor[TensorCalculus5`Tensorial`Private`slots:
      {{TensorCalculus5`Tensorial`Private`label_Symbol, _, 1 | -1}..}] := 
    Module[{TensorCalculus5`Tensorial`Private`work = 
       TensorCalculus5`Tensorial`Private`slots, 
      TensorCalculus5`Tensorial`Private`ups, 
      TensorCalculus5`Tensorial`Private`downs}, 
     {TensorCalculus5`Tensorial`Private`ups, 
        TensorCalculus5`Tensorial`Private`downs} = 
       Transpose[TensorCalculus5`Tensorial`Private`work /. 
         {{_, TensorCalculus5`Tensorial`Private`index_, -1} -> 
           {TensorCalculus5`Tensorial`Private`index, Void}, 
          {_, TensorCalculus5`Tensorial`Private`index_, 1} -> 
           {Void, TensorCalculus5`Tensorial`Private`index}}]; 
      Tensor[TensorCalculus5`Tensorial`Private`label, 
       TensorCalculus5`Tensorial`Private`ups, 
       TensorCalculus5`Tensorial`Private`downs]]
 
SyntaxInformation[SlotsToTensor] = {"ArgumentsPattern" -> {_}}
 
SlotsToTensor /: SlotsToTensor::usage = "SlotsToTensor[slots] will convert \
the slots obtained with ExtractTensorSlots back to a tensor."
 
TensorCalculus5`Tensorial`Private`MapLevelPatterns[
      TensorCalculus5`Tensorial`Private`func_, 
      {(TensorCalculus5`Tensorial`Private`toppart___Integer)?Positive, 
       {TensorCalculus5`Tensorial`Private`pattern_}}][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`work, 
      TensorCalculus5`Tensorial`Private`levelpos}, 
     TensorCalculus5`Tensorial`Private`work = 
       TensorCalculus5`Tensorial`Private`expr[[
        TensorCalculus5`Tensorial`Private`toppart]]; 
      TensorCalculus5`Tensorial`Private`levelpos = 
       Flatten[Position[TensorCalculus5`Tensorial`Private`work, 
         TensorCalculus5`Tensorial`Private`pattern, {1}, Heads -> False]]; 
      Switch[Length[TensorCalculus5`Tensorial`Private`levelpos], 0, 
       TensorCalculus5`Tensorial`Private`expr, 1, 
       MapAt[TensorCalculus5`Tensorial`Private`func, 
        TensorCalculus5`Tensorial`Private`expr, 
        Flatten[{TensorCalculus5`Tensorial`Private`toppart, 
          TensorCalculus5`Tensorial`Private`levelpos}]], _, 
       TensorCalculus5`Tensorial`Private`MapLevelParts[
         TensorCalculus5`Tensorial`Private`func, 
         {TensorCalculus5`Tensorial`Private`toppart, 
          TensorCalculus5`Tensorial`Private`levelpos}][
        TensorCalculus5`Tensorial`Private`expr]]]
 
TensorCalculus5`Tensorial`Private`MapLevelParts[
      TensorCalculus5`Tensorial`Private`func_, 
      TensorCalculus5`Tensorial`Private`part:
       {(TensorCalculus5`Tensorial`Private`toppart___Integer)?Positive, 
        TensorCalculus5`Tensorial`Private`subp:{_Integer?Positive, 
          (TensorCalculus5`Tensorial`Private`eprest__Integer)?Positive}}][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`work, 
      TensorCalculus5`Tensorial`Private`subparts, 
      TensorCalculus5`Tensorial`Private`npos, 
      TensorCalculus5`Tensorial`Private`null, 
      TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`nnull = 
       Length[{TensorCalculus5`Tensorial`Private`eprest}], 
      TensorCalculus5`Tensorial`Private`tempfunc}, 
     TensorCalculus5`Tensorial`Private`work = 
       TensorCalculus5`Tensorial`Private`tempfunc[
        TensorCalculus5`Tensorial`Private`expr[[Sequence @@ 
          TensorCalculus5`Tensorial`Private`part]]]; 
      TensorCalculus5`Tensorial`Private`subparts = 
       Thread[{TensorCalculus5`Tensorial`Private`toppart, 
         TensorCalculus5`Tensorial`Private`subp}]; 
      TensorCalculus5`Tensorial`Private`newparts = 
       Flatten[{TensorCalculus5`Tensorial`Private`work, 
         Table[TensorCalculus5`Tensorial`Private`null[
           TensorCalculus5`Tensorial`Private`i], 
          {TensorCalculus5`Tensorial`Private`i, 1, 
           TensorCalculus5`Tensorial`Private`nnull}]}]; 
      TensorCalculus5`Tensorial`Private`npos = 
       Partition[Range[TensorCalculus5`Tensorial`Private`nnull + 1], 1]; 
      TensorCalculus5`Tensorial`Private`work = 
       ReplacePart[TensorCalculus5`Tensorial`Private`expr, 
         TensorCalculus5`Tensorial`Private`newparts, 
         TensorCalculus5`Tensorial`Private`subparts, 
         TensorCalculus5`Tensorial`Private`npos] /. 
        TensorCalculus5`Tensorial`Private`null[_] -> Sequence[]; 
      TensorCalculus5`Tensorial`Private`work /. 
       TensorCalculus5`Tensorial`Private`tempfunc -> 
        TensorCalculus5`Tensorial`Private`func]
 
TensorCalculus5`Tensorial`Private`newparts = 
    {TensorCalculus5`Tensorial`Private`tempfunc$163902[
      4*OverBar[Subscript[u, q]][Subscript[p, q]] . Tensor[\[Gamma], {Void}, 
          {\[Mu]e}] . Subscript[v, q][Subscript[p, OverBar[q]]]*
        Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}] - 
       4*OverBar[Subscript[u, q]][Subscript[p, q]] . Tensor[\[Gamma], {Void}, 
          {\[Mu]e}] . Subscript[v, q][Subscript[p, OverBar[q]]]*
        Subscript[x, 1]*Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}] - 
       4*OverBar[Subscript[u, q]][Subscript[p, q]] . Tensor[\[Gamma], {Void}, 
          {\[Mu]e}] . Subscript[v, q][Subscript[p, OverBar[q]]]*
        Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Nu]g}]*
        Tensor[Subscript[p, OverBar[q]], {\[Nu]g}, {Void}]], 
     TensorCalculus5`Tensorial`Private`null$163902[1], 
     TensorCalculus5`Tensorial`Private`null$163902[2]}
 
Attributes[TensorCalculus5`Tensorial`Private`tempfunc$163902] = {Temporary}
 
Attributes[TensorCalculus5`Tensorial`Private`null$163902] = {Temporary}
 
SimplifyTensorSum[TensorCalculus5`Tensorial`Private`sum_] /; 
     MemberQ[Times | Plus, Head[TensorCalculus5`Tensorial`Private`sum]] := 
    Module[{TensorCalculus5`Tensorial`Private`wsum, 
      TensorCalculus5`Tensorial`Private`termindices, 
      TensorCalculus5`Tensorial`Private`dummies, 
      TensorCalculus5`Tensorial`Private`containsbadterms, 
      TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`termdummies, 
      TensorCalculus5`Tensorial`Private`rule}, 
     TensorCalculus5`Tensorial`Private`wsum = 
       Expand[TensorCalculus5`Tensorial`Private`sum]; 
      TensorCalculus5`Tensorial`Private`wsum = 
       If[Head[TensorCalculus5`Tensorial`Private`wsum] === Plus, 
        List @@ TensorCalculus5`Tensorial`Private`wsum, 
        {TensorCalculus5`Tensorial`Private`wsum}]; 
      TensorCalculus5`Tensorial`Private`termindices = 
       ParseTermIndices /@ TensorCalculus5`Tensorial`Private`wsum; 
      TensorCalculus5`Tensorial`Private`containsbadterms = False; 
      Do[If[TensorCalculus5`Tensorial`Private`termindices[[
          TensorCalculus5`Tensorial`Private`i,3]] =!= {}, 
        TensorCalculus5`Tensorial`Private`containsbadterms = True; 
         Message[SimplifyTensorSum::badterm, 
          TensorCalculus5`Tensorial`Private`wsum[[
           TensorCalculus5`Tensorial`Private`i]]]], 
       {TensorCalculus5`Tensorial`Private`i, 1, 
        Length[TensorCalculus5`Tensorial`Private`wsum]}]; 
      If[TensorCalculus5`Tensorial`Private`containsbadterms, Abort[]]; 
      If[ !SameQ @@ Table[Sort /@ 
           TensorCalculus5`Tensorial`Private`termindices[[
            TensorCalculus5`Tensorial`Private`i,2]], 
          {TensorCalculus5`Tensorial`Private`i, 1, 
           Length[TensorCalculus5`Tensorial`Private`wsum]}], 
       Message[SimplifyTensorSum::free]; Abort[]]; 
      TensorCalculus5`Tensorial`Private`dummies = 
       TensorCalculus5`Tensorial`Private`UnsortedUnion[
        Join @@ Table[TensorCalculus5`Tensorial`Private`termindices[[
           TensorCalculus5`Tensorial`Private`i,1]], 
          {TensorCalculus5`Tensorial`Private`i, 1, 
           Length[TensorCalculus5`Tensorial`Private`wsum]}]]; 
      Do[TensorCalculus5`Tensorial`Private`termdummies = 
         TensorCalculus5`Tensorial`Private`termindices[[
          TensorCalculus5`Tensorial`Private`i,1]]; 
        TensorCalculus5`Tensorial`Private`rule = 
         Thread[TensorCalculus5`Tensorial`Private`termdummies -> 
           Take[TensorCalculus5`Tensorial`Private`dummies, 
            Length[TensorCalculus5`Tensorial`Private`termdummies]]]; 
        TensorCalculus5`Tensorial`Private`wsum[[
          TensorCalculus5`Tensorial`Private`i]] = 
         TensorCalculus5`Tensorial`Private`wsum[[
           TensorCalculus5`Tensorial`Private`i]] /. 
          TensorCalculus5`Tensorial`Private`rule, 
       {TensorCalculus5`Tensorial`Private`i, 1, 
        Length[TensorCalculus5`Tensorial`Private`wsum]}]; 
      Plus @@ TensorCalculus5`Tensorial`Private`wsum]
 
SimplifyTensorSum[(TensorCalculus5`Tensorial`Private`expr_)?
      (FreeQ[#1, Tensor] & )] := TensorCalculus5`Tensorial`Private`expr
 
SyntaxInformation[SimplifyTensorSum] = {"ArgumentsPattern" -> {_}}
 
SimplifyTensorSum /: SimplifyTensorSum::badterm = 
     "Term `` contains bad indices."
 
SimplifyTensorSum /: SimplifyTensorSum::free = 
     "Free indices are not the same in all terms."
 
SimplifyTensorSum /: SimplifyTensorSum::usage = "SimplifyTensorSum[sum] will \
check that all terms in a tensor sum have valid indices, that the free \
indices are the same in all terms, and will simplify the sum by using a \
minimum number of dummy indices."
 
psA29 = {Tensor[\[Gamma], {a_}, {Void}] . Tensor[\[Gamma], {Void}, {a_}] -> 
      4, Tensor[\[Gamma], {a_}, {Void}] . Tensor[\[Gamma], {b_}, {Void}] . 
       Tensor[\[Gamma], {Void}, {a_}] -> -2*Tensor[\[Gamma], {b}, {Void}], 
     Tensor[\[Gamma], {a_}, {Void}] . Tensor[\[Gamma], {b_}, {Void}] . 
       Tensor[\[Gamma], {c_}, {Void}] . Tensor[\[Gamma], {Void}, {a_}] -> 
      4*Tensor[g, {b, c}, {Void, Void}], Tensor[\[Gamma], {a_}, {Void}] . 
       Tensor[\[Gamma], {b_}, {Void}] . Tensor[\[Gamma], {c_}, {Void}] . 
       Tensor[\[Gamma], {d_}, {Void}] . Tensor[\[Gamma], {Void}, {a_}] -> 
      -2*Tensor[\[Gamma], {d}, {Void}] . Tensor[\[Gamma], {c}, {Void}] . 
        Tensor[\[Gamma], {b}, {Void}], Tensor[\[Gamma], {a_}, {Void}] . 
       Tensor[\[Gamma], {Void}, {b_}] . Tensor[\[Gamma], {Void}, {a_}] -> 
      -2*Tensor[\[Gamma], {Void}, {b}], Tensor[\[Gamma], {a_}, {Void}] . 
       Tensor[\[Gamma], {Void}, {b_}] . Tensor[\[Gamma], {Void}, {c_}] . 
       Tensor[\[Gamma], {Void}, {a_}] -> 4*Tensor[g, {Void, Void}, {b, c}], 
     Tensor[\[Gamma], {a_}, {Void}] . Tensor[\[Gamma], {Void}, {b_}] . 
       Tensor[\[Gamma], {Void}, {c_}] . Tensor[\[Gamma], {Void}, {d_}] . 
       Tensor[\[Gamma], {Void}, {a_}] -> -2*Tensor[\[Gamma], {Void}, {d}] . 
        Tensor[\[Gamma], {Void}, {c}] . Tensor[\[Gamma], {Void}, {b}], 
     Tensor[\[Gamma], {Void}, {a_}] . Tensor[\[Gamma], {a_}, {Void}] -> 4, 
     Tensor[\[Gamma], {Void}, {a_}] . Tensor[\[Gamma], {b_}, {Void}] . 
       Tensor[\[Gamma], {a_}, {Void}] -> -2*Tensor[\[Gamma], {b}, {Void}], 
     Tensor[\[Gamma], {Void}, {a_}] . Tensor[\[Gamma], {b_}, {Void}] . 
       Tensor[\[Gamma], {c_}, {Void}] . Tensor[\[Gamma], {a_}, {Void}] -> 
      4*Tensor[g, {b, c}, {Void, Void}], Tensor[\[Gamma], {Void}, {a_}] . 
       Tensor[\[Gamma], {b_}, {Void}] . Tensor[\[Gamma], {c_}, {Void}] . 
       Tensor[\[Gamma], {d_}, {Void}] . Tensor[\[Gamma], {a_}, {Void}] -> 
      -2*Tensor[\[Gamma], {d}, {Void}] . Tensor[\[Gamma], {c}, {Void}] . 
        Tensor[\[Gamma], {b}, {Void}], Tensor[\[Gamma], {Void}, {a_}] . 
       Tensor[\[Gamma], {Void}, {b_}] . Tensor[\[Gamma], {a_}, {Void}] -> 
      -2*Tensor[\[Gamma], {Void}, {b}], Tensor[\[Gamma], {Void}, {a_}] . 
       Tensor[\[Gamma], {Void}, {b_}] . Tensor[\[Gamma], {Void}, {c_}] . 
       Tensor[\[Gamma], {a_}, {Void}] -> 4*Tensor[g, {Void, Void}, {b, c}], 
     Tensor[\[Gamma], {Void}, {a_}] . Tensor[\[Gamma], {Void}, {b_}] . 
       Tensor[\[Gamma], {Void}, {c_}] . Tensor[\[Gamma], {Void}, {d_}] . 
       Tensor[\[Gamma], {a_}, {Void}] -> -2*Tensor[\[Gamma], {Void}, {d}] . 
        Tensor[\[Gamma], {Void}, {c}] . Tensor[\[Gamma], {Void}, {b}]}
 
save = OverBar[Subscript[u, q]][Subscript[p, q]] . 
     (Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
       Subscript[m, OverBar[Derivative[1][q]]]*Subscript[m, 
        Derivative[1][q]] + Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
        Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
       Subscript[m, OverBar[Derivative[1][q]]]*Tensor[Subscript[p, q], 
        {Void}, {\[Mu]$12169}] - Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
        Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {Void}, {\[Nu]g}]*
       Subscript[m, OverBar[Derivative[1][q]]]*Subscript[x, 2]*
       Tensor[Subscript[p, q], {Void}, {\[Mu]$12169}] + 
      Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
        Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
       Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Mu]$12175}] + 
      Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {\[Mu]$12169}, 
         {Void}] . Tensor[\[Gamma], {Void}, {\[Mu]e}] . 
        Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, 
        OverBar[Derivative[1][q]]]*Subscript[x, 1]*
       Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12169}] + 
      Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
        Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
       Tensor[Subscript[p, OverBar[q]], {Void}, {\[Mu]$12175}] - 
      Tensor[\[Gamma], {\[Nu]g}, {Void}] . Tensor[\[Gamma], {Void}, 
         {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
        Tensor[\[Gamma], {Void}, {\[Nu]g}]*Subscript[m, Derivative[1][q]]*
       Subscript[x, 1]*Tensor[Subscript[p, OverBar[q]], {Void}, 
        {\[Mu]$12175}] - (Tensor[\[Gamma], {\[Nu]g}, {Void}] . 
         Tensor[\[Gamma], {\[Mu]$12169}, {Void}] . Tensor[\[Gamma], {Void}, 
          {\[Mu]e}] . Tensor[\[Gamma], {\[Mu]$12175}, {Void}] . 
         Tensor[\[Gamma], {Void}, {\[Nu]g}]*
        (Tensor[g, {Void, Void}, {\[Mu]$12169, \[Mu]$12175}]*
          Tensor[l, {Void}, {\[Mu]l}]*Tensor[l, {\[Mu]l}, {Void}] + 
         4*((-1 + Subscript[x, 2])*Tensor[Subscript[p, q], {Void}, 
             {\[Mu]$12169}] - Subscript[x, 1]*Tensor[Subscript[p, 
              OverBar[q]], {Void}, {\[Mu]$12169}])*
          (Subscript[x, 2]*Tensor[Subscript[p, q], {Void}, {\[Mu]$12175}] - 
           (-1 + Subscript[x, 1])*Tensor[Subscript[p, OverBar[q]], {Void}, 
             {\[Mu]$12175}])))/4) . Subscript[v, q][Subscript[p, OverBar[q]]]
subx = {Subscript[x, i_] -> (2*Tensor[Subscript[k, 0], {\[Mu]}, {Void}]*
        Tensor[Subscript[k, i], {Void}, {\[Mu]}])/s, 
     -Tensor[Subscript[k, 0], {\[Mu]}, {Void}] + Tensor[Subscript[k, 1], 
        {\[Mu]}, {Void}] + Tensor[Subscript[k, 2], {\[Mu]}, {Void}] + 
       Tensor[Subscript[k, 3], {\[Mu]}, {Void}] -> 0, 
     -Tensor[Subscript[k, 0], {Void}, {\[Mu]}] + Tensor[Subscript[k, 1], 
        {Void}, {\[Mu]}] + Tensor[Subscript[k, 2], {Void}, {\[Mu]}] + 
       Tensor[Subscript[k, 3], {Void}, {\[Mu]}] -> 0, 
     Tensor[Subscript[k, i_], {Void}, {\[Mu]_}]*Tensor[Subscript[k, i_], 
        {\[Mu]_}, {Void}] -> Subscript[m, i]^2, 
     1/(Tensor[Subscript[k, i_], {Void}, {\[Mu]_}]*Tensor[Subscript[k, i_], 
         {\[Mu]_}, {Void}]) -> Subscript[m, i]^(-2), Subscript[m, 0]^2 -> s, 
     Subscript[m, 0]^(-2) -> s^(-1), Tensor[Subscript[k, 0], {\[Mu]}, {Void}]*
       Tensor[Subscript[k, i_], {Void}, {\[Mu]}] -> (s*Subscript[x, i])/2}
 
Attributes[Subscript] = {NHoldRest}
 
x[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[x, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
Attributes[TensorCalculus5`Tensorial`Private`i$] = {Temporary}
 
Attributes[TensorCalculus5`Tensorial`Private`args$] = {Temporary}
 
udsymQ[TensorCalculus5`Tensorial`Private`udsym_Symbol] := 
    And @@ (#1 == "u" || #1 == "d" & ) /@ Characters[
       SymbolName[TensorCalculus5`Tensorial`Private`udsym]]
 
SyntaxInformation[udsymQ] = {"ArgumentsPattern" -> {_}}
 
udsymQ /: udsymQ::usage = 
     "udsymQ[udsym] tests if udsym consists entirely of u and d characters."
 
(TensorCalculus5`Tensorial`Private`fac_)*(TensorCalculus5`Tensorial`Private`z:
      Tensor[zero, _, _]) ^:= TensorCalculus5`Tensorial`Private`z
 
(TensorCalculus5`Tensorial`Private`term_) + 
     (TensorCalculus5`Tensorial`Private`z:Tensor[zero, _, _]) ^:= 
    TensorCalculus5`Tensorial`Private`term
 
Tensor /: Tensor::usage = "Tensor[A, upindices, downindices] represents a \
tensor with the label A and the given up and down indices. The list of up and \
down indices must be equal in length. Missing indices are indicated by Void. \
Tensor[\[Phi]] represents a scalar tensor."
 
zero /: Tensor[zero, {_?(FreeQ[#1, Pattern | Blank] && (#1 === Void || 
            BaseIndexQ[#1]) & )..}, 
      {_?(FreeQ[#1, Pattern | Blank] && (#1 === Void || BaseIndexQ[
             #1]) & )..}] := 0
 
Void /: Void::usage = 
     "Void is used to indicate a blank slot in the up or down tensor \
indices."
 
BaseIndexQ[TensorCalculus5`Tensorial`Private`index_] := 
    MemberQ[GetBaseIndices[TensorCalculus5`Tensorial`Private`index], 
     RawIndex[TensorCalculus5`Tensorial`Private`index]]
 
SyntaxInformation[BaseIndexQ] = {"ArgumentsPattern" -> {_}}
 
BaseIndexQ /: BaseIndexQ::usage = "BaseIndexQ[index] returns True if index \
has a base index value as its raw index and False otherwise. BaseIndexQ takes \
into account any special flavors used in DeclareBaseIndices."
 
GetBaseIndices[TensorCalculus5`Tensorial`Private`index_] := 
    Module[{TensorCalculus5`Tensorial`Private`flavor = 
       GetIndexFlavor[TensorCalculus5`Tensorial`Private`index], 
      TensorCalculus5`Tensorial`Private`work = BaseIndices}, 
     If[TensorCalculus5`Tensorial`Private`flavor === Identity, 
       Return[BaseIndices]]; 
      Scan[If[#1[[1]] === TensorCalculus5`Tensorial`Private`flavor, 
         TensorCalculus5`Tensorial`Private`work = #1[[2]]; Return[]] & , 
       TensorCalculus5`Tensorial`Private`baseflavors, {1}]; 
      TensorCalculus5`Tensorial`Private`work]
 
SyntaxInformation[GetBaseIndices] = {"ArgumentsPattern" -> {_}}
 
GetBaseIndices /: GetBaseIndices::usage = "GetBaseIndices[index] will return \
the list of base indices associated with index. This is the regular \
BaseIndices unless the flavor of index is one of the special ones declared in \
DeclareBaseIndices."
 
GetIndexFlavor[TensorCalculus5`Tensorial`Private`indx_] := 
    Module[{TensorCalculus5`Tensorial`Private`head = 
       Head[TensorCalculus5`Tensorial`Private`indx]}, 
     Switch[TensorCalculus5`Tensorial`Private`head, Symbol | Integer, 
      Identity, _, If[IndexFlavorQ[TensorCalculus5`Tensorial`Private`head], 
       TensorCalculus5`Tensorial`Private`head, $Failed]]]
 
SyntaxInformation[GetIndexFlavor] = {"ArgumentsPattern" -> {_}}
 
GetIndexFlavor /: GetIndexFlavor::usage = "GetIndexFlavor[index] will extract \
the flavor of an index. It returns Identity for indexes without flavors. It \
returns $Failed if the flavor is not a currently declared flavor."
 
IndexFlavorQ[TensorCalculus5`Tensorial`Private`flavor_] := 
    MemberQ[IndexFlavors, {TensorCalculus5`Tensorial`Private`flavor, _}]
 
SyntaxInformation[IndexFlavorQ] = {"ArgumentsPattern" -> {_}}
 
IndexFlavorQ /: IndexFlavorQ::usage = "IndexFlavorQ[flavor] returns True if \
flavor is contained in the IndexFlavors list and False otherwise."
 
IndexFlavors = {{field, RGBColor[0, 1, 0]}, {space, RGBColor[1, 0, 0]}, 
     {timespace, RGBColor[1, 0, 1]}, {feyn, RGBColor[1, 0.5, 0]}, 
     {groupR, RGBColor[0, 0, 1]}, {gaugeG, RGBColor[0, 0, 1]}}
 
IndexFlavors /: IndexFlavors::usage = "IndexFlavors is a list of the \
currently declared index flavors. It has the form {{flavorname, \
flavorform}...} where flavorname is a symbol, such as red or rocket, and \
flavorform is either an RGBColor or a header such as OverHat."
 
MakeBoxes[field[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 1, 0]], FormatType]
 
Format[field[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 1, 0]]
 
Attributes[MakeBoxes] = {HoldAllComplete}
 
MakeBoxes[Tensor[TensorCalculus5`Tensorial`Private`A_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {MakeBoxes[TensorCalculus5`Tensorial`Private`A, 
       TensorCalculus5`Tensorial`Private`form], 
      Tensor[TensorCalculus5`Tensorial`Private`A]}
 
MakeBoxes[Tensor[TensorCalculus5`Tensorial`Private`A_, 
      TensorCalculus5`Tensorial`Private`up_List, 
      TensorCalculus5`Tensorial`Private`down_List], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := 
    Module[{TensorCalculus5`Tensorial`Private`newdown = 
       TensorCalculus5`Tensorial`Private`down, 
      TensorCalculus5`Tensorial`Private`newup = 
       TensorCalculus5`Tensorial`Private`up, 
      TensorCalculus5`Tensorial`Private`makespace}, 
     TensorCalculus5`Tensorial`Private`makespace = 
       If[#1 === Void, Style[#2, ShowContents -> False], #1] & ; 
      TensorCalculus5`Tensorial`Private`newup = 
       Inner[TensorCalculus5`Tensorial`Private`makespace, 
        TensorCalculus5`Tensorial`Private`newup, 
        TensorCalculus5`Tensorial`Private`newdown, List]; 
      TensorCalculus5`Tensorial`Private`newdown = 
       Inner[TensorCalculus5`Tensorial`Private`makespace, 
        TensorCalculus5`Tensorial`Private`newdown, 
        TensorCalculus5`Tensorial`Private`newup, List]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False], 
          Rule[BaseStyle, List[Rule[AutoMultiplicationSymbol, False]]]] & ) \
@@ {SubsuperscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`A, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[(MakeBoxes[#1, TensorCalculus5`Tensorial`Private`form] & ) /@ 
           TensorCalculus5`Tensorial`Private`newdown], 
         RowBox[(MakeBoxes[#1, TensorCalculus5`Tensorial`Private`form] & ) /@ 
           TensorCalculus5`Tensorial`Private`newup]], 
        Tensor[TensorCalculus5`Tensorial`Private`A, 
         TensorCalculus5`Tensorial`Private`up, 
         TensorCalculus5`Tensorial`Private`down]}]
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`labs:{_, _, _, _}][
      TensorCalculus5`Tensorial`Private`w_, 
      (TensorCalculus5`Tensorial`Private`Tx_Tensor) | 
       (TensorCalculus5`Tensorial`Private`Tx_Symbol)], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[PartialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`w, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\[PartialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`Tx, 
             TensorCalculus5`Tensorial`Private`form]\)\), 
      PartialD[TensorCalculus5`Tensorial`Private`labs][
       TensorCalculus5`Tensorial`Private`w, 
       TensorCalculus5`Tensorial`Private`Tx]}
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`labs:{_, _, _, _}][
      TensorCalculus5`Tensorial`Private`w_, 
      TensorCalculus5`Tensorial`Private`Tx_List], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`Tx], 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{"\[PartialD]", MakeBoxes[#1]} & , 
          {TensorCalculus5`Tensorial`Private`Tx}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[
         \(\[PartialD]\^\*ToString[TensorCalculus5`Tensorial`Private`p] 
            \*MakeBoxes[TensorCalculus5`Tensorial`Private`w, 
              TensorCalculus5`Tensorial`Private`form]\), 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        PartialD[TensorCalculus5`Tensorial`Private`labs][
         TensorCalculus5`Tensorial`Private`w, 
         TensorCalculus5`Tensorial`Private`Tx]}]
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`t_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
        MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`form]}], 
      TotalD[TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t_ /; 
        !VectorQ[TensorCalculus5`Tensorial`Private`t]], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {FractionBox[RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`form]}], 
       RowBox[{TensorCalculus5`Tensorial`Private`TDd, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form]}]], 
      TotalD[TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[TotalD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t:{__}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`t], 
      TensorCalculus5`Tensorial`Private`numboxes, 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`numboxes = 
       If[TensorCalculus5`Tensorial`Private`p == 1, 
        RowBox[{TensorCalculus5`Tensorial`Private`TDu, 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}], 
        RowBox[{SuperscriptBox[TensorCalculus5`Tensorial`Private`TDu, 
           ToString[TensorCalculus5`Tensorial`Private`p]], 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}]]; 
      TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{TensorCalculus5`Tensorial`Private`TDd, 
            MakeBoxes[#1]} & , {TensorCalculus5`Tensorial`Private`t}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[TensorCalculus5`Tensorial`Private`numboxes, 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        TotalD[TensorCalculus5`Tensorial`Private`expr, 
         TensorCalculus5`Tensorial`Private`t]}]
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
           TensorCalculus5`Tensorial`Private`form]\), 
      Dt[TensorCalculus5`Tensorial`Private`f]}
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol, 
      TensorCalculus5`Tensorial`Private`t_Symbol], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\[DifferentialD] \*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
             TensorCalculus5`Tensorial`Private`form]\)\), 
      Dt[TensorCalculus5`Tensorial`Private`f, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[Dt[TensorCalculus5`Tensorial`Private`f_Symbol, 
      {TensorCalculus5`Tensorial`Private`t_Symbol, 
       TensorCalculus5`Tensorial`Private`n_Integer}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ {
      \(\(\[DifferentialD]\^\*MakeBoxes[TensorCalculus5`Tensorial`Private`n, 
              TensorCalculus5`Tensorial`Private`form] 
           \*MakeBoxes[TensorCalculus5`Tensorial`Private`f, 
             TensorCalculus5`Tensorial`Private`form]\)\/
         \(\ \[VeryThinSpace]\[DifferentialD] 
            \*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form]\)\^
          \*MakeBoxes[TensorCalculus5`Tensorial`Private`n, 
            TensorCalculus5`Tensorial`Private`form]\), 
      Dt[TensorCalculus5`Tensorial`Private`f, 
       {TensorCalculus5`Tensorial`Private`t, 
        TensorCalculus5`Tensorial`Private`n}]}
 
MakeBoxes[AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t_ /; 
        !VectorQ[TensorCalculus5`Tensorial`Private`t]], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {FractionBox[RowBox[{TensorCalculus5`Tensorial`Private`ADu, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`form]}], 
       RowBox[{TensorCalculus5`Tensorial`Private`ADd, 
         MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form]}]], 
      AbsoluteD[TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`t]}
 
MakeBoxes[AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`t:{__}], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`p = 
       Length[TensorCalculus5`Tensorial`Private`t], 
      TensorCalculus5`Tensorial`Private`numboxes, 
      TensorCalculus5`Tensorial`Private`denomboxes}, 
     TensorCalculus5`Tensorial`Private`numboxes = 
       If[TensorCalculus5`Tensorial`Private`p == 1, 
        RowBox[{TensorCalculus5`Tensorial`Private`ADu, 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}], 
        RowBox[{SuperscriptBox[TensorCalculus5`Tensorial`Private`ADu, 
           ToString[TensorCalculus5`Tensorial`Private`p]], 
          MakeBoxes[TensorCalculus5`Tensorial`Private`expr, 
           TensorCalculus5`Tensorial`Private`form]}]]; 
      TensorCalculus5`Tensorial`Private`denomboxes = 
       RowBox[Flatten[MapThread[{TensorCalculus5`Tensorial`Private`ADd, 
            MakeBoxes[#1]} & , {TensorCalculus5`Tensorial`Private`t}]]]; (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {FractionBox[TensorCalculus5`Tensorial`Private`numboxes, 
         TensorCalculus5`Tensorial`Private`denomboxes], 
        AbsoluteD[TensorCalculus5`Tensorial`Private`expr, 
         TensorCalculus5`Tensorial`Private`t]}]
 
MakeBoxes[CovariantD[TensorCalculus5`Tensorial`Private`t_, 
      TensorCalculus5`Tensorial`Private`upindices__, 
      TensorCalculus5`Tensorial`Private`downindices__], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := 
    Module[{TensorCalculus5`Tensorial`Private`downindx = 
       Flatten[{TensorCalculus5`Tensorial`Private`downindices}] /. 
        Void -> Style[" ", ShowContents -> False], 
      TensorCalculus5`Tensorial`Private`upindx = 
       Flatten[{TensorCalculus5`Tensorial`Private`upindices}] /. 
        Void -> Style[" ", ShowContents -> False]}, 
     If[MatchQ[TensorCalculus5`Tensorial`Private`t, Tensor[_, _, _] | 
        Tensor[_Symbol]], (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubsuperscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[{TensorCalculus5`Tensorial`Private`CovSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`downindx]}], 
         RowBox[{ToBoxes[Invisible[TensorCalculus5`Tensorial`Private`CovSym], 
            TensorCalculus5`Tensorial`Private`form], 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`upindx]}]], 
        CovariantD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`upindices, 
         TensorCalculus5`Tensorial`Private`downindices]}, (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubsuperscriptBox[
         \((\*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form])\), 
         RowBox[{TensorCalculus5`Tensorial`Private`CovSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`downindx]}], 
         RowBox[{ToBoxes[Invisible[TensorCalculus5`Tensorial`Private`CovSym], 
            TensorCalculus5`Tensorial`Private`form], 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`upindx]}]], 
        CovariantD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`upindices, 
         TensorCalculus5`Tensorial`Private`downindices]}]]
 
MakeBoxes[PartialD[TensorCalculus5`Tensorial`Private`t_, 
      TensorCalculus5`Tensorial`Private`indices_], 
     TensorCalculus5`Tensorial`Private`form:StandardForm | 
       TraditionalForm] := Module[{TensorCalculus5`Tensorial`Private`windx = 
       Flatten[{TensorCalculus5`Tensorial`Private`indices}]}, 
     If[MatchQ[TensorCalculus5`Tensorial`Private`t, Tensor[_, _, _] | 
        Tensor[TensorCalculus5`Tensorial`Private`f_Symbol]], (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubscriptBox[MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`form], 
         RowBox[{TensorCalculus5`Tensorial`Private`DifSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`windx]}]], 
        PartialD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`indices]}, (
        InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
       {SubscriptBox[
         \((\*MakeBoxes[TensorCalculus5`Tensorial`Private`t, 
              TensorCalculus5`Tensorial`Private`form])\), 
         RowBox[{TensorCalculus5`Tensorial`Private`DifSym, 
           RowBox[(MakeBoxes[#1, 
               TensorCalculus5`Tensorial`Private`form] & ) /@ 
             TensorCalculus5`Tensorial`Private`windx]}]], 
        PartialD[TensorCalculus5`Tensorial`Private`t, 
         TensorCalculus5`Tensorial`Private`indices]}]]
 
MakeBoxes[ExteriorD[(TensorForms1V6`TensorialForms`Private`x_Symbol) | 
       (TensorForms1V6`TensorialForms`Private`x_Tensor) | 
       (TensorForms1V6`TensorialForms`Private`x_ExteriorD)], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[DoubleStruckD] \[VeryThinSpace] 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`x, 
            TensorForms1V6`TensorialForms`Private`form]\), ExteriorD, 
        Rule[SyntaxForm, "Wedge"]], ExteriorD[
       TensorForms1V6`TensorialForms`Private`x]}
 
MakeBoxes[ExteriorD[TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[DoubleStruckD] \[NegativeThinSpace] 
          \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr, 
              TensorForms1V6`TensorialForms`Private`form])\)\), ExteriorD, 
        Rule[SyntaxForm, "Wedge"]], ExteriorD[
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules_][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := 
    Switch[Head[TensorForms1V6`TensorialForms`Private`expr], 
     Symbol | Tensor | ExteriorD, (InterpretationBox[#1, Slot[2]] & ) @@ {
       \(\*StyleBox["\[SixPointedStar]", Rule[FontSize, 16]] 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr]\), 
       HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        TensorForms1V6`TensorialForms`Private`expr]}, _, (
       InterpretationBox[#1, Slot[2]] & ) @@ {
       \(\*StyleBox["\[SixPointedStar]", Rule[FontSize, 16]](
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`expr])\), 
       HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        TensorForms1V6`TensorialForms`Private`expr]}]
 
MakeBoxes[FormIntegral[TensorForms1V6`TensorialForms`Private`\[Alpha]_, 
      TensorForms1V6`TensorialForms`Private`surface_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      TagBox[\(\[Integral]\_\(\*MakeBoxes[TensorForms1V6`TensorialForms`Pr\
ivate`surface, TensorForms1V6`TensorialForms`Private`form]\) 
          \*MakeBoxes[TensorForms1V6`TensorialForms`Private`\[Alpha], 
            TensorForms1V6`TensorialForms`Private`form]\), FormIntegral, 
        Rule[SyntaxForm, "Integrate"]], FormIntegral[
       TensorForms1V6`TensorialForms`Private`\[Alpha], 
       TensorForms1V6`TensorialForms`Private`surface]}
 
MakeBoxes[FormIntegralDomain[TensorForms1V6`TensorialForms`Private`S_, 
      TensorForms1V6`TensorialForms`Private`domain_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \(\*MakeBoxes[TensorForms1V6`TensorialForms`Private`S, 
           TensorForms1V6`TensorialForms`Private`form]\), 
      FormIntegralDomain[TensorForms1V6`TensorialForms`Private`S, 
       TensorForms1V6`TensorialForms`Private`domain]}
 
MakeBoxes[grad[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[grad[TensorForms1V6`TensorialForms`Private`expr]], 
      grad[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[curl[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[curl[TensorForms1V6`TensorialForms`Private`expr]], 
      curl[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[div[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`expr_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {MakeBoxes[div[TensorForms1V6`TensorialForms`Private`expr]], 
      div[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`expr]}
 
MakeBoxes[cross[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`a_, 
      TensorForms1V6`TensorialForms`Private`b_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`a, 
           TensorForms1V6`TensorialForms`Private`form]) \[Cross] (
         \*MakeBoxes[TensorForms1V6`TensorialForms`Private`b, 
           TensorForms1V6`TensorialForms`Private`form])\), 
      cross[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`a, 
       TensorForms1V6`TensorialForms`Private`b]}
 
MakeBoxes[dot[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`a_, 
      TensorForms1V6`TensorialForms`Private`b_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ {
      \((\*MakeBoxes[TensorForms1V6`TensorialForms`Private`a, 
           TensorForms1V6`TensorialForms`Private`form]) . (
         \*MakeBoxes[TensorForms1V6`TensorialForms`Private`b, 
           TensorForms1V6`TensorialForms`Private`form])\), 
      dot[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`a, 
       TensorForms1V6`TensorialForms`Private`b]}
 
MakeBoxes[laplacian[TensorForms1V6`TensorialForms`Private`args__][
      TensorForms1V6`TensorialForms`Private`f_], 
     TensorForms1V6`TensorialForms`Private`form:StandardForm | 
       TraditionalForm] := (InterpretationBox[#1, Slot[2]] & ) @@ 
     {RowBox[{SuperscriptBox["\[Del]", 2], MakeBoxes[
         TensorForms1V6`TensorialForms`Private`f]}], 
      laplacian[TensorForms1V6`TensorialForms`Private`args][
       TensorForms1V6`TensorialForms`Private`f]}
 
MakeBoxes[zero, TensorCalculus5`Tensorial`Private`form$:
      StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[Editable, False]] & ) @@ 
     {MakeBoxes[0, TensorCalculus5`Tensorial`Private`form$], zero}
 
MakeBoxes[Slash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["/"] \*AdjustmentBox[ToBoxes[symbol], 
           Rule[BoxMargins, List[List[-0.8`, 0], List[0.`, 0]]]]\), 
      Slash[symbol]}
 
MakeBoxes[PartialDSlash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["/"] \*AdjustmentBox["\[PartialD]", 
           Rule[BoxMargins, List[List[-0.8`, 0.`], List[0.`, 0.`]]]] 
         \*ToBoxes[symbol]\), PartialDSlash[symbol]}
 
MakeBoxes[CovariantDSlash[symbol_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\*ToBoxes["\[ScriptCapitalD]"] 
         \*AdjustmentBox["/", Rule[BoxMargins, 
            List[List[-0.6666666666666666`, -0.6666`], List[0.`, 0.`]]]][
         \*ToBoxes[symbol]]\), CovariantDSlash[symbol]}
 
MakeBoxes[GammaSlash[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Overscript[Style[a, Bold], "/"]], GammaSlash[a]}
 
MakeBoxes[IntegralOp[v_, a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript["\[Integral]", Column[v]][a]], IntegralOp[v, a]}
 
MakeBoxes[Transpose[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Superscript[a, T]], 
      Transpose[a]}
 
MakeBoxes[ConjugateTranspose[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[SuperDagger[a]], 
      ConjugateTranspose[a]}
 
MakeBoxes[Conjugate[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[SuperStar[a]], Conjugate[a]}
 
MakeBoxes[xPartialD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[PartialD]"], b][a]], xPartialD[a, b]}
 
MakeBoxes[xPartialDu[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar["\[PartialD]"], b][a]], xPartialDu[a, b]}
 
MakeBoxes[xCovariantD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[GothicCapitalD]"], b][a]], 
      xCovariantD[a, b]}
 
MakeBoxes[xCovariantDu[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar["\[GothicCapitalD]"], b][a]], 
      xCovariantDu[a, b]}
 
MakeBoxes[xLieD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[ScriptCapitalL]"], b][a]], xLieD[a, b]}
 
MakeBoxes[deltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[Delta]"], b][a]], deltaD[a, b]}
 
MakeBoxes[xDeltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["\[Del]"], b][a]], xDeltaD[a, b]}
 
MakeBoxes[xDeltaD[s_, a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Subscript[UnderBar[s], b][a]], 
      xDeltaD[s, a, b]}
 
MakeBoxes[xD[s_][a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[Subscript[UnderBar[s], b][a]], 
      xD[s][a, b]}
 
MakeBoxes[xDu[s_][a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Superscript[UnderBar[s], b][a]], xDu[s][a, b]}
 
MakeBoxes[xDDeltaD[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Subscript[UnderBar["D"], b][a]], xDDeltaD[a, b]}
 
MakeBoxes[xDiscreteDelta[a_, b_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar["\[Delta]"][a, b]], 
      xDiscreteDelta[a, b]}
 
MakeBoxes[xSum[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Underscript[UnderBar["\[Sum]"], Column[{b}]][a]], xSum[a, b]}
 
MakeBoxes[xProduct[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ 
     {ToBoxes[Underscript[UnderBar["\[Product]"], Column[{b}]][a]], 
      xProduct[a, b]}
 
MakeBoxes[Bra[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightBracketingBar]", Bold]\)\), Bra[b]}
 
MakeBoxes[Ket[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftBracketingBar]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), Ket[b]}
 
MakeBoxes[BraKet[b__, c__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["|", Bold]\) \(\*ToBoxes[c]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), BraKet[b, c]}
 
MakeBoxes[BraKet[b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \(\(\*StyleBox["\[LeftAngleBracket]", Bold]\) \(\*ToBoxes[b]\) 
         \(\*StyleBox["\[RightAngleBracket]", Bold]\)\), BraKet[b]}
 
MakeBoxes[CommutatorM[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {
      \([\(\*ToBoxes[a]\), \(\*ToBoxes[b]\)]\), CommutatorM[a, b]}
 
MakeBoxes[CommutatorP[a_, b__], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {\({\*ToBoxes[a], \*ToBoxes[b]}\), 
      CommutatorP[a, b]}
 
MakeBoxes[HodgeStar[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar["*"][a]], 
      HodgeStar[a]}
 
MakeBoxes[DifForm[a_], form:StandardForm | TraditionalForm] := (
      InterpretationBox[#1, Slot[2], Rule[SyntaxForm, Automatic], 
        Rule[Editable, False]] & ) @@ {ToBoxes[UnderBar[d][a]], DifForm[a]}
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_List, 
     TensorCalculus5`Tensorial`Private`v__] := 
    (PartialD[{TensorCalculus5`Tensorial`Private`x, 
         TensorCalculus5`Tensorial`Private`\[Delta], 
         TensorCalculus5`Tensorial`Private`g, 
         TensorCalculus5`Tensorial`Private`\[CapitalGamma]}][#1, 
       TensorCalculus5`Tensorial`Private`v] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, _, _}][
     TotalD[Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`a_}, {Void}], 
      TensorCalculus5`Tensorial`Private`t_], 
     Tensor[TensorCalculus5`Tensorial`Private`x_, 
      {TensorCalculus5`Tensorial`Private`b_}, {Void}]] := 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_, 
     TensorCalculus5`Tensorial`Private`v_List] := 
    D[TensorCalculus5`Tensorial`Private`w, Sequence @@ 
       TensorCalculus5`Tensorial`Private`v] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`w] && 
      And @@ (FreeTensorQ[#1] & ) /@ TensorCalculus5`Tensorial`Private`v
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`w_, 
     TensorCalculus5`Tensorial`Private`v_] := 
    D[TensorCalculus5`Tensorial`Private`w, 
      TensorCalculus5`Tensorial`Private`v] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`w] && 
      FreeTensorQ[TensorCalculus5`Tensorial`Private`v]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`s_SeriesData, 
     TensorCalculus5`Tensorial`Private`v_List] := 
    D[TensorCalculus5`Tensorial`Private`s, Sequence @@ 
      TensorCalculus5`Tensorial`Private`v]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     TensorCalculus5`Tensorial`Private`s_SeriesData, 
     TensorCalculus5`Tensorial`Private`v_] := 
    D[TensorCalculus5`Tensorial`Private`s, 
     TensorCalculus5`Tensorial`Private`v]
 
PartialD[TensorCalculus5`Tensorial`Private`labs_List][
      (TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`b_), 
      TensorCalculus5`Tensorial`Private`c_] /; 
     FreeQ[TensorCalculus5`Tensorial`Private`a, Tensor[__] | 
        TensorCalculus5`Tensorial`Private`c] && 
      FreeQ[TensorCalculus5`Tensorial`Private`c, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     PartialD[TensorCalculus5`Tensorial`Private`labs][
      TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`c]
 
PartialD[_][(TensorCalculus5`Tensorial`Private`a_)?NumericQ, _] := 0
 
PartialD[_][TensorCalculus5`Tensorial`Private`u_Symbol, 
     TensorCalculus5`Tensorial`Private`v__] := 
    0 /; MemberQ[Attributes[TensorCalculus5`Tensorial`Private`u], Constant]
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     TensorCalculus5`Tensorial`Private`T_Plus, 
     TensorCalculus5`Tensorial`Private`v_] := 
    (PartialD[TensorCalculus5`Tensorial`Private`labels][#1, 
       TensorCalculus5`Tensorial`Private`v] & ) /@ 
     TensorCalculus5`Tensorial`Private`T
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`labels_][
      (TensorCalculus5`Tensorial`Private`w_) . 
       (TensorCalculus5`Tensorial`Private`u_), 
      TensorCalculus5`Tensorial`Private`j_]] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`u + 
      PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] === False
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     (TensorCalculus5`Tensorial`Private`T_)*
      (TensorCalculus5`Tensorial`Private`U_), 
     TensorCalculus5`Tensorial`Private`v_] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`T, 
        TensorCalculus5`Tensorial`Private`v]*
       TensorCalculus5`Tensorial`Private`U + 
      TensorCalculus5`Tensorial`Private`T*
       PartialD[TensorCalculus5`Tensorial`Private`labels][
        TensorCalculus5`Tensorial`Private`U, 
        TensorCalculus5`Tensorial`Private`v] /; 
     VectorQ[TensorCalculus5`Tensorial`Private`v] == False
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
     TensorCalculus5`Tensorial`Private`w_, {}] := 
    TensorCalculus5`Tensorial`Private`w
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
     TensorCalculus5`Tensorial`Private`w_, 
     {TensorCalculus5`Tensorial`Private`i_}] := 
    PartialD[TensorCalculus5`Tensorial`Private`labs][
     TensorCalculus5`Tensorial`Private`w, TensorCalculus5`Tensorial`Private`i]
 
PartialD[TensorCalculus5`Tensorial`Private`labs_][
      TensorCalculus5`Tensorial`Private`T_, 
      TensorCalculus5`Tensorial`Private`u_List] /; 
      !OrderedQ[TensorCalculus5`Tensorial`Private`u] := 
    PartialD[TensorCalculus5`Tensorial`Private`labs][
     TensorCalculus5`Tensorial`Private`T, 
     Sort[TensorCalculus5`Tensorial`Private`u]]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`i_}, {Void}], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`j_}, {Void}]] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`j] = 
    Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
     {TensorCalculus5`Tensorial`Private`i, Void}, 
     {Void, TensorCalculus5`Tensorial`Private`j}]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, {Void}, 
       {TensorCalculus5`Tensorial`Private`i_}], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, {Void}, 
       {TensorCalculus5`Tensorial`Private`j_}]] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`j] = 
    Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
     {TensorCalculus5`Tensorial`Private`j, Void}, 
     {Void, TensorCalculus5`Tensorial`Private`i}]
 
HoldPattern[PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`U1:{__}, 
       TensorCalculus5`Tensorial`Private`U2_], 
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`V__]]] := 
    Module[{TensorCalculus5`Tensorial`Private`ind}, 
      TensorCalculus5`Tensorial`Private`ind = MapThread[
         TensorCalculus5`Tensorial`Private`FilterPD, MapAt[Reverse[#1] & , 
          {{TensorCalculus5`Tensorial`Private`U1, 
            TensorCalculus5`Tensorial`Private`U2}, 
           {TensorCalculus5`Tensorial`Private`V}}, 2], 2]; 
       Times @@ (Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
           {#1[[1]], Void}, {Void, #1[[2]]}] & ) /@ 
         Transpose[TensorCalculus5`Tensorial`Private`ind]] /; 
     Count[TensorCalculus5`Tensorial`Private`ind = 
         MapThread[TensorCalculus5`Tensorial`Private`FilterPD, 
          MapAt[Reverse[#1] & , {{TensorCalculus5`Tensorial`Private`U1, 
             TensorCalculus5`Tensorial`Private`U2}, 
            {TensorCalculus5`Tensorial`Private`V}}, 2], 2], 
        TensorCalculus5`Tensorial`Private`FilterPD[__], 2] == 0 && 
      And @@ MapThread[Head[#1] === Head[#2] & , 
        Append[Transpose[TensorCalculus5`Tensorial`Private`ind], {1, 2}]]
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
       TensorCalculus5`Tensorial`Private`\[Delta]_, 
       TensorCalculus5`Tensorial`Private`g_, 
       TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
     Tensor[TensorCalculus5`Tensorial`Private`\[Delta]_, __], _] := 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, 
        TensorCalculus5`Tensorial`Private`\[Delta]_, 
        TensorCalculus5`Tensorial`Private`g_, 
        TensorCalculus5`Tensorial`Private`\[CapitalGamma]_}][
      Tensor[TensorCalculus5`Tensorial`Private`x_, 
       {TensorCalculus5`Tensorial`Private`i_}, {Void}], 
      {___, Tensor[TensorCalculus5`Tensorial`Private`x_, 
        {TensorCalculus5`Tensorial`Private`j_}, {Void}], ___, 
       Tensor[TensorCalculus5`Tensorial`Private`x_, 
        {TensorCalculus5`Tensorial`Private`k_}, {Void}], ___}] /; 
     Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`j] && 
      Head[TensorCalculus5`Tensorial`Private`i] === 
       Head[TensorCalculus5`Tensorial`Private`k] = 0
 
PartialD[{TensorCalculus5`Tensorial`Private`x_, _, _, _}][
      TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`expr_] /; 
      !MatchQ[TensorCalculus5`Tensorial`Private`expr, 
       Tensor[TensorCalculus5`Tensorial`Private`x, 
        {TensorCalculus5`Tensorial`Private`i_}, {Void}]] := 1
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`labels_][
       TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`u_]], 
     TensorCalculus5`Tensorial`Private`v_] := 
    PartialD[TensorCalculus5`Tensorial`Private`labels][
     TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`v, 
       TensorCalculus5`Tensorial`Private`u}]]
 
PartialD[TensorCalculus5`Tensorial`Private`labels_][
     TensorCalculus5`Tensorial`Private`T_Times, 
     TensorCalculus5`Tensorial`Private`u_List] := 
    Fold[PartialD[TensorCalculus5`Tensorial`Private`labels][#1, #2] & , 
     TensorCalculus5`Tensorial`Private`T, TensorCalculus5`Tensorial`Private`u]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g_], 
      TensorCalculus5`Tensorial`Private`t_List]] := 
    Fold[PartialD[TensorCalculus5`Tensorial`Private`lab][#1, #2] & , 
      TensorCalculus5`Tensorial`Private`f[
       TensorCalculus5`Tensorial`Private`g], 
      TensorCalculus5`Tensorial`Private`t] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
       TensorCalculus5`Tensorial`Private`f]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`F_)[
       TensorCalculus5`Tensorial`Private`g_], 
      TensorCalculus5`Tensorial`Private`T_]] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`F][
       TensorCalculus5`Tensorial`Private`g]*
      PartialD[TensorCalculus5`Tensorial`Private`lab][
       TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`T] /; 
      !(MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`F] || 
       MatchQ[TensorCalculus5`Tensorial`Private`g, 
        Tensor[TensorCalculus5`Tensorial`Private`lab[[1]], 
         {(TensorCalculus5`Tensorial`Private`i_)?( !BaseIndexQ[#1] & )}, 
         {Void}]])
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`g_)^
       (TensorCalculus5`Tensorial`Private`n_), 
      TensorCalculus5`Tensorial`Private`T_]] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`T] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`T] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`T]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`g_)^
       (TensorCalculus5`Tensorial`Private`n_), 
      {TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`S__}]] := 
    PartialD[TensorCalculus5`Tensorial`Private`lab][
     Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`T] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       PartialD[TensorCalculus5`Tensorial`Private`lab][
        TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`T], 
     {TensorCalculus5`Tensorial`Private`S}]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g__], 
      {TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`s__}]] := 
    PartialD[TensorCalculus5`Tensorial`Private`lab][
      PartialD[TensorCalculus5`Tensorial`Private`lab][
       TensorCalculus5`Tensorial`Private`f[
        TensorCalculus5`Tensorial`Private`g], 
       TensorCalculus5`Tensorial`Private`t], 
      {TensorCalculus5`Tensorial`Private`s}] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`lab_][
      (TensorCalculus5`Tensorial`Private`f_)[
       TensorCalculus5`Tensorial`Private`g__], 
      TensorCalculus5`Tensorial`Private`t_]] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*
         PartialD[TensorCalculus5`Tensorial`Private`lab][#2, 
          TensorCalculus5`Tensorial`Private`t] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, TotalD, AbsoluteD, LieD, CovariantD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t] && 
       !(Length[{TensorCalculus5`Tensorial`Private`g}] == 1 && 
        MatchQ[TensorCalculus5`Tensorial`Private`g, 
         Tensor[TensorCalculus5`Tensorial`Private`lab[[1]], 
          {(TensorCalculus5`Tensorial`Private`i_)?( !BaseIndexQ[#1] & )}, 
          {Void}]])
 
PartialD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
PartialD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`indices__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    PartialD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`indices_] := 
    PartialD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`indices] + 
     PartialD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`indices_] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`a}, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     PartialD[TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`indices]
 
PartialD[(TensorCalculus5`Tensorial`Private`t1_)*
       (TensorCalculus5`Tensorial`Private`t2__), 
      TensorCalculus5`Tensorial`Private`l_List] /; 
     Length[TensorCalculus5`Tensorial`Private`l] > 1 := 
    PartialD[PartialD[TensorCalculus5`Tensorial`Private`t1*
       TensorCalculus5`Tensorial`Private`t2, 
      Rest[TensorCalculus5`Tensorial`Private`l]], 
     First[TensorCalculus5`Tensorial`Private`l]]
 
PartialD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_PartialD))*
      (TensorCalculus5`Tensorial`Private`t2__), 
     {(TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ} | 
      (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ] := 
    PartialD[TensorCalculus5`Tensorial`Private`t1, 
       TensorCalculus5`Tensorial`Private`i]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*
      PartialD[Times @@ {TensorCalculus5`Tensorial`Private`t2}, 
       TensorCalculus5`Tensorial`Private`i]
 
PartialD[HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
       (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ]], 
     (TensorCalculus5`Tensorial`Private`j_)?SymbolicIndexQ] := 
    PartialD[TensorCalculus5`Tensorial`Private`t, 
     {TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`j}]
 
PartialD[HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`l_List]], 
     TensorCalculus5`Tensorial`Private`j_] := 
    PartialD[TensorCalculus5`Tensorial`Private`t, 
     Flatten[{TensorCalculus5`Tensorial`Private`l, 
       TensorCalculus5`Tensorial`Private`j}]]
 
PartialD[(TensorCalculus5`Tensorial`Private`w_) . 
      (TensorCalculus5`Tensorial`Private`u_), 
     TensorCalculus5`Tensorial`Private`j_] := 
    PartialD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`u + 
      PartialD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j] . 
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] === False
 
PartialD[TensorCalculus5`Tensorial`Private`w_, {}] := 
    TensorCalculus5`Tensorial`Private`w
 
PartialD[TensorCalculus5`Tensorial`Private`w_, 
     {TensorCalculus5`Tensorial`Private`i_}] := 
    PartialD[TensorCalculus5`Tensorial`Private`w, 
     TensorCalculus5`Tensorial`Private`i]
 
SyntaxInformation[PartialD] = {"ArgumentsPattern" -> {__}}
 
PartialD /: PartialD::usage = "PartialD[tensor, i]  calculates the partial \
derivative of the tensor with respect to the coordinate of index i. \n \
PartialD[tensor, {i,j,...}] represents the covariant derivative with repect \
to the list of indices.\nOn display a comma precedes the set of partial \
indices.\n\nThis is ambiguous until we expand the partial derivative \
providing the specific coordinate positions using ExpandPartialD. The \
derivative in this form does can not calculate partial derivatives of \
components of tensors because the coordinate positions and the Kronecker \
tensor are not yet specified. Symbols are considered constants when PartialD \
is used in this form.\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][tensor, \
Tensor[x,{i},{Void}]] calculates the partial derivative respect to the \
ith-coordinate position using coordinate label x and Kronecker tensor label \
\[Delta].\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][tensor, \
{Tensor[x,{i},{Void}]..}] calculates the higher order partial derivative over \
the coordinate positions. Symbols are not considered constants when the \
derivative is carried out over coordinates in this form of the partial \
derivative (with labels)\n\nPartialD[{x,\[Delta],g,\[CapitalGamma]}][expr, v] \
is the partial derivative of expr with respect to the symbol v. When expr is \
free from tensor objects PartialD is reduced to the standard Mathematica \
partial derivative function D."
 
TotalD[\[CircleTimes](TensorCalculus5`Tensorial`Private`args__), 
     TensorCalculus5`Tensorial`Private`t__] := 
    Module[{TensorCalculus5`Tensorial`Private`n = 
       Length[{TensorCalculus5`Tensorial`Private`args}], 
      TensorCalculus5`Tensorial`Private`i}, 
     Sum[CircleTimes @@ Join[{TensorCalculus5`Tensorial`Private`args}[[
         Range[1, TensorCalculus5`Tensorial`Private`i - 1]]], 
        {TotalD[{TensorCalculus5`Tensorial`Private`args}[[
           TensorCalculus5`Tensorial`Private`i]], 
          TensorCalculus5`Tensorial`Private`t]}, 
        {TensorCalculus5`Tensorial`Private`args}[[
         Range[TensorCalculus5`Tensorial`Private`i + 1, 
          TensorCalculus5`Tensorial`Private`n]]]], 
      {TensorCalculus5`Tensorial`Private`i, 1, 
       TensorCalculus5`Tensorial`Private`n}]]
 
TotalD[TensorCalculus5`Tensorial`Private`w_List, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_List] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Equal, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Equal] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)?NumericQ, ___] := 0
 
TotalD[TensorCalculus5`Tensorial`Private`u_, 
     TensorCalculus5`Tensorial`Private`u_] := 1
 
TotalD[TensorCalculus5`Tensorial`Private`u_Symbol, 
     TensorCalculus5`Tensorial`Private`v___] := 
    0 /; MemberQ[Attributes[TensorCalculus5`Tensorial`Private`u], Constant]
 
TotalD[TensorCalculus5`Tensorial`Private`w_Plus, 
     TensorCalculus5`Tensorial`Private`j_] := 
    (TotalD[#1, TensorCalculus5`Tensorial`Private`j] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
TotalD[TensorCalculus5`Tensorial`Private`w_Plus] := 
    (TotalD[#1] & ) /@ TensorCalculus5`Tensorial`Private`w
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`j_] := 
    TotalD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`j]*
       TensorCalculus5`Tensorial`Private`u + 
      TotalD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`j]*
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] == False
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_)] := 
    TotalD[TensorCalculus5`Tensorial`Private`w]*
       TensorCalculus5`Tensorial`Private`u + 
      TotalD[TensorCalculus5`Tensorial`Private`u]*
       TensorCalculus5`Tensorial`Private`w /; 
     VectorQ[TensorCalculus5`Tensorial`Private`j] == False
 
TotalD[(TensorCalculus5`Tensorial`Private`w_)?FreeTensorQ, 
     TensorCalculus5`Tensorial`Private`t_] := 
    Dt[TensorCalculus5`Tensorial`Private`w, 
      TensorCalculus5`Tensorial`Private`t] /; 
     Head[TensorCalculus5`Tensorial`Private`w] =!= PartialD && 
      Head[TensorCalculus5`Tensorial`Private`w] =!= TotalD && 
      Head[Head[TensorCalculus5`Tensorial`Private`w]] =!= PartialD && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[\[CircleTimes](TensorCalculus5`Tensorial`Private`args__)] := 
    Module[{TensorCalculus5`Tensorial`Private`n = 
       Length[{TensorCalculus5`Tensorial`Private`args}], 
      TensorCalculus5`Tensorial`Private`i}, 
     Sum[CircleTimes @@ Join[{TensorCalculus5`Tensorial`Private`args}[[
         Range[1, TensorCalculus5`Tensorial`Private`i - 1]]], 
        {TotalD[{TensorCalculus5`Tensorial`Private`args}[[
           TensorCalculus5`Tensorial`Private`i]]]}, 
        {TensorCalculus5`Tensorial`Private`args}[[
         Range[TensorCalculus5`Tensorial`Private`i + 1, 
          TensorCalculus5`Tensorial`Private`n]]]], 
      {TensorCalculus5`Tensorial`Private`i, 1, 
       TensorCalculus5`Tensorial`Private`n}]]
 
TotalD[(TensorCalculus5`Tensorial`Private`w_)?FreeTensorQ] := 
    Dt[TensorCalculus5`Tensorial`Private`w] /; 
     Head[TensorCalculus5`Tensorial`Private`w] =!= PartialD && 
      Head[TensorCalculus5`Tensorial`Private`w] =!= TotalD && 
      Head[Head[TensorCalculus5`Tensorial`Private`w]] =!= PartialD && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`g_)^
      (TensorCalculus5`Tensorial`Private`n_), 
     TensorCalculus5`Tensorial`Private`t_] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       TotalD[TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`t] + 
      Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
        TensorCalculus5`Tensorial`Private`n]*
       TotalD[TensorCalculus5`Tensorial`Private`n, 
        TensorCalculus5`Tensorial`Private`t] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`g_)^
      (TensorCalculus5`Tensorial`Private`n_)] := 
    Derivative[1, 0][Power][TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`n]*
      TotalD[TensorCalculus5`Tensorial`Private`g] + 
     Derivative[0, 1][Power][TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`n]*
      TotalD[TensorCalculus5`Tensorial`Private`n]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g_], 
     TensorCalculus5`Tensorial`Private`t_] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`f][
       TensorCalculus5`Tensorial`Private`g]*
      TotalD[TensorCalculus5`Tensorial`Private`g, 
       TensorCalculus5`Tensorial`Private`t] /; 
     TensorCalculus5`Tensorial`Private`f =!= Tensor && 
      TensorCalculus5`Tensorial`Private`f =!= Times && 
      TensorCalculus5`Tensorial`Private`f =!= Plus && 
      TensorCalculus5`Tensorial`Private`f =!= TotalD && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g_]] := 
    Derivative[1][TensorCalculus5`Tensorial`Private`f][
       TensorCalculus5`Tensorial`Private`g]*
      TotalD[TensorCalculus5`Tensorial`Private`g] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g__], 
     TensorCalculus5`Tensorial`Private`t_] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*TotalD[#2, 
          TensorCalculus5`Tensorial`Private`t] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]] && 
       !VectorQ[TensorCalculus5`Tensorial`Private`t]
 
TotalD[(TensorCalculus5`Tensorial`Private`f_)[
      TensorCalculus5`Tensorial`Private`g__]] := 
    Plus @@ MapThread[Derivative[Sequence @@ #1][
           TensorCalculus5`Tensorial`Private`f][
          TensorCalculus5`Tensorial`Private`g]*TotalD[#2] & , 
       {IdentityMatrix[Length[{TensorCalculus5`Tensorial`Private`g}]], 
        {TensorCalculus5`Tensorial`Private`g}}] /; 
      !MemberQ[{Tensor, Times, Plus, TotalD, AbsoluteD, LieD}, 
        TensorCalculus5`Tensorial`Private`f] && 
       !MatchQ[TensorCalculus5`Tensorial`Private`f, PartialD[_]]
 
TotalD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`j_List] := Fold[TotalD[#1, #2] & , 
     TensorCalculus5`Tensorial`Private`w*TensorCalculus5`Tensorial`Private`u, 
     TensorCalculus5`Tensorial`Private`j]
 
TotalD[HoldPattern[TotalD[TensorCalculus5`Tensorial`Private`T_, 
       TensorCalculus5`Tensorial`Private`u_]], 
     TensorCalculus5`Tensorial`Private`v_] := 
    TotalD[TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`u, 
       TensorCalculus5`Tensorial`Private`v}]]
 
TotalD[TensorCalculus5`Tensorial`Private`T_, 
     TensorCalculus5`Tensorial`Private`u_List] := 
    Fold[TotalD[#1, #2] & , TensorCalculus5`Tensorial`Private`T, 
      TensorCalculus5`Tensorial`Private`u] /; 
     Head[TensorCalculus5`Tensorial`Private`T] =!= Tensor
 
SyntaxInformation[TotalD] = {"ArgumentsPattern" -> {__}}
 
TotalD /: TotalD::usage = "TotalD[expr, t] calculates the total derivative of \
expr with respect to the parameter t. Symbols are not considered constants \
unless they have the Constant attribute.\n \nTotalD[expr, {t,v,...}] \
represents the covariant derivative with repect to the list of parameters \n \
\nThis derivative can be we expanded in terms of its partial derivative over \
the coordinate positions using ExpandTotalD.\n\nTotalD is reduced to the \
standard Mathematica Dt if expr is free from tensor objects."
 
CircleTimes /: CircleTimes::usage = "CircleTimes is used to represent full \
form tensor products. It maintains the order of tensor factors."
 
FreeTensorQ[TensorCalculus5`Tensorial`Private`w_] := 
    Position[TensorCalculus5`Tensorial`Private`w, Tensor] == {}
 
SyntaxInformation[FreeTensorQ] = {"ArgumentsPattern" -> {_}}
 
FreeTensorQ /: FreeTensorQ::usage = 
     "FreeTensorQ[ expr ], gives True or False if expr contains a Tensor "
 
Attributes[Derivative] = {NHoldAll, ReadProtected}
 
AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
AbsoluteD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`difvars__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    AbsoluteD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`difvars_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`difvars] + 
     AbsoluteD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`difvars_] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`a}, Tensor[__]] := 
    TensorCalculus5`Tensorial`Private`a*
     AbsoluteD[TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`difvars]
 
AbsoluteD[(TensorCalculus5`Tensorial`Private`t1_Tensor)*
       (TensorCalculus5`Tensorial`Private`t2__Tensor), 
      TensorCalculus5`Tensorial`Private`l_List] /; 
     Length[TensorCalculus5`Tensorial`Private`l] > 1 := 
    AbsoluteD[AbsoluteD[TensorCalculus5`Tensorial`Private`t1*
       TensorCalculus5`Tensorial`Private`t2, 
      Drop[TensorCalculus5`Tensorial`Private`l, -1]], 
     Last[TensorCalculus5`Tensorial`Private`l]]
 
AbsoluteD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_AbsoluteD) | 
       (TensorCalculus5`Tensorial`Private`t1_TotalD))*
      (TensorCalculus5`Tensorial`Private`t2__), 
     {TensorCalculus5`Tensorial`Private`i_} | 
      (TensorCalculus5`Tensorial`Private`i_)] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t1, 
       TensorCalculus5`Tensorial`Private`i]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*
      AbsoluteD[Times @@ {TensorCalculus5`Tensorial`Private`t2}, 
       TensorCalculus5`Tensorial`Private`i]
 
AbsoluteD[HoldPattern[AbsoluteD[TensorCalculus5`Tensorial`Private`t_, 
       TensorCalculus5`Tensorial`Private`i_]], 
     TensorCalculus5`Tensorial`Private`j_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t, 
     {TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`j}]
 
AbsoluteD[0, TensorCalculus5`Tensorial`Private`j_] := 
    AbsoluteD[TensorCalculus5`Tensorial`Private`t_, 
     Flatten[{TensorCalculus5`Tensorial`Private`l, 
       TensorCalculus5`Tensorial`Private`j}]]
 
AbsoluteD[Tensor[TensorCalculus5`Tensorial`Private`T_], 
      TensorCalculus5`Tensorial`Private`j_] /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`j] && 
      FreeQ[TensorCalculus5`Tensorial`Private`T, Tensor] := 
    TotalD[Tensor[TensorCalculus5`Tensorial`Private`T], 
     TensorCalculus5`Tensorial`Private`j]
 
AbsoluteD[Tensor[TensorCalculus5`Tensorial`Private`T_], 
     {TensorCalculus5`Tensorial`Private`j_}] := 
    TotalD[Tensor[TensorCalculus5`Tensorial`Private`T], 
     TensorCalculus5`Tensorial`Private`j]
 
SyntaxInformation[AbsoluteD] = {"ArgumentsPattern" -> {_, _}}
 
AbsoluteD /: AbsoluteD::usage = "AbsoluteD[tensor, t]  represents the \
absolute derivative of the tensor with respect to the parameter t. \
\nAbsoluteD[tensor, {t,v,...}] represents the absolute derivative with repect \
to the list of parameters \nThis derivative is ambiguous until we expand the \
partial derivative providing the specific coordinate positions using \
ExpandAbsoluteD."
 
LieD[TensorCalculus5`Tensorial`Private`w_Plus, 
     TensorCalculus5`Tensorial`Private`V_] := 
    (LieD[#1, TensorCalculus5`Tensorial`Private`V] & ) /@ 
     TensorCalculus5`Tensorial`Private`w
 
LieD[(TensorCalculus5`Tensorial`Private`u_)?NumericQ, __] := 0
 
LieD[TensorCalculus5`Tensorial`Private`u_Symbol, _] := 0
 
LieD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`V_] := 
    LieD[TensorCalculus5`Tensorial`Private`w, 
        TensorCalculus5`Tensorial`Private`V]*
       TensorCalculus5`Tensorial`Private`u + 
      LieD[TensorCalculus5`Tensorial`Private`u, 
        TensorCalculus5`Tensorial`Private`V]*
       TensorCalculus5`Tensorial`Private`w /; 
      !VectorQ[TensorCalculus5`Tensorial`Private`V]
 
LieD[(TensorCalculus5`Tensorial`Private`u_)*
      (TensorCalculus5`Tensorial`Private`w_), 
     TensorCalculus5`Tensorial`Private`V_List] := 
    Fold[LieD[#1, #2] & , TensorCalculus5`Tensorial`Private`w*
      TensorCalculus5`Tensorial`Private`u, 
     TensorCalculus5`Tensorial`Private`V]
 
LieD[LieD[TensorCalculus5`Tensorial`Private`T_, 
      TensorCalculus5`Tensorial`Private`U_], 
     TensorCalculus5`Tensorial`Private`V_] := 
    LieD[TensorCalculus5`Tensorial`Private`T, 
     Flatten[{TensorCalculus5`Tensorial`Private`U, 
       TensorCalculus5`Tensorial`Private`V}]]
 
LieD[TensorCalculus5`Tensorial`Private`T_, 
     TensorCalculus5`Tensorial`Private`U_List] := 
    Fold[LieD[#1, #2] & , TensorCalculus5`Tensorial`Private`T, 
      TensorCalculus5`Tensorial`Private`U] /; 
     Head[TensorCalculus5`Tensorial`Private`T] =!= Tensor
 
SyntaxInformation[LieD] = {"ArgumentsPattern" -> {_, _}}
 
LieD /: LieD::usage = "LieD[tensor, V]  represents the Lie derivative of the \
tensor with respect to the vector field V.\nLieD[tensor, {U,V...}] represents \
the Lie derivative with repect to the list of vector fields.\nThis derivative \
is ambiguous until we expand the partial derivatives, providing the specific \
coordinate positions using ExpandLieD."
 
TensorCalculus5`Tensorial`Private`FilterPD[Void, Void] := Sequence[]
 
TensorCalculus5`Tensorial`Private`FilterPD[
     TensorCalculus5`Tensorial`Private`i_, Void] := 
    TensorCalculus5`Tensorial`Private`i
 
TensorCalculus5`Tensorial`Private`FilterPD[Void, 
     TensorCalculus5`Tensorial`Private`i_] := 
    TensorCalculus5`Tensorial`Private`i
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     (TensorCalculus5`Tensorial`Private`i_)?SymbolicIndexQ] := 
    CovariantD[TensorCalculus5`Tensorial`Private`tensor, {Void}, 
     {TensorCalculus5`Tensorial`Private`i}]
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     TensorCalculus5`Tensorial`Private`downs:{_?SymbolicIndexQ..}] := 
    Module[{TensorCalculus5`Tensorial`Private`l = 
       Length[TensorCalculus5`Tensorial`Private`downs]}, 
     CovariantD[TensorCalculus5`Tensorial`Private`tensor, 
      Table[Void, {TensorCalculus5`Tensorial`Private`l}], 
      TensorCalculus5`Tensorial`Private`downs]]
 
CovariantD[TensorCalculus5`Tensorial`Private`tensor_, 
     (TensorCalculus5`Tensorial`Private`f_)?udsymQ[
      TensorCalculus5`Tensorial`Private`indices__]] := 
    CovariantD[TensorCalculus5`Tensorial`Private`tensor, 
     Parseud[TensorCalculus5`Tensorial`Private`f[
       TensorCalculus5`Tensorial`Private`indices]]]
 
CovariantD[TensorCalculus5`Tensorial`Private`expr_, __] /; 
     FreeQ[{TensorCalculus5`Tensorial`Private`expr}, Tensor[__]] := 0
 
CovariantD[TensorCalculus5`Tensorial`Private`expr_, 
      TensorCalculus5`Tensorial`Private`indices__] /; 
      !Expand[TensorCalculus5`Tensorial`Private`expr] === 
       TensorCalculus5`Tensorial`Private`expr := 
    CovariantD[Expand[TensorCalculus5`Tensorial`Private`expr], 
     TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[HoldPattern[CovariantD[TensorCalculus5`Tensorial`Private`expr_, 
       TensorCalculus5`Tensorial`Private`iup_, 
       TensorCalculus5`Tensorial`Private`idown_]], 
     TensorCalculus5`Tensorial`Private`jup_, 
     TensorCalculus5`Tensorial`Private`jdown_] := 
    CovariantD[TensorCalculus5`Tensorial`Private`expr, 
     Join[TensorCalculus5`Tensorial`Private`iup, 
      TensorCalculus5`Tensorial`Private`jup], 
     Join[TensorCalculus5`Tensorial`Private`idown, 
      TensorCalculus5`Tensorial`Private`jdown]]
 
CovariantD[(TensorCalculus5`Tensorial`Private`a_) + 
      (TensorCalculus5`Tensorial`Private`b_), 
     TensorCalculus5`Tensorial`Private`indices__] := 
    CovariantD[TensorCalculus5`Tensorial`Private`a, 
      TensorCalculus5`Tensorial`Private`indices] + 
     CovariantD[TensorCalculus5`Tensorial`Private`b, 
      TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[(TensorCalculus5`Tensorial`Private`a_)*
       (TensorCalculus5`Tensorial`Private`t1_), 
      TensorCalculus5`Tensorial`Private`indices__] /; 
     FreeTensorQ[TensorCalculus5`Tensorial`Private`a] := 
    TensorCalculus5`Tensorial`Private`a*CovariantD[
      TensorCalculus5`Tensorial`Private`t1, 
      TensorCalculus5`Tensorial`Private`indices]
 
CovariantD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_CovariantD))*
      (TensorCalculus5`Tensorial`Private`t2_), 
     {TensorCalculus5`Tensorial`Private`upi_}, 
     {TensorCalculus5`Tensorial`Private`downi_}] := 
    CovariantD[TensorCalculus5`Tensorial`Private`t1, 
       {TensorCalculus5`Tensorial`Private`upi}, 
       {TensorCalculus5`Tensorial`Private`downi}]*
      TensorCalculus5`Tensorial`Private`t2 + 
     TensorCalculus5`Tensorial`Private`t1*CovariantD[
       TensorCalculus5`Tensorial`Private`t2, 
       {TensorCalculus5`Tensorial`Private`upi}, 
       {TensorCalculus5`Tensorial`Private`downi}]
 
CovariantD[((TensorCalculus5`Tensorial`Private`t1_Tensor) | 
       (TensorCalculus5`Tensorial`Private`t1_CovariantD))*
      (TensorCalculus5`Tensorial`Private`t2_), 
     TensorCalculus5`Tensorial`Private`upi_, 
     TensorCalculus5`Tensorial`Private`downi_] := 
    Module[{TensorCalculus5`Tensorial`Private`firstind, 
      TensorCalculus5`Tensorial`Private`restind, 
      TensorCalculus5`Tensorial`Private`allinds}, 
     TensorCalculus5`Tensorial`Private`allinds = 
       Transpose[{TensorCalculus5`Tensorial`Private`upi, 
         TensorCalculus5`Tensorial`Private`downi}]; 
      TensorCalculus5`Tensorial`Private`firstind = 
       ({#1} & ) /@ First[TensorCalculus5`Tensorial`Private`allinds]; 
      TensorCalculus5`Tensorial`Private`restind = 
       Transpose[Rest[TensorCalculus5`Tensorial`Private`allinds]]; 
      CovariantD[CovariantD[TensorCalculus5`Tensorial`Private`t1*
         TensorCalculus5`Tensorial`Private`t2, Sequence @@ 
         TensorCalculus5`Tensorial`Private`firstind], 
       Sequence @@ TensorCalculus5`Tensorial`Private`restind]]
 
SyntaxInformation[CovariantD] = {"ArgumentsPattern" -> {_, __}}
 
CovariantD /: CovariantD::usage = "CovariantD[tensor,i] represents the \
covariant derivative of the tensor with respect to the down index \
i.\nCovariantD[tensor, {i,j,...}] represents the covariant derivative with \
repect to the list of down indices indices.\n CovariantD[tensor,ud..[i,j,..] \
represents the covariant and contravariant derivative with respect to the \
indices i, j,.... ud... is a series of 'u' and 'd' characters signifying the \
up and down positions of the covariant indices.\n Symbols are considered \
constants."
 
SymbolicIndexQ[TensorCalculus5`Tensorial`Private`i_] := 
    Module[{TensorCalculus5`Tensorial`Private`ISymbol}, 
     TensorCalculus5`Tensorial`Private`ISymbol[
        TensorCalculus5`Tensorial`Private`s_] := 
       Head[TensorCalculus5`Tensorial`Private`s] === Symbol && 
         !BaseIndexQ[TensorCalculus5`Tensorial`Private`s]; 
      MatchQ[TensorCalculus5`Tensorial`Private`i, 
       _?TensorCalculus5`Tensorial`Private`ISymbol | _?IndexFlavorQ[
         _?TensorCalculus5`Tensorial`Private`ISymbol]]]
 
SyntaxInformation[SymbolicIndexQ] = {"ArgumentsPattern" -> {_}}
 
SymbolicIndexQ /: SymbolicIndexQ::usage = "SymbolicIndexQ[index] returns true \
if index is a Symbol or if index is flavor[i_Symbol] where flavor is a \
currently active flavor."
 
Parseud[(TensorCalculus5`Tensorial`Private`udsym_)[
      TensorCalculus5`Tensorial`Private`args__]] := 
    Module[{TensorCalculus5`Tensorial`Private`symcharacters = 
       Characters[SymbolName[TensorCalculus5`Tensorial`Private`udsym]], 
      TensorCalculus5`Tensorial`Private`numslots, 
      TensorCalculus5`Tensorial`Private`ups, 
      TensorCalculus5`Tensorial`Private`downs, 
      TensorCalculus5`Tensorial`Private`i}, 
     TensorCalculus5`Tensorial`Private`numslots = 
       Length[TensorCalculus5`Tensorial`Private`symcharacters]; 
      If[TensorCalculus5`Tensorial`Private`numslots != 
        Length[{TensorCalculus5`Tensorial`Private`args}], 
       Message[Parseud::Arguments, TensorCalculus5`Tensorial`Private`udsym[
          TensorCalculus5`Tensorial`Private`args]]; Abort[]]; 
      If[And @@ (#1 == "u" || #1 == "d" & ) /@ 
          TensorCalculus5`Tensorial`Private`symcharacters == False, 
       Message[Parseud::BadHead, TensorCalculus5`Tensorial`Private`udsym]; 
        Abort[]]; TensorCalculus5`Tensorial`Private`ups = 
       TensorCalculus5`Tensorial`Private`downs = Table[Void, 
         {TensorCalculus5`Tensorial`Private`numslots}]; 
      Do[If[TensorCalculus5`Tensorial`Private`symcharacters[[
          TensorCalculus5`Tensorial`Private`i]] == "u", 
        TensorCalculus5`Tensorial`Private`ups = ReplacePart[
          TensorCalculus5`Tensorial`Private`ups, 
          TensorCalculus5`Tensorial`Private`i -> 
           {TensorCalculus5`Tensorial`Private`args}[[
            TensorCalculus5`Tensorial`Private`i]]], 
        TensorCalculus5`Tensorial`Private`downs = ReplacePart[
          TensorCalculus5`Tensorial`Private`downs, 
          TensorCalculus5`Tensorial`Private`i -> 
           {TensorCalculus5`Tensorial`Private`args}[[
            TensorCalculus5`Tensorial`Private`i]]]], 
       {TensorCalculus5`Tensorial`Private`i, 1, 
        TensorCalculus5`Tensorial`Private`numslots}]; 
      Sequence @@ {TensorCalculus5`Tensorial`Private`ups, 
        TensorCalculus5`Tensorial`Private`downs}]
 
SyntaxInformation[Parseud] = {"ArgumentsPattern" -> {_}}
 
Parseud /: Parseud::Arguments = 
     "The arguments in `` do not match the number of up and down slots."
 
Parseud /: Parseud::BadHead = 
     "`` is not a symbol consisting solely of 'u's and 'd's."
 
Parseud /: Parseud::usage = "Parseud[udsym[args]] will parse a ud expression \
and return Sequence[uplist,downlist] with Voids in the empty positions."
 
TensorCalculus5`Tensorial`Private`TDu = "\[DifferentialD]"
 
TensorCalculus5`Tensorial`Private`TDd = "\[DifferentialD]"
 
TensorCalculus5`Tensorial`Private`ADu = "D"
 
TensorCalculus5`Tensorial`Private`ADd = "d"
 
TensorCalculus5`Tensorial`Private`CovSym = ";"
 
TensorCalculus5`Tensorial`Private`DifSym = ","
 
ExteriorD[ExteriorD[TensorForms1V6`TensorialForms`Private`v_]] := 0
 
ExteriorD[TensorForms1V6`TensorialForms`Private`v_] /; 
     NumericQ[TensorForms1V6`TensorialForms`Private`v] || 
      (Head[TensorForms1V6`TensorialForms`Private`v] === Symbol && 
       MatchQ[Constant, Alternatives @@ Attributes[
          TensorForms1V6`TensorialForms`Private`v]]) := 0
 
ExteriorD[TensorForms1V6`TensorialForms`Private`arg_] /; 
     Expand[TensorForms1V6`TensorialForms`Private`arg] =!= 
      TensorForms1V6`TensorialForms`Private`arg := 
    ExteriorD[Expand[TensorForms1V6`TensorialForms`Private`arg]]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`a_) + 
      (TensorForms1V6`TensorialForms`Private`b_)] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`a] + 
     ExteriorD[TensorForms1V6`TensorialForms`Private`b]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`c_)*
       (TensorForms1V6`TensorialForms`Private`d_)] /; 
     NumericQ[TensorForms1V6`TensorialForms`Private`c] || 
      (Head[TensorForms1V6`TensorialForms`Private`c] === Symbol && 
       MatchQ[Constant, Alternatives @@ Attributes[
          TensorForms1V6`TensorialForms`Private`c]]) := 
    TensorForms1V6`TensorialForms`Private`c*
     ExteriorD[TensorForms1V6`TensorialForms`Private`d]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`f_ /; 
       FreeQ[TensorForms1V6`TensorialForms`Private`f, _?WedgeVectorQ | 
         Wedge])*(TensorForms1V6`TensorialForms`Private`dx_)?WedgeVectorQ] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`f] \[Wedge] 
     TensorForms1V6`TensorialForms`Private`dx
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`f_ /; 
       FreeQ[TensorForms1V6`TensorialForms`Private`f, _?WedgeVectorQ])*
      Wedge[TensorForms1V6`TensorialForms`Private`args__]] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`f] \[Wedge] 
      (Wedge[TensorForms1V6`TensorialForms`Private`args]) + 
     TensorForms1V6`TensorialForms`Private`f*
      ExteriorD[Wedge[TensorForms1V6`TensorialForms`Private`args]]
 
ExteriorD[(TensorForms1V6`TensorialForms`Private`a_) \[Wedge] 
      (TensorForms1V6`TensorialForms`Private`b__)] := 
    ExteriorD[TensorForms1V6`TensorialForms`Private`a] \[Wedge] 
      TensorForms1V6`TensorialForms`Private`b - 
     TensorForms1V6`TensorialForms`Private`a \[Wedge] 
      ExteriorD[If[Length[{TensorForms1V6`TensorialForms`Private`b}] > 1, 
        Wedge[TensorForms1V6`TensorialForms`Private`b], 
        First[{TensorForms1V6`TensorialForms`Private`b}]]]
 
ExteriorD /: ExteriorD::usage = "ExteriorD[\[Phi]] represents the exterior \
derivative of \[Phi], where \[Phi] can be an expression."
 
WedgeVectorQ[TensorForms1V6`TensorialForms`Private`x_] := 
    MatchQ[TensorForms1V6`TensorialForms`Private`x, 
     Flatten[Alternatives @@ WedgeVectors]]
 
WedgeVectorQ /: WedgeVectorQ::usage = 
     "WedgeVectorQ[expr] returns True if expr matches the WedgeVectors \
pattern."
 
WedgeVectors = {None, None}
 
WedgeVectors /: WedgeVectors::usage = "WedgeVectors stores the patterns that \
will represent 1-forms and 1-vectors. It takes the form {form1|form2|..., \
vector1|vector2|...}. Anything that does not fit onr of the patterns in \
WedgeVectors is factored from Wedge products."
 
HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Switch[Head[TensorForms1V6`TensorialForms`Private`expr], 
     List | Equal | TensorForms1V6`TensorialForms`Private`NotEqual | Less | 
      LessEqual | Greater | GreaterEqual | Plus, 
     (HodgeStar[TensorForms1V6`TensorialForms`Private`hodgerules][
        Expand[#1]] & ) /@ TensorForms1V6`TensorialForms`Private`expr, _, 
     Module[{TensorForms1V6`TensorialForms`Private`workexpr = 
        TensorForms1V6`TensorialForms`Private`expr, 
       TensorForms1V6`TensorialForms`Private`forms = 
        Drop[Flatten[First /@ TensorForms1V6`TensorialForms`Private`hodgerule\
s], -1], TensorForms1V6`TensorialForms`Private`rule0}, 
      TensorForms1V6`TensorialForms`Private`workexpr = 
        SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
            1]]][TensorForms1V6`TensorialForms`Private`workexpr]; 
       TensorForms1V6`TensorialForms`Private`workexpr = 
        TensorForms1V6`TensorialForms`Private`workexpr /. 
         TensorForms1V6`TensorialForms`Private`hodgerules; 
       If[TensorForms1V6`TensorialForms`Private`workexpr === 
          TensorForms1V6`TensorialForms`Private`expr && 
         FreeQ[TensorForms1V6`TensorialForms`Private`workexpr, 
          Alternatives @@ TensorForms1V6`TensorialForms`Private`forms], 
        TensorForms1V6`TensorialForms`Private`rule0 = 
          TensorForms1V6`TensorialForms`Private`hodgerules[[-1]]; 
         (TensorForms1V6`TensorialForms`Private`workexpr*
           TensorForms1V6`TensorialForms`Private`rule0[[2]])/hodgestar$, 
        TensorForms1V6`TensorialForms`Private`workexpr]]]
 
HodgeStar /: HodgeStar::usage = "HodgeStar[hodgerules][expr] will take the \
Hodge star of expr given the set of hodgerules. hodgerules can be generated \
by the HodgeStarRules routine. HodgeStar will format as a star preceeding \
expr until an actual set of rules is substituted."
 
SortWedge[TensorForms1V6`TensorialForms`Private`baseelements_List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Module[{TensorForms1V6`TensorialForms`Private`BasisQ}, 
     TensorForms1V6`TensorialForms`Private`BasisQ[
        TensorForms1V6`TensorialForms`Private`elem_] := 
       MemberQ[TensorForms1V6`TensorialForms`Private`baseelements, 
        TensorForms1V6`TensorialForms`Private`elem]; 
      TensorForms1V6`TensorialForms`Private`expr /. 
       (TensorForms1V6`TensorialForms`Private`a_.)*
         (TensorForms1V6`TensorialForms`Private`wdg:
          Wedge[(TensorForms1V6`TensorialForms`Private`b__)?
            TensorForms1V6`TensorialForms`Private`BasisQ]) :> 
        TensorForms1V6`TensorialForms`Private`a*
         Module[{TensorForms1V6`TensorialForms`Private`syms, 
           TensorForms1V6`TensorialForms`Private`target, 
           TensorForms1V6`TensorialForms`Private`symorder, 
           TensorForms1V6`TensorialForms`Private`targetorder}, 
          TensorForms1V6`TensorialForms`Private`target = 
            List @@ TensorForms1V6`TensorialForms`Private`wdg; 
           TensorForms1V6`TensorialForms`Private`syms = 
            TensorForms1V6`TensorialForms`Private`UnsortedIntersection[
             TensorForms1V6`TensorialForms`Private`baseelements, 
             TensorForms1V6`TensorialForms`Private`target]; 
           TensorForms1V6`TensorialForms`Private`symorder = 
            Ordering[TensorForms1V6`TensorialForms`Private`syms]; 
           TensorForms1V6`TensorialForms`Private`targetorder = 
            Ordering[TensorForms1V6`TensorialForms`Private`target]; 
           Signature[TensorForms1V6`TensorialForms`Private`symorder]*
            Signature[TensorForms1V6`TensorialForms`Private`targetorder]*
            Wedge @@ TensorForms1V6`TensorialForms`Private`syms]]
 
SortWedge[][TensorForms1V6`TensorialForms`Private`expr_] := 
    TensorForms1V6`TensorialForms`Private`expr /. 
     Wedge[TensorForms1V6`TensorialForms`Private`args__] :> 
      Signature[{TensorForms1V6`TensorialForms`Private`args}]*
       Wedge @@ Sort[{TensorForms1V6`TensorialForms`Private`args}]
 
SortWedge /: SortWedge::usage = "SortWedge[basis:{x,y,z...}][expr] will \
reorder wedge products in expr that involve 1-form basis elements x, y, z... \
so they are in the same order as basis with the appropriate sign adjustments. \
x\[Wedge]y\[Wedge]z... will have a positive sign.\nSortWedge[][expr] will put \
all wedge products in natural sort order."
 
TensorForms1V6`TensorialForms`Private`UnsortedIntersection[
     TensorForms1V6`TensorialForms`Private`basis_, 
     TensorForms1V6`TensorialForms`Private`list_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`basis, 
      TensorForms1V6`TensorialForms`Private`i}, 
     Do[If[ !MemberQ[TensorForms1V6`TensorialForms`Private`list, 
          TensorForms1V6`TensorialForms`Private`work[[
           TensorForms1V6`TensorialForms`Private`i]]], 
        TensorForms1V6`TensorialForms`Private`work[[
          TensorForms1V6`TensorialForms`Private`i]] = Null], 
       {TensorForms1V6`TensorialForms`Private`i, 1, 
        Length[TensorForms1V6`TensorialForms`Private`basis]}]; 
      TensorForms1V6`TensorialForms`Private`work /. Null -> Sequence[]]
 
FormIntegral /: FormIntegral::usage = "FormIntegral[form, domain] represents \
an abstract form integral and displays as such. domain is the symbol that \
will appear in the lower position on the integral sign. The \
FormIntegralDomain header can be used as the domain argument."
 
FormIntegralDomain /: FormIntegralDomain::usage = "FormIntegralDomain[symbol, \
domainInequalities] represents a form integral domain. Only the symbol \
displays. The domainInequalities must be logical statements in the form a < \
xu[flavor@a] < b. The same inequality must be used in both positions. Such \
statements are combined with Ands for higher dimensional domains."
 
grad[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`function_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`function, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`formfunction = 
       ExteriorD[Tensor[TensorForms1V6`TensorialForms`Private`x, {#1}, 
          {Void}]] & ; TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
grad /: grad::usage = "grad[labs, flavor:Identity][scalarfunction] will \
calculate the gradient of a 2D or 3D function. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. The \
optional argument flavor gives the index flavor for the expansion of the \
exterior derivative."
 
ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs:
       {TensorForms1V6`TensorialForms`Private`x_, 
        TensorForms1V6`TensorialForms`Private`\[Delta]_, _, _}, 
      TensorForms1V6`TensorialForms`Private`dummy_ /; 
       Head[TensorForms1V6`TensorialForms`Private`dummy] =!= List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs, 
      {TensorForms1V6`TensorialForms`Private`dummy}][
     TensorForms1V6`TensorialForms`Private`expr]
 
ExpandExteriorD[TensorForms1V6`TensorialForms`Private`dlabs:
       {TensorForms1V6`TensorialForms`Private`x_, 
        TensorForms1V6`TensorialForms`Private`\[Delta]_, _, _}, 
      TensorForms1V6`TensorialForms`Private`dummies_List][
     TensorForms1V6`TensorialForms`Private`expr_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`expr}, 
     TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        Wedge[TensorForms1V6`TensorialForms`Private`args__] :> 
         Catch[Module[{TensorForms1V6`TensorialForms`Private`n, 
            TensorForms1V6`TensorialForms`Private`indexpositions, 
            TensorForms1V6`TensorialForms`Private`indexwedge, 
            TensorForms1V6`TensorialForms`Private`u, 
            TensorForms1V6`TensorialForms`Private`i}, 
           TensorForms1V6`TensorialForms`Private`indexpositions = 
             Flatten[Position[Wedge[
                TensorForms1V6`TensorialForms`Private`args], ExteriorD[
                 TensorForms1V6`TensorialForms`Private`darg_] /; 
                 !MatchQ[TensorForms1V6`TensorialForms`Private`darg, 
                  Tensor[TensorForms1V6`TensorialForms`Private`x, {_}, 
                   {Void}]]]]; TensorForms1V6`TensorialForms`Private`n = 
             Length[TensorForms1V6`TensorialForms`Private`indexpositions]; 
            If[TensorForms1V6`TensorialForms`Private`n == 0, 
             Throw[Wedge[TensorForms1V6`TensorialForms`Private`args]]]; 
            If[TensorForms1V6`TensorialForms`Private`n > 
              Length[TensorForms1V6`TensorialForms`Private`dummies], 
             Message[ExpandExteriorD::dummies, 
               TensorForms1V6`TensorialForms`Private`dummies, Wedge[
                TensorForms1V6`TensorialForms`Private`args]]; Abort[]]; 
            TensorForms1V6`TensorialForms`Private`indexwedge = 
             Wedge @@ Array[Unique[
                 TensorForms1V6`TensorialForms`Private`u] & , {
                Length[{TensorForms1V6`TensorialForms`Private`args}]}]; 
            Do[TensorForms1V6`TensorialForms`Private`indexwedge[[
               TensorForms1V6`TensorialForms`Private`indexpositions[[
                TensorForms1V6`TensorialForms`Private`i]]]] = 
              TensorForms1V6`TensorialForms`Private`dummies[[
               TensorForms1V6`TensorialForms`Private`i]], 
             {TensorForms1V6`TensorialForms`Private`i, 1, 
              Length[TensorForms1V6`TensorialForms`Private`indexpositions]}]; 
            Throw[Inner[ExpandExteriorD[
                 TensorForms1V6`TensorialForms`Private`dlabs, {#2}][#1] & , 
              Wedge[TensorForms1V6`TensorialForms`Private`args], 
              TensorForms1V6`TensorialForms`Private`indexwedge, Wedge]]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        ExteriorD[TensorForms1V6`TensorialForms`Private`arg_ /; 
            !MatchQ[TensorForms1V6`TensorialForms`Private`arg, 
             Tensor[TensorForms1V6`TensorialForms`Private`x, {_}, {Void}] | 
              Wedge[__]]] :> 
         With[{TensorForms1V6`TensorialForms`Private`coord = 
            Tensor[TensorForms1V6`TensorialForms`Private`x, 
             {First[TensorForms1V6`TensorialForms`Private`dummies]}, 
             {Void}]}, KroneckerAbsorb[
            TensorForms1V6`TensorialForms`Private`\[Delta]][
           Expand[PartialD[TensorForms1V6`TensorialForms`Private`dlabs][
              TensorForms1V6`TensorialForms`Private`arg, 
              TensorForms1V6`TensorialForms`Private`coord]*
             ExteriorD[TensorForms1V6`TensorialForms`Private`coord]]]]]
 
ExpandExteriorD /: ExpandExteriorD::dummies = "Number of dummies `` does not \
match number of expansion indices needed in ``"
 
ExpandExteriorD /: ExpandExteriorD::usage = "ExpandExteriorD[{x,\[Delta],g,\
\[CapitalGamma]}, index][expr] will expand exterior derivatives in expression \
using index as the dummy index."
 
KroneckerAbsorb[TensorCalculus5`Tensorial`Private`\[Delta]_][
     TensorCalculus5`Tensorial`Private`expr_] := 
    TensorCalculus5`Tensorial`Private`expr //. 
     {Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {TensorCalculus5`Tensorial`Private`i_, Void}, 
          {Void, TensorCalculus5`Tensorial`Private`j_}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KADownTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {TensorCalculus5`Tensorial`Private`j_, Void}, 
          {Void, TensorCalculus5`Tensorial`Private`i_}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KAUpTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {Void, TensorCalculus5`Tensorial`Private`i_}, 
          {TensorCalculus5`Tensorial`Private`j_, Void}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KADownTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term], 
      Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          {Void, TensorCalculus5`Tensorial`Private`j_}, 
          {TensorCalculus5`Tensorial`Private`i_, Void}]*
         (TensorCalculus5`Tensorial`Private`term_) /; 
        TensorCalculus5`Tensorial`Private`KAUpTest[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`term] :> 
       TensorCalculus5`Tensorial`Private`GenNewKATerm[
         TensorCalculus5`Tensorial`Private`i, 
         TensorCalculus5`Tensorial`Private`j][
        TensorCalculus5`Tensorial`Private`term]}
 
SyntaxInformation[KroneckerAbsorb] = {"ArgumentsPattern" -> {_}}
 
KroneckerAbsorb /: KroneckerAbsorb::usage = "KroneckerAbsorb[\[Delta]][expr] \
will perform all replacement operations of first order mixed tensors with \
labels \[Delta], assumed to be Kronecker deltas."
 
TensorCalculus5`Tensorial`Private`KADownTest[
     TensorCalculus5`Tensorial`Private`i_, 
     TensorCalculus5`Tensorial`Private`termexpr_] := 
    MemberQ[ParseTermIndices[TensorCalculus5`Tensorial`Private`termexpr][[2,
      2]], TensorCalculus5`Tensorial`Private`i]
 
ParseTermIndices[TensorCalculus5`Tensorial`Private`term_] := 
    Module[{TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`term, 
      TensorCalculus5`Tensorial`Private`slotsort, 
      TensorCalculus5`Tensorial`Private`uplist, 
      TensorCalculus5`Tensorial`Private`downlist, 
      TensorCalculus5`Tensorial`Private`slotorder, 
      TensorCalculus5`Tensorial`Private`badlist, 
      TensorCalculus5`Tensorial`Private`dummylist, 
      TensorCalculus5`Tensorial`Private`scalar, 
      TensorCalculus5`Tensorial`Private`tlab, 
      TensorCalculus5`Tensorial`Private`updvars}, 
     TensorCalculus5`Tensorial`Private`slotsort[
        TensorCalculus5`Tensorial`Private`list_] := 
       Sort[TensorCalculus5`Tensorial`Private`list, 
        Position[TensorCalculus5`Tensorial`Private`slotorder, #1][[1,1]] <= 
          Position[TensorCalculus5`Tensorial`Private`slotorder, #2][[1,
           1]] & ]; TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        TensorCalculus5`Tensorial`Private`a_Function :> 
         If[Length[TensorCalculus5`Tensorial`Private`a] < 3, 
          Last[TensorCalculus5`Tensorial`Private`a], 
          TensorCalculus5`Tensorial`Private`a[[2]]]; 
      If[MatchQ[IndexParsingRules, (Rule | RuleDelayed)[_, _] | 
         {(Rule | RuleDelayed)[_, _]..}], 
       TensorCalculus5`Tensorial`Private`wterms = 
        TensorCalculus5`Tensorial`Private`wterms //. IndexParsingRules]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        (TotalD | AbsoluteD | LieD)[TensorCalculus5`Tensorial`Private`t_, 
          ___] -> TensorCalculus5`Tensorial`Private`t; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms //. 
        HoldPattern[PartialD[TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*
          Tensor[TensorCalculus5`Tensorial`Private`tlab, 
           Table[Void, {Length[Flatten[{
                TensorCalculus5`Tensorial`Private`dvars}]]}], 
           Flatten[{TensorCalculus5`Tensorial`Private`dvars}]]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms //. 
        HoldPattern[CovariantD[TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`updvars_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*
          Tensor[TensorCalculus5`Tensorial`Private`tlab, 
           TensorCalculus5`Tensorial`Private`updvars, 
           TensorCalculus5`Tensorial`Private`dvars]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        HoldPattern[PartialD[_][TensorCalculus5`Tensorial`Private`t_, 
           TensorCalculus5`Tensorial`Private`dvars_]] :> 
         TensorCalculus5`Tensorial`Private`t*Times @@ 
           Cases[TensorCalculus5`Tensorial`Private`dvars, 
            Tensor[TensorCalculus5`Tensorial`Private`l_, 
              TensorCalculus5`Tensorial`Private`ups_, 
              TensorCalculus5`Tensorial`Private`downs_] -> 
             Tensor[TensorCalculus5`Tensorial`Private`l, 
              TensorCalculus5`Tensorial`Private`downs, 
              TensorCalculus5`Tensorial`Private`ups], {0, 1}]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        Tensor[TensorCalculus5`Tensorial`Private`t_] :> 
         If[FreeQ[{TensorCalculus5`Tensorial`Private`t}, Plus], 
          TensorCalculus5`Tensorial`Private`t, 
          TensorCalculus5`Tensorial`Private`scalar]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
        (TensorCalculus5`Tensorial`Private`t_Tensor)[___] -> 
         TensorCalculus5`Tensorial`Private`t; 
      TensorCalculus5`Tensorial`Private`wterms = 
       TensorCalculus5`Tensorial`Private`wterms /. 
         Dot | CircleTimes | TensorForms1`TensorialForms`Wedge -> Times /. 
        Tensor[_] -> 1; TensorCalculus5`Tensorial`Private`wterms = 
       If[Head[TensorCalculus5`Tensorial`Private`wterms] === Times, 
        List @@ TensorCalculus5`Tensorial`Private`wterms, 
        {TensorCalculus5`Tensorial`Private`wterms}]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       Flatten[(If[MatchQ[#1, (TensorCalculus5`Tensorial`Private`a_Tensor)^
             (TensorCalculus5`Tensorial`Private`n_Integer)?Positive], 
           Table[First[#1], {Last[#1]}], #1] & ) /@ 
         TensorCalculus5`Tensorial`Private`wterms]; 
      TensorCalculus5`Tensorial`Private`wterms = 
       (If[Head[#1] === Tensor, #1, Unevaluated[Sequence[]]] & ) /@ 
        TensorCalculus5`Tensorial`Private`wterms; 
      If[TensorCalculus5`Tensorial`Private`wterms === {}, 
       Return[{{}, {{}, {}}, {}}]]; 
      TensorCalculus5`Tensorial`Private`slotorder = 
       (#1 /. Tensor[_, TensorCalculus5`Tensorial`Private`ups_, 
            TensorCalculus5`Tensorial`Private`downs_] :> 
           (Flatten[Transpose[{TensorCalculus5`Tensorial`Private`ups, 
               TensorCalculus5`Tensorial`Private`downs}]] /. 
            Void -> Sequence[]) & ) /@ 
        TensorCalculus5`Tensorial`Private`wterms; 
      TensorCalculus5`Tensorial`Private`slotorder = 
       TensorCalculus5`Tensorial`Private`UnsortedUnion[Join] @@ 
        TensorCalculus5`Tensorial`Private`slotorder; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Flatten[TensorCalculus5`Tensorial`Private`wterms /. 
          Tensor[_, TensorCalculus5`Tensorial`Private`ups_, _] -> 
           TensorCalculus5`Tensorial`Private`ups] /. Void -> Sequence[]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       (If[BaseIndexQ[#1], Unevaluated[Sequence[]], #1] & ) /@ 
        TensorCalculus5`Tensorial`Private`uplist; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Flatten[TensorCalculus5`Tensorial`Private`wterms /. 
          Tensor[_, _, TensorCalculus5`Tensorial`Private`downs_] -> 
           TensorCalculus5`Tensorial`Private`downs] /. Void -> Sequence[]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       (If[BaseIndexQ[#1], Unevaluated[Sequence[]], #1] & ) /@ 
        TensorCalculus5`Tensorial`Private`downlist; 
      TensorCalculus5`Tensorial`Private`badlist = 
       Union[Flatten[{Cases[Split[Sort[
             TensorCalculus5`Tensorial`Private`uplist]], 
           TensorCalculus5`Tensorial`Private`t_List /; 
            Length[TensorCalculus5`Tensorial`Private`t] > 1], 
          Cases[Split[Sort[TensorCalculus5`Tensorial`Private`downlist]], 
           TensorCalculus5`Tensorial`Private`t_List /; 
            Length[TensorCalculus5`Tensorial`Private`t] > 1]}]]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Complement[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`badlist]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Complement[TensorCalculus5`Tensorial`Private`downlist, 
        TensorCalculus5`Tensorial`Private`badlist]; 
      TensorCalculus5`Tensorial`Private`dummylist = 
       Intersection[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`downlist]; 
      TensorCalculus5`Tensorial`Private`uplist = 
       Complement[TensorCalculus5`Tensorial`Private`uplist, 
        TensorCalculus5`Tensorial`Private`dummylist]; 
      TensorCalculus5`Tensorial`Private`downlist = 
       Complement[TensorCalculus5`Tensorial`Private`downlist, 
        TensorCalculus5`Tensorial`Private`dummylist]; 
      {TensorCalculus5`Tensorial`Private`slotsort[
        TensorCalculus5`Tensorial`Private`dummylist], 
       TensorCalculus5`Tensorial`Private`slotsort /@ 
        {TensorCalculus5`Tensorial`Private`uplist, 
         TensorCalculus5`Tensorial`Private`downlist}, 
       TensorCalculus5`Tensorial`Private`badlist}]
 
SyntaxInformation[ParseTermIndices] = {"ArgumentsPattern" -> {_}}
 
ParseTermIndices /: ParseTermIndices::usage = "ParseTermIndices[term] will \
return the lists of indices:\n{dummies, {freeup, freedown}, bad}\n Dummies \
are indicies that occur up and down exactly once. Free indicies are ones that \
occur only once. All other indicies that appear in the term are bad."
 
IndexParsingRules = {OverBar[$ten_Tensor] -> $ten, 
     xPartialDu[xPartialD[$a_, $m_], $n_] -> $a*Tensor[$XXX, {$n}, {$m}], 
     xPartialD[xPartialDu[$a_, $m_], $n_] -> $a*Tensor[$XXX, {$m}, {$n}], 
     xPartialD[$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xPartialDu[$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     xCovariantD[$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xCovariantDu[$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     xD[$s_][$a_, $m_] -> $a*Tensor[$XXX, {Void}, {$m}], 
     xDu[$s_][$a_, $m_] -> $a*Tensor[$XXX, {$m}, {Void}], 
     HoldPattern[Derivative][a__][Tensor[$b_, $c_, $d_]] -> 
      Tensor[$b, $c, $d], ExteriorD[$a_] -> $a}
 
IndexParsingRules /: IndexParsingRules::usage = "IndexParsingRules, which is \
initially an empty List, can be assigned a list of rules that will extract \
tensors from an expression, usually as a single tensor or tensor product, so \
they will be parsed by ParseTermIndices. This allows new types of tensor \
expressions to be added to Tensorial."
 
TensorCalculus5`Tensorial`Private`UnsortedUnion[
     TensorCalculus5`Tensorial`Private`x_] := 
    Module[{TensorCalculus5`Tensorial`Private`f}, 
     TensorCalculus5`Tensorial`Private`f[
        TensorCalculus5`Tensorial`Private`y_] := 
       (TensorCalculus5`Tensorial`Private`f[
          TensorCalculus5`Tensorial`Private`y] = Sequence[]; 
        TensorCalculus5`Tensorial`Private`y); 
      TensorCalculus5`Tensorial`Private`f /@ 
       TensorCalculus5`Tensorial`Private`x]
 
TensorCalculus5`Tensorial`Private`GenNewKATerm[
      TensorCalculus5`Tensorial`Private`i_, 
      TensorCalculus5`Tensorial`Private`j_][
     TensorCalculus5`Tensorial`Private`term_] := 
    Module[{TensorCalculus5`Tensorial`Private`uq = 
       Unique[TensorCalculus5`Tensorial`Private`q], 
      TensorCalculus5`Tensorial`Private`u1, 
      TensorCalculus5`Tensorial`Private`newterm}, 
     TensorCalculus5`Tensorial`Private`u1 = 
       If[IndexFlavorQ[Head[TensorCalculus5`Tensorial`Private`i]], 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`uq], 
        TensorCalculus5`Tensorial`Private`uq]; 
      TensorCalculus5`Tensorial`Private`newterm = 
       IndexChange[{TensorCalculus5`Tensorial`Private`i, 
          TensorCalculus5`Tensorial`Private`u1}][
        TensorCalculus5`Tensorial`Private`term]; 
      TensorCalculus5`Tensorial`Private`newterm /. 
       TensorCalculus5`Tensorial`Private`u1 -> 
        TensorCalculus5`Tensorial`Private`j]
 
IndexChange[TensorCalculus5`Tensorial`Private`pair:
       {_?TensorCalculus5`Tensorial`Private`indextest, 
        _?TensorCalculus5`Tensorial`Private`indextest}, 
      TensorCalculus5`Tensorial`Private`sign:1 | -1:1, 
      TensorCalculus5`Tensorial`Private`symboliconly:True | False:True][
     TensorCalculus5`Tensorial`Private`expr_] := 
    IndexChange[{TensorCalculus5`Tensorial`Private`pair}, 
      TensorCalculus5`Tensorial`Private`sign, 
      TensorCalculus5`Tensorial`Private`symboliconly][
     TensorCalculus5`Tensorial`Private`expr]
 
IndexChange[TensorCalculus5`Tensorial`Private`pairs:
       {{_?TensorCalculus5`Tensorial`Private`indextest, 
          _?TensorCalculus5`Tensorial`Private`indextest}..}, 
      TensorCalculus5`Tensorial`Private`sign:1 | -1:1, 
      TensorCalculus5`Tensorial`Private`symboliconly:True | False:True][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`replacetable, 
      TensorCalculus5`Tensorial`Private`npairs = 
       Length[TensorCalculus5`Tensorial`Private`pairs], 
      TensorCalculus5`Tensorial`Private`i, 
      TensorCalculus5`Tensorial`Private`completeindexspecs}, 
     TensorCalculus5`Tensorial`Private`completeindexspecs = 
       Join[TensorCalculus5`Tensorial`Private`basicIndexPatterns, 
        NewIndexChangePatterns]; 
      TensorCalculus5`Tensorial`Private`replacetable = 
       Flatten[Table[TensorCalculus5`Tensorial`Private`indexreplacement[
          TensorCalculus5`Tensorial`Private`expr, 
          TensorCalculus5`Tensorial`Private`pairs[[
           TensorCalculus5`Tensorial`Private`i]], 
          TensorCalculus5`Tensorial`Private`symboliconly, 
          TensorCalculus5`Tensorial`Private`completeindexspecs], 
         {TensorCalculus5`Tensorial`Private`i, 1, 
          TensorCalculus5`Tensorial`Private`npairs}], 1]; 
      If[Length[TensorCalculus5`Tensorial`Private`replacetable] == 0, 
       Return[TensorCalculus5`Tensorial`Private`expr]]; 
      TensorCalculus5`Tensorial`Private`replacetable = 
       Transpose[TensorCalculus5`Tensorial`Private`replacetable]; 
      TensorCalculus5`Tensorial`Private`sign*ReplacePart[
        TensorCalculus5`Tensorial`Private`expr, 
        TensorCalculus5`Tensorial`Private`replacetable[[1]], 
        TensorCalculus5`Tensorial`Private`replacetable[[2]], 
        Partition[Range[Length[
           TensorCalculus5`Tensorial`Private`replacetable[[1]]]], 1]]]
 
SyntaxInformation[IndexChange] = {"ArgumentsPattern" -> {_, _., _.}}
 
IndexChange /: IndexChange::usage = "IndexChange[{{r, i}, {s, j}...}, sign:1, \
symboliconly:True][expr] will replace the first index in each pair list by \
the second index in the pair list and multiply the expression by sign, which \
has the default value of 1. Only symbolic indices will be replaced unless the \
optional argument symboliconly is set to False./nIndexChange[{r,i}, \
sign:1][expr] may be used in the case of a single index change. The flavor \
must be in the indices."
 
TensorCalculus5`Tensorial`Private`indextest[
     TensorCalculus5`Tensorial`Private`i_] := 
    Module[{TensorCalculus5`Tensorial`Private`good}, 
     Off[RawIndex::notindex]; TensorCalculus5`Tensorial`Private`good = 
       SymbolicIndexQ[TensorCalculus5`Tensorial`Private`i] || 
        BaseIndexQ[TensorCalculus5`Tensorial`Private`i]; 
      On[RawIndex::notindex]; TensorCalculus5`Tensorial`Private`good]
 
RawIndex[TensorCalculus5`Tensorial`Private`index_] := 
    Switch[TensorCalculus5`Tensorial`Private`index, 
     (TensorCalculus5`Tensorial`Private`f_)?IndexFlavorQ[_], 
     First[TensorCalculus5`Tensorial`Private`index], _Symbol | _Integer, 
     TensorCalculus5`Tensorial`Private`index, _, 
     Message[RawIndex::notindex, TensorCalculus5`Tensorial`Private`index]; 
      TensorCalculus5`Tensorial`Private`index]
 
SyntaxInformation[RawIndex] = {"ArgumentsPattern" -> {_}}
 
RawIndex /: RawIndex::notindex = "`` is not a Symbol, Integer or Flavor."
 
RawIndex /: RawIndex::usage = "RawIndex[index] will extract the raw index \
from a flavored index. If the raw index is not a Symbol or Integer an error \
message is issued."
 
TensorCalculus5`Tensorial`Private`basicIndexPatterns = 
    {{2, {2 | 3, _}, Tensor[_, _List, _List]}, 
     {1, {2}, HoldPattern[PartialD[_, 
         TensorCalculus5`Tensorial`Private`i_] /; 
        Head[TensorCalculus5`Tensorial`Private`i] =!= List]}, 
     {2, {2, _}, HoldPattern[PartialD[_, {__}]]}, 
     {1, {2}, HoldPattern[CovariantD[_, 
         TensorCalculus5`Tensorial`Private`i_] /; 
        Head[TensorCalculus5`Tensorial`Private`i] =!= List]}, 
     {2, {2 | 3, _}, HoldPattern[CovariantD[_, {__}, {__}]]}}
 
NewIndexChangePatterns = 
    {{1, {2}, xPartialD[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xPartialD[_, index_List]}, 
     {1, {2}, xCovariantD[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xCovariantD[_, index_List]}, 
     {1, {2}, xD[_][_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xD[_][_, index_List]}, 
     {1, {2}, xPartialDu[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xPartialDu[_, index_List]}, 
     {1, {2}, xCovariantDu[_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xCovariantDu[_, index_List]}, 
     {1, {2}, xDu[_][_, index_ /; Head[index] =!= List]}, 
     {2, {2, _}, xDu[_][_, index_List]}}
 
NewIndexChangePatterns /: NewIndexChangePatterns::usage = "NewIndexChangePatt\
erns is used to specify novel structures that contain indices. They are \
appended to built-in index patterns. Each pattern is a list of three items \
{dropped levels, dropped level patterns, structure pattern}. See \
documentation."
 
TensorCalculus5`Tensorial`Private`indexreplacement[
     TensorCalculus5`Tensorial`Private`expr_, 
     {TensorCalculus5`Tensorial`Private`oldindex_, 
      TensorCalculus5`Tensorial`Private`newindex_}, 
     TensorCalculus5`Tensorial`Private`symboliconly_, 
     TensorCalculus5`Tensorial`Private`indexspecs_] := 
    Module[{TensorCalculus5`Tensorial`Private`putativepositions, 
      TensorCalculus5`Tensorial`Private`actualpositions, 
      TensorCalculus5`Tensorial`Private`positiontest}, 
     TensorCalculus5`Tensorial`Private`positiontest[
        TensorCalculus5`Tensorial`Private`position_] := 
       Module[{TensorCalculus5`Tensorial`Private`testpattern}, 
        TensorCalculus5`Tensorial`Private`testpattern[
            TensorCalculus5`Tensorial`Private`pos_][
           {(TensorCalculus5`Tensorial`Private`ndrop_Integer)?Positive, 
            TensorCalculus5`Tensorial`Private`droppattern_, 
            TensorCalculus5`Tensorial`Private`pattern_}] := 
          Module[{TensorCalculus5`Tensorial`Private`workposition, 
            TensorCalculus5`Tensorial`Private`droppedpositions}, 
           If[TensorCalculus5`Tensorial`Private`ndrop > 
              Length[TensorCalculus5`Tensorial`Private`pos], Return[False]]; 
            TensorCalculus5`Tensorial`Private`workposition = 
             Drop[TensorCalculus5`Tensorial`Private`position, 
              -TensorCalculus5`Tensorial`Private`ndrop]; 
            TensorCalculus5`Tensorial`Private`droppedpositions = 
             Take[TensorCalculus5`Tensorial`Private`position, 
              -TensorCalculus5`Tensorial`Private`ndrop]; 
            MatchQ[TensorCalculus5`Tensorial`Private`expr[[Sequence @@ 
                TensorCalculus5`Tensorial`Private`workposition]], 
              TensorCalculus5`Tensorial`Private`pattern] && 
             MatchQ[TensorCalculus5`Tensorial`Private`droppedpositions, 
              TensorCalculus5`Tensorial`Private`droppattern]]; 
         Or @@ TensorCalculus5`Tensorial`Private`testpattern[
            TensorCalculus5`Tensorial`Private`position] /@ 
           TensorCalculus5`Tensorial`Private`indexspecs]; 
      TensorCalculus5`Tensorial`Private`putativepositions = 
       Position[TensorCalculus5`Tensorial`Private`expr, 
        TensorCalculus5`Tensorial`Private`oldindex]; 
      If[TensorCalculus5`Tensorial`Private`putativepositions === {} || 
        (TensorCalculus5`Tensorial`Private`symboliconly && 
          !SymbolicIndexQ[TensorCalculus5`Tensorial`Private`oldindex]), 
       Return[{}]]; TensorCalculus5`Tensorial`Private`actualpositions = 
       (If[TensorCalculus5`Tensorial`Private`positiontest[#1], #1, 
          Unevaluated[Sequence[]]] & ) /@ 
        TensorCalculus5`Tensorial`Private`putativepositions; 
      Flatten[Outer[List, {TensorCalculus5`Tensorial`Private`newindex}, 
        TensorCalculus5`Tensorial`Private`actualpositions, 1, 1], 1]]
 
TensorCalculus5`Tensorial`Private`KAUpTest[
     TensorCalculus5`Tensorial`Private`i_, 
     TensorCalculus5`Tensorial`Private`termexpr_] := 
    MemberQ[ParseTermIndices[TensorCalculus5`Tensorial`Private`termexpr][[2,
      1]], TensorCalculus5`Tensorial`Private`i]
 
KroneckerEvaluate[TensorCalculus5`Tensorial`Private`\[Delta]_][
     TensorCalculus5`Tensorial`Private`expr_] := 
    Module[{TensorCalculus5`Tensorial`Private`basetest}, 
     TensorCalculus5`Tensorial`Private`basetest[
        TensorCalculus5`Tensorial`Private`indices_List] := 
       Module[{TensorCalculus5`Tensorial`Private`windices = 
          TensorCalculus5`Tensorial`Private`indices /. Void -> Sequence[]}, 
        And @@ BaseIndexQ /@ TensorCalculus5`Tensorial`Private`windices && 
         SameQ @@ GetIndexFlavor /@ 
           TensorCalculus5`Tensorial`Private`windices]; 
      TensorCalculus5`Tensorial`Private`expr /. 
       TensorCalculus5`Tensorial`Private`ten:
         Tensor[TensorCalculus5`Tensorial`Private`\[Delta], 
          (TensorCalculus5`Tensorial`Private`up_)?
           TensorCalculus5`Tensorial`Private`basetest, 
          (TensorCalculus5`Tensorial`Private`down_)?
           TensorCalculus5`Tensorial`Private`basetest] :> 
        Catch[Module[{TensorCalculus5`Tensorial`Private`ups = 
            TensorCalculus5`Tensorial`Private`up /. Void -> Sequence[], 
           TensorCalculus5`Tensorial`Private`downs = 
            TensorCalculus5`Tensorial`Private`down /. Void -> Sequence[]}, 
          If[Length[TensorCalculus5`Tensorial`Private`ups] != 
             Length[TensorCalculus5`Tensorial`Private`downs], 
            Throw[TensorCalculus5`Tensorial`Private`ten]]; 
           If[ !Union[TensorCalculus5`Tensorial`Private`ups, 
               TensorCalculus5`Tensorial`Private`downs] === 
              Sort[TensorCalculus5`Tensorial`Private`ups], Throw[0]]; 
           Signature[TensorCalculus5`Tensorial`Private`ups]*
            Signature[TensorCalculus5`Tensorial`Private`downs]]]]
 
SyntaxInformation[KroneckerEvaluate] = {"ArgumentsPattern" -> {_}}
 
KroneckerEvaluate /: KroneckerEvaluate::usage = "KroneckerEvaluate[\[Delta]][\
expr] will evaluate Kronecker symbols in expression whose indices are \
entirely single flavor base indices. This includes generalized Kroneckers"
 
EinsteinSum[][TensorCalculus5`Tensorial`Private`expr_] := 
    EinsteinSum[Automatic][TensorCalculus5`Tensorial`Private`expr]
 
EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
     TensorCalculus5`Tensorial`Private`inexpr_] := 
    Module[{TensorCalculus5`Tensorial`Private`sumindices, 
      TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr]}, 
     Switch[Head[TensorCalculus5`Tensorial`Private`expr], List, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Equal | Unequal | Less | 
       Greater | LessEqual | GreaterEqual, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       Distribute[TensorCalculus5`Tensorial`Private`expr, Plus, Times], Plus, 
      EinsteinSum[TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, _, 
      TensorCalculus5`Tensorial`Private`sumindices = 
        First[ParseTermIndices[TensorCalculus5`Tensorial`Private`expr]]; 
       If[Length[TensorCalculus5`Tensorial`Private`sumindices] == 0, 
        Return[TensorCalculus5`Tensorial`Private`expr]]; 
       SumExpansion[TensorCalculus5`Tensorial`Private`sumindices, 
         TensorCalculus5`Tensorial`Private`baseindices][
        TensorCalculus5`Tensorial`Private`expr]]]
 
SyntaxInformation[EinsteinSum] = {"ArgumentsPattern" -> {_.}}
 
EinsteinSum /: EinsteinSum::usage = "EinsteinSum[base:Automatic][expr] will \
do an Einstein summation individually on all terms on both sides of an \
equation, or all terms in a sum, or on a single term. The range of the sum is \
over the base list which has the default value of of the base indices \
associated with the index flavor."
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices__][
      TensorCalculus5`Tensorial`Private`expr_] /; 
     And @@ (Head[#1] =!= List && #1 =!= Automatic & ) /@ 
       {TensorCalculus5`Tensorial`Private`indices} := 
    SumExpansion[{TensorCalculus5`Tensorial`Private`indices}][
     TensorCalculus5`Tensorial`Private`expr]
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices__, 
       TensorCalculus5`Tensorial`Private`baseindices_List][
      TensorCalculus5`Tensorial`Private`expr_] /; 
     And @@ (Head[#1] =!= List && #1 =!= Automatic & ) /@ 
       {TensorCalculus5`Tensorial`Private`indices} := 
    SumExpansion[{TensorCalculus5`Tensorial`Private`indices}, 
      TensorCalculus5`Tensorial`Private`baseindices][
     TensorCalculus5`Tensorial`Private`expr]
 
SumExpansion[TensorCalculus5`Tensorial`Private`indices_List, 
       TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
      TensorCalculus5`Tensorial`Private`inexpr_] /; 
     MatchQ[TensorCalculus5`Tensorial`Private`baseindices, 
      Automatic | {(_Integer | _Symbol)..} | {{(_Integer | _Symbol)..}..}] := 
    Module[{TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr]}, 
     Switch[Head[TensorCalculus5`Tensorial`Private`expr], List, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Equal | Unequal | Less | 
       Greater | LessEqual | GreaterEqual, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, Plus, 
      SumExpansion[TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices] /@ 
       TensorCalculus5`Tensorial`Private`expr, _, 
      TensorCalculus5`Tensorial`Private`SumExpansion2[
        TensorCalculus5`Tensorial`Private`indices, 
        TensorCalculus5`Tensorial`Private`baseindices][
       TensorCalculus5`Tensorial`Private`expr]]]
 
SyntaxInformation[SumExpansion] = {"ArgumentsPattern" -> {__}}
 
SumExpansion /: SumExpansion::usage = "SumExpansion[i,j,.., \
base:Automatic][expr] will sum on the indices, i, j,..., in the expression. \
The indices must carry their flavors. The expansions will be done on \
individual terms on both sides of an equation and within arrays. The range of \
the sum is over the base list which has the default value of the base indices \
associated with the index flavor.\nSumExpansion[{i,j,..}, \
base:Automatic][expr] may also be used."
 
TensorCalculus5`Tensorial`Private`SumExpansion2[
       TensorCalculus5`Tensorial`Private`indices_List, 
       TensorCalculus5`Tensorial`Private`baseindices_:Automatic][
      TensorCalculus5`Tensorial`Private`inexpr_] /; 
     MatchQ[TensorCalculus5`Tensorial`Private`baseindices, 
      Automatic | {(_Integer | _Symbol)..} | {{(_Integer | _Symbol)..}..}] := 
    Module[{TensorCalculus5`Tensorial`Private`expr = 
       ExpandAll[TensorCalculus5`Tensorial`Private`inexpr], 
      TensorCalculus5`Tensorial`Private`idx, 
      TensorCalculus5`Tensorial`Private`inindex, 
      TensorCalculus5`Tensorial`Private`wbaseindices, 
      TensorCalculus5`Tensorial`Private`indexstructure, 
      TensorCalculus5`Tensorial`Private`wstructure, 
      TensorCalculus5`Tensorial`Private`replace, 
      TensorCalculus5`Tensorial`Private`uq, 
      TensorCalculus5`Tensorial`Private`q, 
      TensorCalculus5`Tensorial`Private`uqreplace}, 
     TensorCalculus5`Tensorial`Private`wbaseindices = 
       If[VectorQ[TensorCalculus5`Tensorial`Private`baseindices], 
        {TensorCalculus5`Tensorial`Private`baseindices}, 
        TensorCalculus5`Tensorial`Private`baseindices]; 
      TensorCalculus5`Tensorial`Private`indexstructure = 
       Module[{TensorCalculus5`Tensorial`Private`index, 
         TensorCalculus5`Tensorial`Private`bases, 
         TensorCalculus5`Tensorial`Private`subbases}, 
        Table[TensorCalculus5`Tensorial`Private`index = 
           TensorCalculus5`Tensorial`Private`indices[[
            TensorCalculus5`Tensorial`Private`idx]]; 
          TensorCalculus5`Tensorial`Private`bases = GetBaseIndices[
            TensorCalculus5`Tensorial`Private`index]; 
          TensorCalculus5`Tensorial`Private`subbases = 
           If[Length[TensorCalculus5`Tensorial`Private`wbaseindices] >= 
             TensorCalculus5`Tensorial`Private`idx, 
            TensorCalculus5`Tensorial`Private`wbaseindices[[
             TensorCalculus5`Tensorial`Private`idx]], 
            TensorCalculus5`Tensorial`Private`bases]; 
          If[ !Intersection[TensorCalculus5`Tensorial`Private`subbases, 
              TensorCalculus5`Tensorial`Private`bases] === 
             Sort[TensorCalculus5`Tensorial`Private`subbases], 
           Message[SumArrayExpansion::subset, 
             TensorCalculus5`Tensorial`Private`subbases, 
             TensorCalculus5`Tensorial`Private`bases]; Abort[], 
           TensorCalculus5`Tensorial`Private`bases = 
            TensorCalculus5`Tensorial`Private`subbases]; 
          {TensorCalculus5`Tensorial`Private`index, 
           TensorCalculus5`Tensorial`Private`bases}, 
         {TensorCalculus5`Tensorial`Private`idx, 1, 
          Length[TensorCalculus5`Tensorial`Private`indices]}]]; 
      TensorCalculus5`Tensorial`Private`inindex[
        TensorCalculus5`Tensorial`Private`i_] := 
       Count[{TensorCalculus5`Tensorial`Private`expr}, 
          Tensor[_, TensorCalculus5`Tensorial`Private`up_ /; 
              !FreeQ[TensorCalculus5`Tensorial`Private`up, 
               TensorCalculus5`Tensorial`Private`i, 1], 
            TensorCalculus5`Tensorial`Private`down_] | 
           Tensor[_, TensorCalculus5`Tensorial`Private`up_, 
            TensorCalculus5`Tensorial`Private`down_ /; 
              !FreeQ[TensorCalculus5`Tensorial`Private`down, 
               TensorCalculus5`Tensorial`Private`i, 1]] | 
           HoldPattern[PartialD[_, TensorCalculus5`Tensorial`Private`i]] | 
           HoldPattern[PartialD[_, {___, TensorCalculus5`Tensorial`Private`i, 
              ___}]] | HoldPattern[CovariantD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            CovariantD[_, {___, TensorCalculus5`Tensorial`Private`i, ___}]] | 
           HoldPattern[TensorCalculus5`Tensorial`Private`xPartialD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xPartialDu[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xCovariantD[_, 
             TensorCalculus5`Tensorial`Private`i]] | HoldPattern[
            TensorCalculus5`Tensorial`Private`xCovariantDu[_, 
             TensorCalculus5`Tensorial`Private`i]], Infinity, 
          Heads -> True] > 0 &&  !BaseIndexQ[
          TensorCalculus5`Tensorial`Private`i]; 
      TensorCalculus5`Tensorial`Private`replace[
        TensorCalculus5`Tensorial`Private`i_, 
        TensorCalculus5`Tensorial`Private`newindex_] := 
       Switch[Head[TensorCalculus5`Tensorial`Private`i], _?IndexFlavorQ, 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`newindex], _, 
        TensorCalculus5`Tensorial`Private`newindex]; 
      TensorCalculus5`Tensorial`Private`uqreplace[
        TensorCalculus5`Tensorial`Private`i_] := 
       Switch[Head[TensorCalculus5`Tensorial`Private`i], _?IndexFlavorQ, 
        Head[TensorCalculus5`Tensorial`Private`i][
         TensorCalculus5`Tensorial`Private`q], _, 
        TensorCalculus5`Tensorial`Private`q]; 
      TensorCalculus5`Tensorial`Private`wstructure = 
       Select[TensorCalculus5`Tensorial`Private`indexstructure, 
        TensorCalculus5`Tensorial`Private`inindex[First[#1]] & ]; 
      Fold[Plus @@ Table[IndexChange[{First[#2], 
              TensorCalculus5`Tensorial`Private`uq = 
               TensorCalculus5`Tensorial`Private`uqreplace[First[#2]]}][
            #1] /. TensorCalculus5`Tensorial`Private`uq -> 
            TensorCalculus5`Tensorial`Private`replace[First[#2], 
             Last[#2][[TensorCalculus5`Tensorial`Private`idx]]], 
          {TensorCalculus5`Tensorial`Private`idx, 1, Length[Last[#2]]}] & , 
       TensorCalculus5`Tensorial`Private`expr, 
       TensorCalculus5`Tensorial`Private`wstructure]]
 
SumArrayExpansion /: SumArrayExpansion::subset = 
     "`` is not a subset of the base indices ``"
 
curl[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`formfield_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`formfield]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
curl /: curl::usage = "curl[labs, hodgerules, flavor:Identity][formfield] \
will calculate the curl of a 3D form field. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. \
Hodgerules is the list of Hodge star transformation rules in the flavor. They \
may be generated by HodgeStarRules. The optional argument flavor gives the \
index flavor for the expansion of the exterior derivative."
 
div[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`formfield_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]]}, 
     TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`formfield]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[List @@ 
           TensorForms1V6`TensorialForms`Private`hodgerules[[1,1]]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
div /: div::usage = "div[labs, hodgerules, flavor:Identity][formfield] will \
calculate the divergence of a 3D form field. labs are the standard list of \
symbols used in derivative routines, {x, \[Delta], g, \[CapitalGamma]}. \
Hodgerules is the list of Hodge star transformation rules for the flavor. The \
optional argument flavor gives the index flavor for the expansion of the \
exterior derivative."
 
cross[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`form1_, 
     TensorForms1V6`TensorialForms`Private`form2_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work}, 
     TensorForms1V6`TensorialForms`Private`work = 
       SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
           1]]][EinsteinSum[][
         TensorForms1V6`TensorialForms`Private`form1 \[Wedge] 
          TensorForms1V6`TensorialForms`Private`form2]]; 
      Simplify[TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules]]
 
cross /: cross::usage = "cross[hodgerules, flavor:Identity][form1, form2] \
will calculate the cross product, form1\[Cross]form2, and return the result \
as a 1-form. Hodgerules are the Hodge star transformation rules for 2-forms. \
The optional argument flavor gives the index flavor for the expansion of the \
exterior derivative. "
 
dot[TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`form1_, 
     TensorForms1V6`TensorialForms`Private`form2_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`star1}, 
     TensorForms1V6`TensorialForms`Private`star1 = 
       EinsteinSum[][TensorForms1V6`TensorialForms`Private`form1] /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       SortWedge[List @@ TensorForms1V6`TensorialForms`Private`hodgerules[[1,
           1]]][EinsteinSum[][
         TensorForms1V6`TensorialForms`Private`star1 \[Wedge] 
          TensorForms1V6`TensorialForms`Private`form2]]; 
      Simplify[TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules]]
 
dot /: dot::usage = "dot[hodgerules, flavor:Identity][form1, form2] will \
calculate the dot product, form1.form2, and return the result. Hodgerules are \
the Hodge star transformation rules for the flavor. The optional argument \
flavor gives the index flavor for the expansion of the exterior derivative. "
 
laplacian[TensorForms1V6`TensorialForms`Private`labs:{_, _, _, _}, 
      TensorForms1V6`TensorialForms`Private`hodgerules:{(_ -> _)..}, 
      TensorForms1V6`TensorialForms`Private`flavor_:Identity][
     TensorForms1V6`TensorialForms`Private`function_] := 
    Module[{TensorForms1V6`TensorialForms`Private`work, 
      TensorForms1V6`TensorialForms`Private`a, 
      TensorForms1V6`TensorialForms`Private`b, 
      TensorForms1V6`TensorialForms`Private`c, 
      TensorForms1V6`TensorialForms`Private`x = 
       TensorForms1V6`TensorialForms`Private`labs[[1]], 
      TensorForms1V6`TensorialForms`Private`\[Delta] = 
       TensorForms1V6`TensorialForms`Private`labs[[2]], 
      TensorForms1V6`TensorialForms`Private`sortvars}, 
     TensorForms1V6`TensorialForms`Private`sortvars = 
       (ExteriorD[Tensor[TensorForms1V6`TensorialForms`Private`x, 
           {TensorForms1V6`TensorialForms`Private`flavor[#1]}, 
           {Void}]] & ) /@ GetBaseIndices[
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`a]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`b]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`function]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[TensorForms1V6`TensorialForms`Private`sortvars][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       ExpandExteriorD[TensorForms1V6`TensorialForms`Private`labs, 
         TensorForms1V6`TensorialForms`Private`flavor[
          TensorForms1V6`TensorialForms`Private`c]][
        ExteriorD[TensorForms1V6`TensorialForms`Private`work]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[SortWedge[TensorForms1V6`TensorialForms`Private`sortvars][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]; 
      TensorForms1V6`TensorialForms`Private`work = 
       TensorForms1V6`TensorialForms`Private`work /. 
        TensorForms1V6`TensorialForms`Private`hodgerules; 
      TensorForms1V6`TensorialForms`Private`work = 
       Simplify[KroneckerEvaluate[
          TensorForms1V6`TensorialForms`Private`\[Delta]][
         EinsteinSum[][TensorForms1V6`TensorialForms`Private`work]]]]
 
laplacian /: laplacian::usage = "laplacian[labs, hodgerules, \
flavor:Identity][function] will calculate the 3D laplacian of scalar \
function. labs are the standard list of symbols used in derivative routines, \
{x, \[Delta], g, \[CapitalGamma]}. Hodgerules is the list of Hodge star \
transformation rules for the flavor. The optional argument flavor gives the \
index flavor for the expansion of the exterior derivative."
 
Attributes[TensorCalculus5`Tensorial`Private`form$] = {Temporary}
 
Attributes[Overscript] = {NHoldRest}
 
Attributes[Superscript] = {NHoldRest, ReadProtected}
 
T[A_, uds_String][index0__] := Module[{tmp, ud = Characters[uds], 
      index = {index0}}, If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
T[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[T, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
T[A_, up_List, down_List] := Module[{tmp, u = up /. Null -> Void, 
      d = down /. Null -> Void}, u = u /. {} -> {Void}; 
      d = d /. {} -> {Void}; 
      If[ !Inner[(#1 =!= Void && #2 =!= Void) || (#1 === Void && 
             #2 === Void) & , u, d, Or] && Length[d] == Length[u], 
       Tensor[A, u, d], Style[Tensor[A, u, d], FontColor -> Red]]]
 
T[A_, uds_String, index_List] := Module[{tmp, ud = Characters[uds]}, 
     If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
A[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[A, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
tmp = s/2 - Subscript[m, 1]^2/2 - Subscript[m, 2]^2/2 + Subscript[m, 3]^2/2 - 
     (s*Subscript[x, 3])/2
 
m[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[m, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
u[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[u, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
Attributes[Underscript] = {NHoldRest}
 
c[(TensorCalculus5`Tensorial`Private`i$_)[
       TensorCalculus5`Tensorial`Private`args$__]] /; 
     TrueQ[udsymQ[TensorCalculus5`Tensorial`Private`i$]] := 
    Tensor[c, Parseud[TensorCalculus5`Tensorial`Private`i$[
       TensorCalculus5`Tensorial`Private`args$]]]
 
MakeBoxes[space[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0, 0]], FormatType]
 
Format[space[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0, 0]]
 
MakeBoxes[timespace[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0, 1]], FormatType]
 
Format[timespace[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0, 1]]
 
MakeBoxes[feyn[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[1, 0.5, 0]], FormatType]
 
Format[feyn[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[1, 0.5, 0]]
 
MakeBoxes[groupR[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 0, 1]], FormatType]
 
Format[groupR[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 0, 1]]
 
MakeBoxes[gaugeG[TensorCalculus5`Tensorial`Private`i$_], FormatType_] ^:= 
    Format[Style[TensorCalculus5`Tensorial`Private`i$, 
      FontColor -> RGBColor[0, 0, 1]], FormatType]
 
Format[gaugeG[TensorCalculus5`Tensorial`Private`i$_]] := 
    Style[TensorCalculus5`Tensorial`Private`i$, 
     FontColor -> RGBColor[0, 0, 1]]
 
BaseIndices = {0, 1, 2, 3}
 
BaseIndices /: BaseIndices::usage = "BaseIndices is the current default list \
of symbols or integers being used to index components. It is used with \
unflavored indices and any flavors that have not been declared with \
DeclareBaseIndices."
 
TensorCalculus5`Tensorial`Private`baseflavors = {{field, {1, 2, 3, 4}}, 
     {feyn, {1, 2, 3, 4, 5}}, {space, {1, 2, 3}}, {timespace, {0, 1}}, 
     {groupR, {1, 2, 3}}, {gaugeG, {1, 2, 3}}}
 
tmpq = Tensor[Subscript[k, 2], {\[Mu]}, {Void}]*Tensor[Subscript[k, 3], 
       {Void}, {\[Mu]}] -> s/2 + Subscript[m, 1]^2/2 - Subscript[m, 2]^2/2 - 
      Subscript[m, 3]^2/2 - (s*Subscript[x, 1])/2
 
subq1 = Tensor[Subscript[k, $j_], {\[Mu]_}, {Void}]*Tensor[Subscript[k, $k_], 
       {Void}, {\[Mu]_}] -> s/2 - Subscript[m, $j]^2/2 - 
      Subscript[m, $k]^2/2 + Subscript[m, \[Mu]$12178[$j, $k]]^2/2 - 
      (s*Subscript[x, \[Mu]$12178[$j, $k]])/2
 
subq2 = \[Mu]$12178[a_Integer, b_Integer] :> 
     First[Cases[{1, 2, 3}, Except[a | b]]]
