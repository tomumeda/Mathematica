(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

\!\(\*
  RowBox[{\($UserBaseDirectory; \), "\[IndentingNewLine]", \(Needs["\<TGeneralRelativity1`GeneralRelativity`\>"]\), "\n", \(<< Dodelson`Functions`\), "\[IndentingNewLine]", \($ContextPath; \), "\n", \( (*\ As\ suggested\ we\ compute\ the\ 3  D\ Ricci\ scalar\ *) \), "\[IndentingNewLine]", \(DeclareBaseIndices[{1, 2, 3}]; \), "\n", \(DefineTensorShortcuts[{{x, k}, 1}, {{h, g, \[Delta], R}, 2}, {{\[Xi], \[CapitalGamma]}, 3}, {{R, g, h, H, \[Eta]}, 4}]; \), "\[IndentingNewLine]", \(ClearTensorValues[{guu[i, j], gdd[i, j], \[CapitalGamma]udd[i, j, k], \[CapitalGamma]ddd[i, j, k]}]; \), "\n", \(ClearAll[guu, gdd, \[CapitalGamma]udd, \[CapitalGamma]ddd]\), "\n", \(DeclareIndexFlavor[{red, Red}]; \), "\n", \(varnames = {x, y, z}; \), "\n", \(DeclareBaseIndices[varnames]; \), "\[IndentingNewLine]", \(labs = {x, \[Delta], g, \[CapitalGamma]}; \), "\[IndentingNewLine]", \(SetTensorValues[\[Delta]ud[\[Alpha], \[Beta]], IdentityMatrix[3]]; \), "\n", \(metric = DiagonalMatrix[\ \(a\^2\) \((1 + 2\ Phi\ \[ExponentialE]\^\(\[ImaginaryI]\ k[x, y, z]\))\) {1, 1, 1} // Flatten]; \), "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((0, 2, 0)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((0, 0, 2)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((2, 0, 0)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((0, 1, 1)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((1, 1, 0)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((1, 0, 1)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", "0"}], ";"}], "\[IndentingNewLine]", \(SetAttributes[{Phi, a}, Constant]; \), "\[IndentingNewLine]", \(tmetric\  = \ metric // CoordinatesToTensors[varnames]; \), "\[IndentingNewLine]", \(SetMetricValueRules[g, metric]; \), "\[IndentingNewLine]", \(Print["\<The 3D spatial metric in Fourier space \>", NonzeroValueRules[g] // TableForm]; \), "\[IndentingNewLine]", \(SetChristoffelValueRules[xu[i], tmetric, \[CapitalGamma]]\), "\[IndentingNewLine]", \(\(NonzeroValueRules[\[CapitalGamma]] // UseCoordinates[varnames]\) // TableForm; \), "\[IndentingNewLine]", \(riemannd = CalculateRiemannd[labs, Identity, Identity]; \), "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((0, 1, 0)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", \(kd[y]\)}], ";", " ", \( (*\ Define\ kd\ terms\ *) \), "\[IndentingNewLine]", 
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((0, 0, 1)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", \(kd[z]\)}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{
        RowBox[{
          SuperscriptBox["k", 
            TagBox[\((1, 0, 0)\),
              Derivative],
            MultilineFunction->None], "[", \(_, _, _\), "]"}], "=", \(kd[x]\)}], ";"}], "\[IndentingNewLine]", \(riemannd /. \(PartialD[_]\)[_, _] -> 0; \), "\[IndentingNewLine]", \(xriemannd = Normal[Series[%, {Phi, 0, 1}]]; \  (*\ eliminate\ common\ terms\ *) \[IndentingNewLine]\[IndentingNewLine]SetTensorValueRules[Rdddd[\[Mu], \[Nu], \[Sigma], \[Rho]], xriemannd]; \), "\[IndentingNewLine]", \(Print["\<Riemann tensor \>", \[IndentingNewLine]\((\(SelectedTensorRules[R, Rdddd[a_, b_, c_, d_] /; OrderedQ[{a, b}] \[And] OrderedQ[{c, d}] \[And] OrderedQ[{{a, b}, {c, d}}]] // UseCoordinates[varnames]\) // Simplify)\) // TableForm\ ]\), "\[IndentingNewLine]", \(guu[x_, y_] := Tensor[g, {x, y}, {Void, Void}] /. TensorValueRules[g]\), "\[IndentingNewLine]", \(tmp = 2  guu[x, x]\ guu[y, y]\ Rdddd[x, y, x, y] + 2  guu[x, x]\ guu[z, z]\ Rdddd[x, z, x, z] + 2  guu[z, z]\ guu[y, y]\ Rdddd[y, z, y, z]\ ; \), "\[IndentingNewLine]", \(Print[\*"\"\<Hand calculate Riemann scalar since the provided function did not work.  The factor of 2 comes from \!\(R\_xyxy\)=\!\(R\_yxyx\)\>\"", tmp\ ]\), "\[IndentingNewLine]", \(\(tmp // Expand\) // Simplify; \), "\[IndentingNewLine]", \(% /. TensorValueRules[R, g]; \), "\[IndentingNewLine]", \(Print["\<The Riemann scalar \>", \[IndentingNewLine]Normal[Series[%, {Phi, 0, 1}]]\[IndentingNewLine]]\), "\[IndentingNewLine]"}]\)







