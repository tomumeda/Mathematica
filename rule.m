(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(*C[Rule]*)
(*RuleSolve[rules_,vars_] Solves for rules_ for vars_.  Its operation depends upon the Head[] of rules_ and vars_. rules_ and vars_ may be a List of Rules and/or vars_.  vars_ may contain Patterns, however Patterns are removesd. *17Jun2013*)
RuleSolve[rules_,vars_]:=Module[{tmp=Flatten[rules],XXXXX,list},
list=DeleteDuplicates[First[ExtractPatternXpat[vars][rules]]];
tmp=tmp/.Rule->Equal;
If[Head[rules]==Rule&&Head[vars]=!=List,
(*Single Rule[] and single vars_. Returns all solutions from Solve[]. Replaces RuleX*)
tmp=tmp//.vars->XXXXX;
If[FreeQ[tmp,XXXXX],tmp={},(*No vars_*)
tmp=Solve[tmp,XXXXX];
If[Length[list]==1,
tmp=tmp//.XXXXX->list[[1]]
];
tmp=tmp//Flatten;
tmp=Map[MapAt[#/.Pattern->xPattern/.xPattern[x_,b_]->x&,#,2]&,tmp];
tmp=tmp/.Xpat[a_]->a,
tmp={};
];
tmp=tmp//Flatten,
(*else List of Rules and List of vars_*)
If[Head[rules]===List
&&DeleteDuplicates[Map[Head[#]&,rules]]==={Rule}
&&Head[vars]===List
&&Length[vars]===Length[rules]
,Print[tmp,vars];
tmp=Solve[tmp,vars]//Flatten
];
];
tmp
];
{rule={a[b]->c[b]+d,c[b]->f[b]},var={f[b],d}}
RuleSolve[rule,var]
RuleX[rule,var]



