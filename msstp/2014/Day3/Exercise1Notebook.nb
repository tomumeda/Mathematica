(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     91842,       2305]
NotebookOptionsPosition[     87318,       2161]
NotebookOutlinePosition[     87746,       2178]
CellTagsIndexPosition[     87703,       2175]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Exercise 1 (easy)",
  FontSize->36],
 "\n\n\n",
 StyleBox["Toby Wiseman (Imperial College)  \n\nMathematica Summer School, \
Porto 2014",
  FontSlant->"Italic"],
 StyleBox["\n",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["\n",
  FontWeight->"Plain"],
 "\nAIM : The aim of this exercise is to solve a 2 - dimensional p.d.e. \
boundary value problem. \n\n\n[ This exercise is intended as a simple \
introduction to solving elliptic p.d.e.s. It will form the basis for the \
harder exercise 2 which will implement solving a gravitational problem. ]\n\n"
}], "Subtitle",
 CellChangeTimes->{{3.614576625613048*^9, 3.614576630693656*^9}, {
  3.614577125300946*^9, 3.61457725923139*^9}, {3.615096980509695*^9, 
  3.615096992345689*^9}}],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"The", " ", 
      RowBox[{"p", ".", "d", ".", "e", ".", " ", "is"}], " ", "defined", " ", 
      "in", " ", "terms", " ", "of", " ", "a", " ", "function", " ", "f", " ",
       "on", " ", "a", " ", "2"}], "-", 
     RowBox[{
     "dimensional", " ", "rectanglular", " ", "domain", " ", "with", " ", 
      "coordinates", " ", "x"}]}], ",", 
    RowBox[{"y", " ", "with", " ", "x", " ", "\[Epsilon]", 
     RowBox[{"(", 
      RowBox[{"0", ",", "1"}], ")"}], " ", "and", " ", "y", " ", "\[Epsilon]", 
     RowBox[{"(", 
      RowBox[{"0", ",", 
       RowBox[{"2", "\[Pi]"}]}], ")"}]}]}], "\[IndentingNewLine]"}], 
  "Text"], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{
     "We", " ", "choose", " ", "Dirichlet", " ", "boundary", " ", 
      "conditions", " ", "for", " ", "f", " ", "at", " ", "x"}], "=", 
     RowBox[{
     "0.", " ", "Defining", " ", "a", " ", "boundary", " ", "function", " ", 
      RowBox[{"bfn", "[", "y", "]"}]}]}], "Text"], 
   StyleBox[",", "Text"], 
   StyleBox[" ", "Text"], 
   StyleBox[
    RowBox[{
     RowBox[{"then", " ", 
      RowBox[{"f", "[", 
       RowBox[{
        RowBox[{"x", "=", "0"}], ",", "y"}], "]"}]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"bfn", "[", "y", "]"}], ".", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "We"}], " ", "choose", " ", "the", " ", "y", 
       " ", "coordinate", " ", "to", " ", "be", " ", 
       RowBox[{
        StyleBox["periodic",
         FontWeight->"Bold"], ".", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "We"}], " ", "will", " ", "require", "  ", "f",
        " ", "to", " ", "have", " ", "a", " ", 
       StyleBox["reflection",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       StyleBox["symmetry",
        FontWeight->"Bold"], " ", "at", " ", "the", " ", "boundary", " ", 
       "x"}], "=", "1"}]}], "Text"], 
   StyleBox[",", "Text"], 
   StyleBox[" ", "Text"], 
   RowBox[{
    StyleBox["so", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox["that", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox["we", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox["can", "Text"], 
    StyleBox[" ", "Text"], 
    StyleBox["extend", "Text"], " ", "f", " ", "to", " ", "the", " ", 
    "domain", " ", "x", " ", "\[Epsilon]", 
    RowBox[{"(", 
     RowBox[{"0", ",", "2"}], ")"}]}], ",", " ", 
   RowBox[{
    RowBox[{"y", " ", "\[Epsilon]", 
     RowBox[{"(", 
      RowBox[{"0", ",", 
       RowBox[{"2", "\[Pi]"}]}], ")"}], " ", "with", 
     StyleBox[
      RowBox[{" ", 
       StyleBox[" ", "Text"]}]], 
     StyleBox[
      RowBox[{"f", "[", 
       RowBox[{"x", ",", "y"}], "]"}], "Text"]}], 
    StyleBox[" ", "Text"], 
    StyleBox["=", "Text"], 
    StyleBox[" ", "Text"], 
    RowBox[{
     StyleBox[
      RowBox[{"f", "[", 
       RowBox[{
        RowBox[{"2", "-", "x"}], ",", "y"}], "]"}], "Text"], 
     StyleBox[".", "Text"], 
     StyleBox[" ", "Text"], 
     StyleBox["\[IndentingNewLine]", "Text"], 
     RowBox[{
      StyleBox["[", "Text"], 
      StyleBox[" ", "Text"], 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          StyleBox["Equivalently", "Text"], " ", "we", " ", "may", " ", "say",
           " ", "that", " ", "we", " ", "wish", " ", "to", " ", "find", " ", 
          "solutions", " ", "to", " ", "our", " ", "problem", " ", "in", " ", 
          "the", " ", "space", " ", "of", " ", "functions", " ", "that", " ", 
          "are", " ", "even", " ", "at", " ", "x"}], "=", "1"}], ";", " ", 
        RowBox[{
         RowBox[{
         "Note", " ", "also", " ", "that", " ", "this", " ", "implies", " ", 
          "a", " ", "Neumann", " ", "condition", " ", "at", " ", "x"}], "=", 
         "1"}]}], ",", " ", 
       RowBox[{
       "but", " ", "in", " ", "fact", " ", "is", " ", "stronger", " ", "as", 
        " ", "it", " ", "implies", " ", "all", " ", "odd", " ", "normal", " ",
         "derivatives", " ", "must", " ", 
        RowBox[{"vanish", "."}]}]}], " ", "]"}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{"We", " ", "will", " ", "discretize", " ", "the", " ", 
    RowBox[{"p", ".", "d", ".", "e", ".", " ", "on"}], " ", "a", " ", 
    StyleBox["uniform",
     FontWeight->"Bold"], " ", "grid", " ", "in", " ", "x"}], ",", " ", "y", 
   ",", " ", 
   RowBox[{"and", " ", "use", " ", "the", " ", "Mathematica", " ", 
    RowBox[{"function", " ", "'"}], 
    RowBox[{"Interpolation", "'"}], " ", "to", " ", "compute", " ", "the", 
    " ", 
    RowBox[{"stencils", ".", "\[IndentingNewLine]"}]}]}], "Text"]}], "Text",
 CellChangeTimes->{{3.6145298255961*^9, 3.614530061716236*^9}, 
   3.6145302513047867`*^9, {3.614530752431785*^9, 3.614530768653549*^9}, {
   3.614530817749569*^9, 3.614530902631875*^9}, {3.614530941702979*^9, 
   3.6145309443787327`*^9}, {3.614531015910141*^9, 3.61453106803162*^9}, {
   3.6145789836287107`*^9, 3.6145792254682703`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Please run the following to show the problems in exercise 1;", \
"Subtitle",
 CellChangeTimes->{{3.614576649627462*^9, 3.614576677504223*^9}}],

Cell["\<\
The number of grid points in the x, y directions will be NX, NY; we will take \
a small number of points for simplicity of demonstrating the results you \
should obtain;\
\>", "Text",
 CellChangeTimes->{{3.6145766390404367`*^9, 3.614576646202981*^9}, {
  3.614579334706254*^9, 3.614579342232798*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NX", "=", "3"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NY", "=", "3"}], ";"}]}], "Input",
 CellChangeTimes->{{3.6145303865786867`*^9, 3.614530390572673*^9}, {
  3.614530427651465*^9, 3.614530428473796*^9}, {3.614531398025475*^9, 
  3.614531399361471*^9}}],

Cell["\<\
We will choose the points in the x - direction to be located at the following;\
\>", "Text",
 CellChangeTimes->{{3.61453017839121*^9, 3.614530217593883*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tmp1", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"ii", "-", "1."}], 
     RowBox[{"NX", "-", "0.5"}]], ",", 
    RowBox[{"{", 
     RowBox[{"ii", ",", "1", ",", "NX"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6144939444868793`*^9, 3.614494012552917*^9}, {
   3.6145301524687853`*^9, 3.614530152607711*^9}, {3.614531096915101*^9, 
   3.614531097617787*^9}, 3.614531262495969*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.4`", ",", "0.8`"}], "}"}]], "Output",
 CellChangeTimes->{3.644100886646309*^9}]
}, Open  ]],

Cell["\<\
\[LineSeparator]We impose the x reflection boundary condition at x = 1 by \
taking two copies of our grid in x as follows; note that we have picked our x \
spacing above carefully so that after have done this we still obtain a \
uniformly spaced grid. \
\>", "Text",
 CellChangeTimes->{{3.614531101112198*^9, 3.6145311013852177`*^9}, {
   3.614531185429946*^9, 3.614531229827632*^9}, 3.614531266380699*^9, {
   3.614531430930636*^9, 3.61453143149551*^9}, {3.614579361318233*^9, 
   3.614579363357321*^9}, {3.614579417124653*^9, 3.6145794743637133`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{"tmp1", ",", 
   RowBox[{"Reverse", "[", 
    RowBox[{"2", "-", "tmp1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.614531106408908*^9, 3.614531109451811*^9}, {
  3.614531151451421*^9, 3.6145311594338017`*^9}, {3.6145312635978127`*^9, 
  3.614531264640029*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.4`", ",", "0.8`", ",", "1.2`", ",", "1.6`", ",", "2.`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.644100923144067*^9}]
}, Open  ]],

Cell["And the points in y will be located at;", "Text",
 CellChangeTimes->{{3.614530201011895*^9, 3.6145302175944*^9}, {
  3.6145303435882893`*^9, 3.614530344465427*^9}, {3.614530393794352*^9, 
  3.614530394698588*^9}, {3.614579376653582*^9, 3.6145793770385647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tmp2", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"2", "\[Pi]", 
     FractionBox[
      RowBox[{"ii", "-", "0.5"}], "NY"]}], ",", 
    RowBox[{"{", 
     RowBox[{"ii", ",", "1", ",", "NY"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.614508915747018*^9, 3.6145089238294353`*^9}, {
  3.614508955488164*^9, 3.6145089560745907`*^9}, {3.614509039915806*^9, 
  3.6145090460106163`*^9}, {3.6145198554375257`*^9, 3.6145198564034758`*^9}, {
  3.614531258152376*^9, 3.614531260032002*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.0471975511965976`", ",", "3.141592653589793`", ",", 
   "5.235987755982988`"}], "}"}]], "Output",
 CellChangeTimes->{3.644100949837633*^9}]
}, Open  ]],

Cell["\<\
We impose the y periodicity by taking copies of our grid and attaching them \
at y=0 and y=2\[Pi] as follows; Again note that we have chosen our y points \
carefully so that when we extend the grid as below again it is uniformly \
spaced.\
\>", "Text",
 CellChangeTimes->{{3.614531101112198*^9, 3.6145311013852177`*^9}, {
  3.614531185429946*^9, 3.614531254739996*^9}, {3.614579382102015*^9, 
  3.614579402642898*^9}, {3.6145794795716057`*^9, 3.614579507170875*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "2"}], "\[Pi]"}], "+", "tmp2"}], ",", "tmp2", ",", 
   RowBox[{
    RowBox[{"2", "\[Pi]"}], " ", "+", "tmp2"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.614531274687007*^9, 3.614531291103549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "5.235987755982989`"}], ",", 
   RowBox[{"-", "3.141592653589793`"}], ",", 
   RowBox[{"-", "1.0471975511965983`"}], ",", "1.0471975511965976`", ",", 
   "3.141592653589793`", ",", "5.235987755982988`", ",", "7.330382858376184`",
    ",", "9.42477796076938`", ",", "11.519173063162574`"}], "}"}]], "Output",
 CellChangeTimes->{3.644100992211219*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem 1 : create the basic domain", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767136572123`*^9}, {
  3.614576777058763*^9, 3.614576781722872*^9}}],

Cell["\<\
The first task is to create an array ' grid' whose elements contain the (x, \
y) coordinates of each point in the domain, together with a variable name. \
These are b1, b2, ... for the boundary points which will hold the Dirichlet \
data for the problem. The remainder are called f1, f2, ... and are the \
variables we will wish to solve for, given the p.d.e. You should write some \
code to generate an array \[OpenCurlyQuote]grid\[CloseCurlyQuote] that looks \
like the following.\
\>", "Text",
 CellChangeTimes->{{3.614530368902815*^9, 3.6145303719448023`*^9}, {
  3.614530471729886*^9, 3.614530632373061*^9}, {3.614576704895171*^9, 
  3.61457670826849*^9}, {3.614579520309245*^9, 3.614579520388012*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"grid", "=", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "1.0471975511965976`"}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "3.141592653589793`"}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "5.235987755982988`"}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "1.0471975511965976`"}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "3.141592653589793`"}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "5.235987755982988`"}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "1.0471975511965976`"}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "3.141592653589793`"}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "5.235987755982988`"}], "}"}], "f6"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}]}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], ";"}]], "Input",
 CellChangeTimes->{{3.614531459754045*^9, 3.614531465820301*^9}, {
  3.614531498475713*^9, 3.61453150882928*^9}, {3.61457638365705*^9, 
  3.614576384839918*^9}}],

Cell[CellGroupData[{

Cell[BoxData["%1419"], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.`", ",", "1.0471975511965976`"}], "}"}], ",", "b1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.`", ",", "3.141592653589793`"}], "}"}], ",", "b2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.`", ",", "5.235987755982988`"}], "}"}], ",", "b3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.4`", ",", "1.0471975511965976`"}], "}"}], ",", "f1"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.4`", ",", "3.141592653589793`"}], "}"}], ",", "f2"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.4`", ",", "5.235987755982988`"}], "}"}], ",", "f3"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.8`", ",", "1.0471975511965976`"}], "}"}], ",", "f4"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.8`", ",", "3.141592653589793`"}], "}"}], ",", "f5"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.8`", ",", "5.235987755982988`"}], "}"}], ",", "f6"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6441010390290823`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Problem 2 : create an extended domain to implement reflection and periodic \
boundary conditions\
\>", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767225729218`*^9}, {
  3.614576783595916*^9, 3.6145767979061737`*^9}}],

Cell["\<\
 We now need to implement the periodic behaviour in y, and the reflection \
boundary condition at x=1. We achieve this in a simple way by taking copies \
of \[OpenCurlyQuote]grid\[CloseCurlyQuote] and after appropriate manipulation \
glue them together into an array \[OpenCurlyQuote]gridfull\[CloseCurlyQuote], \
to double the x domain as described above, and add a copy of the y domain at \
both y=0 and y=2\[Pi] as above. You should write code to generate from \
\[OpenCurlyQuote]grid\[CloseCurlyQuote] the following extended array\
\[CloseCurlyQuote] gridfull\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.614530368902815*^9, 3.6145303719448023`*^9}, {
   3.614530471729886*^9, 3.614530723223517*^9}, {3.6145313033668222`*^9, 
   3.6145313790328827`*^9}, 3.6145767241726847`*^9, {3.614579569611361*^9, 
   3.6145795767861633`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gridfull", "=", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "f6"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", 
          RowBox[{"-", "5.235987755982989`"}]}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", 
          RowBox[{"-", "3.141592653589793`"}]}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", 
          RowBox[{"-", "1.0471975511965983`"}]}], "}"}], "f6"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "1.0471975511965976`"}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "3.141592653589793`"}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "5.235987755982988`"}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "1.0471975511965976`"}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "3.141592653589793`"}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "5.235987755982988`"}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "1.0471975511965976`"}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "3.141592653589793`"}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "5.235987755982988`"}], "}"}], "f6"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "1.0471975511965976`"}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "3.141592653589793`"}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "5.235987755982988`"}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "1.0471975511965976`"}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "3.141592653589793`"}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "5.235987755982988`"}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "1.0471975511965976`"}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "3.141592653589793`"}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "5.235987755982988`"}], "}"}], "f6"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "7.330382858376184`"}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "9.42477796076938`"}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"0.`", ",", "11.519173063162574`"}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "7.330382858376184`"}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "9.42477796076938`"}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"0.4`", ",", "11.519173063162574`"}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "7.330382858376184`"}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "9.42477796076938`"}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"0.8`", ",", "11.519173063162574`"}], "}"}], "f6"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "7.330382858376184`"}], "}"}], "b1"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "9.42477796076938`"}], "}"}], "b2"},
       {
        RowBox[{"{", 
         RowBox[{"2.`", ",", "11.519173063162574`"}], "}"}], "b3"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "7.330382858376184`"}], "}"}], "f1"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "9.42477796076938`"}], "}"}], "f2"},
       {
        RowBox[{"{", 
         RowBox[{"1.6`", ",", "11.519173063162574`"}], "}"}], "f3"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "7.330382858376184`"}], "}"}], "f4"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "9.42477796076938`"}], "}"}], "f5"},
       {
        RowBox[{"{", 
         RowBox[{"1.2`", ",", "11.519173063162574`"}], "}"}], "f6"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], ";"}]], "Input",
 CellChangeTimes->{{3.614530463962247*^9, 3.614530464440811*^9}, {
  3.6145314734819736`*^9, 3.614531476451638*^9}, {3.61453151300251*^9, 
  3.614531521556892*^9}, {3.614576388993576*^9, 3.614576389344874*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Problem 3 : use \[OpenCurlyQuote]Interpolation\[CloseCurlyQuote] to create \
finite difference stencil\
\>", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.614576729772881*^9}, {
  3.614576801747323*^9, 3.6145768131382303`*^9}}],

Cell[TextData[{
 "We may now directly use the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " \[OpenCurlyQuote]Interpolation\[CloseCurlyQuote] function using the \
argument \[OpenCurlyQuote]gridfull\[CloseCurlyQuote] to generate a finite \
difference approximation to a function. This will automatically build in our \
boundary conditions.\n\nThe below uses 2nd order interpolation, but higher \
order is simply achieved by changing the option InterpolationOrder\[Rule]2. [ \
Note you shouldn\[CloseCurlyQuote]t use higher order than the minimum of NX \
and NY. So don\[CloseCurlyQuote]t try higher orders until you have increased \
these! ]"
}], "Text",
 CellChangeTimes->{{3.614530368902815*^9, 3.6145303719448023`*^9}, {
   3.614530471729886*^9, 3.614530723223517*^9}, {3.6145313033668222`*^9, 
   3.6145313790328827`*^9}, {3.614531535282463*^9, 3.614531596109104*^9}, {
   3.614531669908367*^9, 3.6145316870591583`*^9}, 3.6145767313237743`*^9, {
   3.614579609759244*^9, 3.614579692285194*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fninterp", "=", 
   RowBox[{"Interpolation", "[", 
    RowBox[{"gridfull", ",", 
     RowBox[{"InterpolationOrder", "\[Rule]", "2"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.614493859552343*^9, 3.614493860439653*^9}, {
   3.614494083426981*^9, 3.6144940872501907`*^9}, {3.614495075177869*^9, 
   3.6144950787625933`*^9}, 3.614497526026338*^9, 3.61449796966538*^9, 
   3.61449828200152*^9, {3.614498376819167*^9, 3.614498376883424*^9}, {
   3.614498793381364*^9, 3.614498826709447*^9}, {3.6144989558463182`*^9, 
   3.614498973837081*^9}, {3.614499453795888*^9, 3.614499474556699*^9}, 
   3.6144997814050694`*^9, 3.614500178934518*^9, 3.6145019727426023`*^9}],

Cell["\<\
Likewise we may construct 1st and 2nd derivatives of this interpolation \
function.\
\>", "Text",
 CellChangeTimes->{{3.614531627905764*^9, 3.614531644948929*^9}, {
  3.614531704344674*^9, 3.614531716392664*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dxfninterp", "[", 
     RowBox[{"x_", ",", "y_"}], "]"}], "=", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fninterp", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", "x"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dyfninterp", "[", 
     RowBox[{"x_", ",", "y_"}], "]"}], "=", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fninterp", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", "y"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dxxfninterp", "[", 
     RowBox[{"x_", ",", "y_"}], "]"}], "=", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fninterp", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "2"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dyyfninterp", "[", 
     RowBox[{"x_", ",", "y_"}], "]"}], "=", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fninterp", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "2"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dxyfninterp", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], "=", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"fninterp", "[", 
      RowBox[{"x", ",", "y"}], "]"}], ",", "x", ",", "y"}], "]"}]}], 
  ";"}]}], "Input"],

Cell["\<\
Write code to use grid and gridfull to create a (flat) list in the domain x\
\[Epsilon](0,1) y\[Epsilon](0,2\[Pi]) of;
          
          1) the x coordinates of each point  (called xval)
        2) the y coordinates of each point  (called yval)
      3) the function value at each point   (called fval)
    4) the x derivative of the function  at each point  (called dxfval)
  5) likewise the other derivaties (called dyfval, dxxfval, dyyfval, dxyfval)
  
  For example, xval and yval should give; \
\>", "Text",
 CellChangeTimes->{{3.614531742733418*^9, 3.6145319333341017`*^9}, {
  3.614531992228107*^9, 3.6145320048522873`*^9}, {3.614532095363126*^9, 
  3.614532096355013*^9}, {3.614576421128253*^9, 3.6145764246482983`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"xval", "=", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.4`", ",", "0.4`", ",", "0.4`", 
      ",", "0.8`", ",", "0.8`", ",", "0.8`"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yval", "=", 
   RowBox[{"{", 
    RowBox[{
    "1.0471975511965976`", ",", "3.141592653589793`", ",", 
     "5.235987755982988`", ",", "1.0471975511965976`", ",", 
     "3.141592653589793`", ",", "5.235987755982988`", ",", 
     "1.0471975511965976`", ",", "3.141592653589793`", ",", 
     "5.235987755982988`"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.614531937335206*^9, 3.614531947656584*^9}, {
  3.6145763962436247`*^9, 3.614576396953817*^9}, {3.614576427547285*^9, 
  3.614576427938813*^9}}],

Cell["For example, fval should look like;", "Text",
 CellChangeTimes->{{3.61453195760058*^9, 3.6145319576962023`*^9}, 
   3.6145320316150093`*^9, {3.614576434544568*^9, 3.614576437343569*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fval", "=", 
   RowBox[{"{", 
    RowBox[{
    "b1", ",", "b2", ",", "b3", ",", "f1", ",", "f2", ",", "f3", ",", "f4", 
     ",", "f5", ",", "f6"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614531977016035*^9, 3.614531980566956*^9}, {
  3.614576402924449*^9, 3.6145764036025677`*^9}}],

Cell["And the derivatives, dxfval ... should look like;", "Text",
 CellChangeTimes->{
  3.614531961863989*^9, {3.614532012406602*^9, 3.614532031615321*^9}, {
   3.614576440383675*^9, 3.6145764503770723`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dxfval", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "3.75`"}], " ", "b1"}], "+", 
      RowBox[{"5.`", " ", "f1"}], "-", 
      RowBox[{"1.25`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "3.75`"}], " ", "b2"}], "+", 
      RowBox[{"5.`", " ", "f2"}], "-", 
      RowBox[{"1.25`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "3.75`"}], " ", "b3"}], "+", 
      RowBox[{"5.`", " ", "f3"}], "-", 
      RowBox[{"1.25`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.25`"}], " ", "b1"}], "+", 
      RowBox[{"1.25`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.25`"}], " ", "b2"}], "+", 
      RowBox[{"1.25`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.25`"}], " ", "b3"}], "+", 
      RowBox[{"1.25`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.2499999999999998`"}], " ", "f1"}], "+", 
      RowBox[{"1.2499999999999998`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.2499999999999998`"}], " ", "f2"}], "+", 
      RowBox[{"1.2499999999999998`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1.2499999999999998`"}], " ", "f3"}], "+", 
      RowBox[{"1.2499999999999998`", " ", "f6"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614531986830554*^9, 3.614531988261735*^9}, {
  3.614532018305545*^9, 3.614532020322543*^9}, {3.614576408143536*^9, 
  3.6145764084542427`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"dyfval", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"0.238732414637843`", " ", "b2"}], "-", 
       RowBox[{"0.238732414637843`", " ", "b3"}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.23873241463784295`"}], " ", "b1"}], "+", 
       RowBox[{"0.23873241463784317`", " ", "b3"}]}], ",", 
      RowBox[{
       RowBox[{"0.23873241463784295`", " ", "b1"}], "-", 
       RowBox[{"0.23873241463784317`", " ", "b2"}]}], ",", 
      RowBox[{
       RowBox[{"0.23873241463784298`", " ", "f2"}], "-", 
       RowBox[{"0.23873241463784298`", " ", "f3"}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.23873241463784292`"}], " ", "f1"}], "+", 
       RowBox[{"0.23873241463784314`", " ", "f3"}]}], ",", 
      RowBox[{
       RowBox[{"0.23873241463784292`", " ", "f1"}], "-", 
       RowBox[{"0.23873241463784314`", " ", "f2"}]}], ",", 
      RowBox[{
       RowBox[{"0.23873241463784298`", " ", "f5"}], "-", 
       RowBox[{"0.23873241463784298`", " ", "f6"}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.23873241463784292`"}], " ", "f4"}], "+", 
       RowBox[{"0.23873241463784314`", " ", "f6"}]}], ",", 
      RowBox[{
       RowBox[{"0.23873241463784292`", " ", "f4"}], "-", 
       RowBox[{"0.23873241463784314`", " ", "f5"}]}]}], "}"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.614532053922464*^9, 3.6145320602568207`*^9}, {
   3.614576411203532*^9, 3.614576411491984*^9}, 3.6441018794834642`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dxxfval", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"6.25`", " ", "b1"}], "-", 
      RowBox[{"12.5`", " ", "f1"}], "+", 
      RowBox[{"6.25`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{"6.25`", " ", "b2"}], "-", 
      RowBox[{"12.5`", " ", "f2"}], "+", 
      RowBox[{"6.25`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{"6.25`", " ", "b3"}], "-", 
      RowBox[{"12.5`", " ", "f3"}], "+", 
      RowBox[{"6.25`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"6.25`", " ", "b1"}], "-", 
      RowBox[{"12.5`", " ", "f1"}], "+", 
      RowBox[{"6.25`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{"6.25`", " ", "b2"}], "-", 
      RowBox[{"12.5`", " ", "f2"}], "+", 
      RowBox[{"6.25`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{"6.25`", " ", "b3"}], "-", 
      RowBox[{"12.5`", " ", "f3"}], "+", 
      RowBox[{"6.25`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f1"}], "-", 
      RowBox[{"6.250000000000001`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f2"}], "-", 
      RowBox[{"6.250000000000001`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f3"}], "-", 
      RowBox[{"6.250000000000001`", " ", "f6"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614532062709812*^9, 3.614532068967792*^9}, {
  3.614576415326331*^9, 3.614576415638214*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dyyfval", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.4559453263905199`"}], " ", "b1"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "b2"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "b3"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "b1"}], "-", 
      RowBox[{"0.45594532639052016`", " ", "b2"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "b3"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "b1"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "b2"}], "-", 
      RowBox[{"0.45594532639052016`", " ", "b3"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.4559453263905199`"}], " ", "f1"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "f2"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "f3"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "f1"}], "-", 
      RowBox[{"0.4559453263905201`", " ", "f2"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "f3"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "f1"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "f2"}], "-", 
      RowBox[{"0.4559453263905201`", " ", "f3"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.4559453263905199`"}], " ", "f4"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "f5"}], "+", 
      RowBox[{"0.22797266319525994`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "f4"}], "-", 
      RowBox[{"0.4559453263905201`", " ", "f5"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"0.22797266319526`", " ", "f4"}], "+", 
      RowBox[{"0.2279726631952601`", " ", "f5"}], "-", 
      RowBox[{"0.4559453263905201`", " ", "f6"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614532072001977*^9, 3.614532076686021*^9}, {
  3.614576463568665*^9, 3.6145764688832417`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"dxyfval", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.8952465548919112`"}], " ", "b2"}], "+", 
      RowBox[{"0.8952465548919112`", " ", "b3"}], "+", 
      RowBox[{"1.193662073189215`", " ", "f2"}], "-", 
      RowBox[{"1.193662073189215`", " ", "f3"}], "-", 
      RowBox[{"0.29841551829730373`", " ", "f5"}], "+", 
      RowBox[{"0.29841551829730373`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"0.8952465548919111`", " ", "b1"}], "-", 
      RowBox[{"0.8952465548919118`", " ", "b3"}], "-", 
      RowBox[{"1.1936620731892147`", " ", "f1"}], "+", 
      RowBox[{"1.1936620731892158`", " ", "f3"}], "+", 
      RowBox[{"0.2984155182973037`", " ", "f4"}], "-", 
      RowBox[{"0.29841551829730395`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.8952465548919111`"}], " ", "b1"}], "+", 
      RowBox[{"0.8952465548919118`", " ", "b2"}], "+", 
      RowBox[{"1.1936620731892147`", " ", "f1"}], "-", 
      RowBox[{"1.1936620731892158`", " ", "f2"}], "-", 
      RowBox[{"0.2984155182973037`", " ", "f4"}], "+", 
      RowBox[{"0.29841551829730395`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.29841551829730373`"}], " ", "b2"}], "+", 
      RowBox[{"0.29841551829730373`", " ", "b3"}], "+", 
      RowBox[{"0.29841551829730373`", " ", "f5"}], "-", 
      RowBox[{"0.29841551829730373`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"0.2984155182973037`", " ", "b1"}], "-", 
      RowBox[{"0.29841551829730395`", " ", "b3"}], "-", 
      RowBox[{"0.2984155182973037`", " ", "f4"}], "+", 
      RowBox[{"0.29841551829730395`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.2984155182973037`"}], " ", "b1"}], "+", 
      RowBox[{"0.29841551829730395`", " ", "b2"}], "+", 
      RowBox[{"0.2984155182973037`", " ", "f4"}], "-", 
      RowBox[{"0.29841551829730395`", " ", "f5"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.2984155182973037`"}], " ", "f2"}], "+", 
      RowBox[{"0.2984155182973037`", " ", "f3"}], "+", 
      RowBox[{"0.2984155182973037`", " ", "f5"}], "-", 
      RowBox[{"0.2984155182973037`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"0.2984155182973036`", " ", "f1"}], "-", 
      RowBox[{"0.2984155182973039`", " ", "f3"}], "-", 
      RowBox[{"0.2984155182973036`", " ", "f4"}], "+", 
      RowBox[{"0.2984155182973039`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "0.2984155182973036`"}], " ", "f1"}], "+", 
      RowBox[{"0.2984155182973039`", " ", "f2"}], "+", 
      RowBox[{"0.2984155182973036`", " ", "f4"}], "-", 
      RowBox[{"0.2984155182973039`", " ", "f5"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614532079164856*^9, 3.614532083677237*^9}, 
   3.614576467575001*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem 4 : check our discretization", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767360290527`*^9}, {
  3.614576817449678*^9, 3.614576822001588*^9}}],

Cell["\<\
Let us check our discretization. 

Create a replace list \[OpenCurlyQuote]varrepl\[CloseCurlyQuote] to assign \
the values to the boundary points b1,b2,... and the interior points f1, f2, \
... defined by the function;\
\>", "Text",
 CellChangeTimes->{{3.614530368902815*^9, 3.6145303719448023`*^9}, {
   3.614530471729886*^9, 3.614530723223517*^9}, {3.6145313033668222`*^9, 
   3.6145313790328827`*^9}, {3.614531535282463*^9, 3.614531596109104*^9}, {
   3.614531669908367*^9, 3.6145316870591583`*^9}, {3.614532138831585*^9, 
   3.614532217214477*^9}, 3.614576737365049*^9, {3.614579793529059*^9, 
   3.614579795929175*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fn", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], "=", 
   RowBox[{
    RowBox[{"Cos", "[", "y", "]"}], 
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"0.5", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "x"}], ")"}], "^", "2"}]}]}], ")"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6144953006610527`*^9, 3.6144953584630613`*^9}, {
  3.614495613223735*^9, 3.614495614301653*^9}, {3.614495928484627*^9, 
  3.614495956055395*^9}, {3.61449615481246*^9, 3.614496160619524*^9}, {
  3.614519874134243*^9, 3.614519876626915*^9}}],

Cell["You should generate a list \
\[OpenCurlyQuote]varrepl\[CloseCurlyQuote];", "Text",
 CellChangeTimes->{{3.614532222516609*^9, 3.614532237194518*^9}, {
  3.6145798178791122`*^9, 3.614579820886821*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"varrepl", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"b1", "\[Rule]", "0.25000000000000006`"}], ",", 
     RowBox[{"b2", "\[Rule]", 
      RowBox[{"-", "0.5`"}]}], ",", 
     RowBox[{"b3", "\[Rule]", "0.24999999999999964`"}], ",", 
     RowBox[{"f1", "\[Rule]", "0.41000000000000014`"}], ",", 
     RowBox[{"f2", "\[Rule]", 
      RowBox[{"-", "0.8200000000000001`"}]}], ",", 
     RowBox[{"f3", "\[Rule]", "0.4099999999999994`"}], ",", 
     RowBox[{"f4", "\[Rule]", "0.4900000000000001`"}], ",", 
     RowBox[{"f5", "\[Rule]", 
      RowBox[{"-", "0.98`"}]}], ",", 
     RowBox[{"f6", "\[Rule]", "0.48999999999999927`"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.614576493732436*^9, {3.6145797993036757`*^9, 3.61457979958843*^9}}],

Cell["\<\
Use this list to compare your differenced derivatives to the actual \
derivatives. For example our 1st order x differences;\
\>", "Text",
 CellChangeTimes->{{3.614532254712318*^9, 3.614532289557475*^9}, {
  3.614532326052371*^9, 3.614532339517284*^9}, {3.6145323866839027`*^9, 
  3.614532387044136*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dxfval", "/.", "varrepl"}]], "Input",
 CellChangeTimes->{{3.614532311728945*^9, 3.614532312926425*^9}, 
   3.6145323816529083`*^9, 3.614532539186922*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5000000000000003`", ",", 
   RowBox[{"-", "1.0000000000000004`"}], ",", "0.49999999999999944`", ",", 
   "0.3000000000000001`", ",", 
   RowBox[{"-", "0.6000000000000001`"}], ",", "0.2999999999999995`", ",", 
   "0.09999999999999998`", ",", 
   RowBox[{"-", "0.19999999999999996`"}], ",", "0.09999999999999976`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6441019591977777`*^9}]
}, Open  ]],

Cell["whereas the exact values would give;", "Text",
 CellChangeTimes->{{3.614532398799918*^9, 3.6145324134867907`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fn", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", "x"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "\[Rule]", 
       RowBox[{"xval", "[", 
        RowBox[{"[", "ii", "]"}], "]"}]}], ",", 
      RowBox[{"y", "\[Rule]", 
       RowBox[{"yval", "[", 
        RowBox[{"[", "ii", "]"}], "]"}]}]}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"ii", ",", "1", ",", 
     RowBox[{"Length", "[", "xval", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6145324171014633`*^9, 3.614532505000581*^9}, {
  3.614579854133494*^9, 3.614579856364184*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5000000000000001`", ",", 
   RowBox[{"-", "1.`"}], ",", "0.49999999999999933`", ",", 
   "0.30000000000000004`", ",", 
   RowBox[{"-", "0.6`"}], ",", "0.2999999999999996`", ",", "0.1`", ",", 
   RowBox[{"-", "0.19999999999999996`"}], ",", "0.09999999999999984`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.64410196490381*^9}]
}, Open  ]],

Cell[TextData[{
 "These agree ",
 StyleBox["exactly",
  FontWeight->"Bold"],
 " as the function is quadratic in x, and we have used 2 nd order \
interpolation. \n\nHowever, the same in y...."
}], "Text",
 CellChangeTimes->{{3.614532548857026*^9, 3.6145325824460077`*^9}, {
  3.6145798924656277`*^9, 3.614579894247999*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dyfval", "/.", "varrepl"}]], "Input",
 CellChangeTimes->{{3.6145325303457537`*^9, 3.614532530347357*^9}, {
  3.614532588301269*^9, 3.614532591171336*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.17904931097838217`"}], ",", 
   RowBox[{"-", "4.163336342344337`*^-17"}], ",", "0.17904931097838234`", ",", 
   RowBox[{"-", "0.29364087000454675`"}], ",", 
   RowBox[{"-", "8.326672684688674`*^-17"}], ",", "0.293640870004547`", ",", 
   RowBox[{"-", "0.350936649517629`"}], ",", 
   RowBox[{"-", "8.326672684688674`*^-17"}], ",", "0.3509366495176293`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.644101971677691*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"fn", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", "y"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "\[Rule]", 
       RowBox[{"xval", "[", 
        RowBox[{"[", "ii", "]"}], "]"}]}], ",", 
      RowBox[{"y", "\[Rule]", 
       RowBox[{"yval", "[", 
        RowBox[{"[", "ii", "]"}], "]"}]}]}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"ii", ",", "1", ",", 
     RowBox[{"Length", "[", "xval", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.614532602773361*^9, 3.6145326064479113`*^9}, {
  3.6145798806971188`*^9, 3.6145798829642563`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.4330127018922193`"}], ",", 
   RowBox[{"-", "6.123233995736766`*^-17"}], ",", "0.4330127018922195`", ",", 
   RowBox[{"-", "0.7101408311032397`"}], ",", 
   RowBox[{"-", "1.0042103753008297`*^-16"}], ",", "0.7101408311032401`", ",", 
   RowBox[{"-", "0.8487048957087499`"}], ",", 
   RowBox[{"-", "1.2001538631644062`*^-16"}], ",", "0.8487048957087503`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.644101976846286*^9}]
}, Open  ]],

Cell[TextData[{
 "... shows only approximate agreement as we would expect. This agreement is ",
 StyleBox["not very good",
  FontWeight->"Bold"],
 " with very few points, but will quickly get better taking larger NX, NY \
(here we only have 3 points in each direction!). Experiment with this, for \
different InterpolationOrders (greater than 2), and check for improvement \
with increasing NX, NY."
}], "Text",
 CellChangeTimes->{{3.614532622316193*^9, 3.614532687623136*^9}, {
  3.614574819835513*^9, 3.614574839616725*^9}, {3.614579896953426*^9, 
  3.6145799136326427`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Problem 5 : implement boundary conditions, initial guess and p.d.e. to be \
solved.\
\>", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767136572123`*^9}, 
   3.614576755717746*^9, {3.614576826273418*^9, 3.6145768529049883`*^9}}],

Cell["\<\
Now we will fix the boundary conditions at x = 0; let us choose these to be \
defined by bfn[y], so that f[0, y] = bfn[y]. Let' s pick the (periodic) \
function cosine;\
\>", "Text",
 CellChangeTimes->{{3.614574872075501*^9, 3.6145749274892597`*^9}, 
   3.614575027979082*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bfn", "[", "y_", "]"}], "=", 
   RowBox[{"Cos", "[", "y", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6144953006610527`*^9, 3.6144953584630613`*^9}, {
  3.614495613223735*^9, 3.614495614301653*^9}, {3.614495928484627*^9, 
  3.614495956055395*^9}, {3.61449615481246*^9, 3.614496160619524*^9}, {
  3.614500876428585*^9, 3.614500883644013*^9}, {3.614501052761271*^9, 
  3.614501061565872*^9}, {3.61451995691461*^9, 3.614519957271803*^9}, {
  3.61457489435397*^9, 3.61457489485255*^9}}],

Cell["\<\
Then write code to create a replace list ' boundaryrepl' that sets the values \
of the boundary variables b1, b2, ... to the appropriate values defined by \
bfn. You should then have a list,\
\>", "Text",
 CellChangeTimes->{{3.6145749298725863`*^9, 3.614575027979512*^9}, {
  3.6145799450211897`*^9, 3.614579945101427*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"boundaryrepl", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"b1", "\[Rule]", "0.5000000000000001`"}], ",", 
     RowBox[{"b2", "\[Rule]", 
      RowBox[{"-", "1.`"}]}], ",", 
     RowBox[{"b3", "\[Rule]", "0.4999999999999993`"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6145750069938803`*^9, 3.614575012349276*^9}, {
  3.6145751589079237`*^9, 3.614575159775897*^9}}],

Cell["\<\
Likewise in order to solve a pde, we will need an initial guess for a \
solution. For simplicity let us just use bfn[y] to define an initial guess \
fguess[x, y] = bfn[y]. Note that this correctly respects all the boundary \
conditions (including reflection symmetry at x=1).

Then write code to create a replace list for the interior variables f1, f2 \
... that implements this initial guess. Call this ' interiorrepl' and it \
should look like;\
\>", "Text",
 CellChangeTimes->{{3.614575032156313*^9, 3.6145751272713747`*^9}, 
   3.614575188904202*^9, {3.6145799625726852`*^9, 3.61457999014711*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"interiorrepl", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f1", "\[Rule]", "0.5000000000000001`"}], ",", 
     RowBox[{"f2", "\[Rule]", 
      RowBox[{"-", "1.`"}]}], ",", 
     RowBox[{"f3", "\[Rule]", "0.4999999999999993`"}], ",", 
     RowBox[{"f4", "\[Rule]", "0.5000000000000001`"}], ",", 
     RowBox[{"f5", "\[Rule]", 
      RowBox[{"-", "1.`"}]}], ",", 
     RowBox[{"f6", "\[Rule]", "0.4999999999999993`"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.614575135247983*^9, 3.6145751741151953`*^9}}],

Cell[TextData[{
 "Now we are ready to solve a pde using this initial guess and boundary \
conditions. We will use the ' FindRoot' function. We must create a list of \
the equations at the interior points, and also a list of the variables (f1, \
f2 ....) to solve for together with an initial guess.\n   \n   Suppose, for \
example, we wish to solve the Laplace equation;  ",
 StyleBox["D[f[x, y], {x, 2}] + 5 D[f[x, y], {y, 2}] == 0",
  FontWeight->"Bold"],
 "\n\nThen we may simply create a list of the equations using; ",
 StyleBox["dxxfval + 5 dyyfval",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.614575199253878*^9, 3.614575213511759*^9}, {
   3.614575327635441*^9, 3.614575431752483*^9}, {3.6145754641591787`*^9, 
   3.614575539532452*^9}, {3.614575571295452*^9, 3.614575614555073*^9}, 
   3.614575732034733*^9, {3.6145769706282053`*^9, 3.6145769720121*^9}, {
   3.6145800374331408`*^9, 3.614580047257914*^9}, {3.614580114326634*^9, 
   3.6145801151810837`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"dxxfval", " ", "+", " ", 
   RowBox[{"5", " ", "dyyfval"}]}],
  FontWeight->"Bold"]], "Input",
 CellChangeTimes->{{3.614580100980876*^9, 3.614580102904398*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"6.25`", " ", "b1"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.4559453263905199`"}], " ", "b1"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "b2"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "b3"}]}], ")"}]}], "-", 
    RowBox[{"12.5`", " ", "f1"}], "+", 
    RowBox[{"6.25`", " ", "f4"}]}], ",", 
   RowBox[{
    RowBox[{"6.25`", " ", "b2"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "b1"}], "-", 
       RowBox[{"0.45594532639052016`", " ", "b2"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "b3"}]}], ")"}]}], "-", 
    RowBox[{"12.5`", " ", "f2"}], "+", 
    RowBox[{"6.25`", " ", "f5"}]}], ",", 
   RowBox[{
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "b1"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "b2"}], "-", 
       RowBox[{"0.45594532639052016`", " ", "b3"}]}], ")"}]}], "+", 
    RowBox[{"6.25`", " ", "b3"}], "-", 
    RowBox[{"12.5`", " ", "f3"}], "+", 
    RowBox[{"6.25`", " ", "f6"}]}], ",", 
   RowBox[{
    RowBox[{"6.25`", " ", "b1"}], "-", 
    RowBox[{"12.5`", " ", "f1"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.4559453263905199`"}], " ", "f1"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "f2"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "f3"}]}], ")"}]}], "+", 
    RowBox[{"6.25`", " ", "f4"}]}], ",", 
   RowBox[{
    RowBox[{"6.25`", " ", "b2"}], "-", 
    RowBox[{"12.5`", " ", "f2"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "f1"}], "-", 
       RowBox[{"0.4559453263905201`", " ", "f2"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "f3"}]}], ")"}]}], "+", 
    RowBox[{"6.25`", " ", "f5"}]}], ",", 
   RowBox[{
    RowBox[{"6.25`", " ", "b3"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "f1"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "f2"}], "-", 
       RowBox[{"0.4559453263905201`", " ", "f3"}]}], ")"}]}], "-", 
    RowBox[{"12.5`", " ", "f3"}], "+", 
    RowBox[{"6.25`", " ", "f6"}]}], ",", 
   RowBox[{
    RowBox[{"6.250000000000001`", " ", "f1"}], "-", 
    RowBox[{"6.250000000000001`", " ", "f4"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.4559453263905199`"}], " ", "f4"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "f5"}], "+", 
       RowBox[{"0.22797266319525994`", " ", "f6"}]}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{"6.250000000000001`", " ", "f2"}], "-", 
    RowBox[{"6.250000000000001`", " ", "f5"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "f4"}], "-", 
       RowBox[{"0.4559453263905201`", " ", "f5"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "f6"}]}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{"6.250000000000001`", " ", "f3"}], "+", 
    RowBox[{"5", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"0.22797266319526`", " ", "f4"}], "+", 
       RowBox[{"0.2279726631952601`", " ", "f5"}], "-", 
       RowBox[{"0.4559453263905201`", " ", "f6"}]}], ")"}]}], "-", 
    RowBox[{"6.250000000000001`", " ", "f6"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.644102057378346*^9}]
}, Open  ]],

Cell["\<\
 This is a list of the LHS of our pde equation evaluated at all points on the \
grid domain. We must remove the boundary points from this list. Also we \
should use ' boundaryrepl' to put in the correct values for the boundary \
points b1, b2, ... 

Write code to strip off the boundary points, and replace the values for the \
boundary points, and store the resulting list in ' interiorequations'. This \
should look like;\
\>", "Text",
 CellChangeTimes->{{3.61458011721701*^9, 3.61458012982802*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"interiorequations", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"3.125000000000001`", "\[VeryThinSpace]", "-", 
      RowBox[{"12.5`", " ", "f1"}], "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "0.4559453263905199`"}], " ", "f1"}], "+", 
         RowBox[{"0.22797266319525994`", " ", "f2"}], "+", 
         RowBox[{"0.22797266319525994`", " ", "f3"}]}], ")"}]}], "+", 
      RowBox[{"6.25`", " ", "f4"}]}], ",", 
     RowBox[{
      RowBox[{"-", "6.25`"}], "-", 
      RowBox[{"12.5`", " ", "f2"}], "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"0.22797266319526`", " ", "f1"}], "-", 
         RowBox[{"0.4559453263905201`", " ", "f2"}], "+", 
         RowBox[{"0.2279726631952601`", " ", "f3"}]}], ")"}]}], "+", 
      RowBox[{"6.25`", " ", "f5"}]}], ",", 
     RowBox[{"3.1249999999999956`", "\[VeryThinSpace]", "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"0.22797266319526`", " ", "f1"}], "+", 
         RowBox[{"0.2279726631952601`", " ", "f2"}], "-", 
         RowBox[{"0.4559453263905201`", " ", "f3"}]}], ")"}]}], "-", 
      RowBox[{"12.5`", " ", "f3"}], "+", 
      RowBox[{"6.25`", " ", "f6"}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f1"}], "-", 
      RowBox[{"6.250000000000001`", " ", "f4"}], "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "0.4559453263905199`"}], " ", "f4"}], "+", 
         RowBox[{"0.22797266319525994`", " ", "f5"}], "+", 
         RowBox[{"0.22797266319525994`", " ", "f6"}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f2"}], "-", 
      RowBox[{"6.250000000000001`", " ", "f5"}], "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"0.22797266319526`", " ", "f4"}], "-", 
         RowBox[{"0.4559453263905201`", " ", "f5"}], "+", 
         RowBox[{"0.2279726631952601`", " ", "f6"}]}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"6.250000000000001`", " ", "f3"}], "+", 
      RowBox[{"5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"0.22797266319526`", " ", "f4"}], "+", 
         RowBox[{"0.2279726631952601`", " ", "f5"}], "-", 
         RowBox[{"0.4559453263905201`", " ", "f6"}]}], ")"}]}], "-", 
      RowBox[{"6.250000000000001`", " ", "f6"}]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.614575548244096*^9, 3.614575549727261*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem 6 : Solve the Laplace equation", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767136572123`*^9}, 
   3.614576755717746*^9, {3.614576826273418*^9, 3.61457687396128*^9}, {
   3.6145769941541157`*^9, 3.614577002088945*^9}}],

Cell["\<\
Then we must create a list of the interior variables we wish to solve for \
(ie. f1, f2....), together with an initial guess for each (using \
interiorrepl). This must take the form {{f1, f1guess}, {f2, f2guess}, ...}, \
with the appropriate values for the guesses. Write code to generate this list \
and store it in ' varandguess'. It should look like;\
\>", "Text",
 CellChangeTimes->{{3.6145756200973577`*^9, 3.614575732035301*^9}, {
  3.614580165613441*^9, 3.6145801891980352`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"varandguess", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f1", ",", "0.5000000000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f2", ",", 
       RowBox[{"-", "1.`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f3", ",", "0.4999999999999993`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f4", ",", "0.5000000000000001`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f5", ",", 
       RowBox[{"-", "1.`"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"f6", ",", "0.4999999999999993`"}], "}"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6145757184691*^9, 3.614575723278915*^9}}],

Cell["\<\
Now we can pass these arguements to FindRoot, and store the solution in the \
replacement list \[OpenCurlyQuote]solution\[CloseCurlyQuote].\
\>", "Text",
 CellChangeTimes->{{3.6145757347212057`*^9, 3.6145757934809303`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"solution", "=", 
   RowBox[{"FindRoot", "[", 
    RowBox[{"interiorequations", ",", "varandguess"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.6145758184144897`*^9, 3.614575861300818*^9}],

Cell["\<\
In fact it is interesting to see how FindRoot does in solving. We may use the \
' StepMonitor' option as;\
\>", "Text",
 CellChangeTimes->{{3.614575778865748*^9, 3.614575835010009*^9}, 
   3.6145759035845137`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"solution", "=", 
   RowBox[{"FindRoot", "[", 
    RowBox[{"interiorequations", ",", "varandguess", ",", 
     RowBox[{"StepMonitor", "\[RuleDelayed]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<norm = \>\"", ",", 
        RowBox[{"Norm", "[", "interiorequations", "]"}]}], "]"}]}]}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.614575822780056*^9, 3.614575862976796*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"norm = \"\>", "\[InvisibleSpace]", "1.3136335981433192`*^-15"}],
  SequenceForm["norm = ", 1.3136335981433192`*^-15],
  Editable->False]], "Print",
 CellChangeTimes->{3.6441020865851927`*^9}]
}, Open  ]],

Cell["\<\
(Note; only one step is required as the pde is linear and each step is \
Newton-Rapheson which is exact for a linear system)

You should then find the following solution;\
\>", "Text",
 CellChangeTimes->{{3.614575864332551*^9, 3.61457587166086*^9}, 
   3.6145759035848503`*^9, {3.61458022251381*^9, 3.6145802695205708`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"solution", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f1", "\[Rule]", "0.26305016446675833`"}], ",", 
     RowBox[{"f2", "\[Rule]", 
      RowBox[{"-", "0.5261003289335167`"}]}], ",", 
     RowBox[{"f3", "\[Rule]", "0.2630501644667579`"}], ",", 
     RowBox[{"f4", "\[Rule]", "0.170024120647368`"}], ",", 
     RowBox[{"f5", "\[Rule]", 
      RowBox[{"-", "0.3400482412947359`"}]}], ",", 
     RowBox[{"f6", "\[Rule]", "0.17002412064736766`"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.614575891943392*^9, 3.614575893820345*^9}}],

Cell["We may easily plot our solution using the code;", "Text",
 CellChangeTimes->{{3.614576279942086*^9, 3.6145763069972267`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"grid", "[", 
        RowBox[{"[", 
         RowBox[{"ii", ",", "1", ",", "1"}], "]"}], "]"}], ",", 
       RowBox[{"grid", "[", 
        RowBox[{"[", 
         RowBox[{"ii", ",", "1", ",", "2"}], "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"fval", "[", 
          RowBox[{"[", "ii", "]"}], "]"}], "/.", "boundaryrepl"}], "/.", 
        "solution"}]}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"ii", ",", "1", ",", 
       RowBox[{"Length", "[", "grid", "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.614576310226377*^9, 3.614576312472063*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwt0rkvhEEYx/EZ69hYZ6Kx7kaIwrW7NpGIyk0hlkKIKFRCo6N032en0igk
QqVRqMQRlUKj8g+oNArx/WWe4pOZnXfneef5vVM3uzi6kOWc60IEhSjCO+Ko
QI53bt3WH9GLXExhDTHcowHZKMU2qhBlb5/t+UYGet88VjCsPfxnl7Eabcx3
bB5j3sGYwi1OMIhJ1jcYi/GEM6szx/op4xBmmB8xJnFjewfwh3L15ELtVTv/
KzZRgmcX+lX9D1tXT1/YQqX696H3Ary5cB7t/UTasmzBiGWl/k/t/N6HHPLx
gmP04xeNdra4fQvVf7DnyvEHPchDrZ1fde7Qau88V472+8JyjmLa6qr+Mg7Q
jisXslLOPZzt0HLr9iFb5Rmxb6G94y58rxpl5ENvOtsY8z07V5nVSeDa7oNy
a/LhvVrvZL5vdRI+ZKv7Vu/D2dVDyod89O0mfOhPz5J2r5RLxoc+9P9Ly0D5
L9manqXtXulONjP/B8zjPnw=
          "]], Polygon3DBox[CompressedData["
1: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
7jmWvBbhs2PkdzeT2HnueMc+RJv/APP5uTM=
          "]], Polygon3DBox[CompressedData["
1:eJwt0jsvREEYxvEzy7rthlXQYF0Sl5AQ1mo0FEjsaiSiIG4FBeELKLFu6+5L
ELeGgkLjumgUq6DhU5AQ/8k8xS/nmTMn8868cyon5vpnfZ7nVcGPQxzgGK3Y
RLtxeQsd5E74UcJ4BVnkbGTAh0z08X4fpzjBGdqwrTWiyt3kHuPWKGW8ihxy
rnF7ONIaUdUP8D7Mcx0F5JBx35cxXtN8EIPoZbyLIfIwDDztM07cwwymcYE8
DOAdISzjE1+4xQ3ubV0s4RX5ymm8qVZMa4+RxzGpfsxjBKP4wTf+PLfPHdTw
XTUa1Avb2ytc4hpBLOrc5Tw3UEQuNq5WXD239aYQQZftMSqQxKPOuYAUnnT2
c9UKaM7uoR5N6q29lxZys/0XVN/egZ1vNG4urDuwZ/r1XL9juoOU1rb7f8aL
enmHB/U7oVyLOhTqDtLqeUJ384F/RkxGVA==
          "]]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], 
      Line3DBox[{94, 8, 131, 130, 129, 128, 127, 126, 125, 7, 70, 69, 68, 67, 
       66, 65, 64, 4, 40, 39, 38, 37, 36, 35, 34, 33, 1, 102, 103, 104, 105, 
       106, 107, 108, 2, 109, 110, 111, 112, 113, 114, 115, 116, 3, 56, 57, 
       58, 59, 60, 61, 62, 63, 6, 78, 79, 80, 81, 82, 83, 84, 9, 101, 100, 99,
        98, 97, 96, 95, 94}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{94, 124, 260, 258, 255, 251, 246, 240, 233, 86, 55, 177, 175,
        172, 168, 163, 157, 150, 109}], 
      Line3DBox[{108, 85, 202, 204, 207, 210, 214, 219, 225, 232, 123, 26, 
       261, 263, 266, 270, 275, 282, 131}], 
      Line3DBox[{116, 48, 309, 311, 314, 319, 325, 332, 339, 93, 71, 340, 342,
        346, 351, 357, 364, 101}], 
      Line3DBox[{125, 276, 141, 307, 304, 300, 295, 289, 283, 117, 226, 136, 
       201, 199, 196, 193, 189, 184, 178, 102}], 
      Line3DBox[{95, 358, 149, 259, 256, 252, 247, 241, 234, 87, 333, 326, 
       145, 176, 173, 169, 164, 158, 151, 110}], 
      Line3DBox[{96, 359, 352, 148, 257, 253, 248, 242, 235, 88, 334, 327, 
       320, 144, 174, 170, 165, 159, 152, 111}], 
      Line3DBox[{97, 360, 353, 347, 147, 254, 249, 243, 236, 89, 335, 328, 
       321, 315, 143, 171, 166, 160, 153, 112}], 
      Line3DBox[{98, 361, 354, 348, 343, 146, 250, 244, 237, 90, 336, 329, 
       322, 316, 51, 167, 161, 154, 113}], 
      Line3DBox[{99, 362, 355, 349, 344, 73, 245, 238, 91, 337, 330, 323, 317,
        312, 50, 162, 155, 114}], 
      Line3DBox[{100, 363, 356, 350, 345, 341, 72, 239, 92, 338, 331, 324, 
       318, 313, 310, 49, 156, 115}], 
      Line3DBox[{103, 179, 185, 190, 194, 197, 200, 135, 220, 227, 118, 284, 
       290, 296, 301, 305, 308, 142, 277, 126}], 
      Line3DBox[{104, 180, 186, 191, 195, 198, 134, 215, 221, 228, 119, 285, 
       291, 297, 302, 306, 140, 271, 278, 127}], 
      Line3DBox[{105, 181, 187, 192, 13, 211, 216, 222, 229, 120, 286, 292, 
       298, 303, 139, 267, 272, 279, 128}], 
      Line3DBox[{106, 182, 188, 133, 205, 208, 212, 217, 223, 230, 121, 287, 
       293, 299, 138, 264, 268, 273, 280, 129}], 
      Line3DBox[{107, 183, 132, 203, 206, 209, 213, 218, 224, 231, 122, 288, 
       294, 137, 262, 265, 269, 274, 281, 130}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{33, 178, 179, 180, 181, 182, 183, 10, 202, 18, 150, 151, 152,
        153, 154, 155, 156, 48, 56}], 
      Line3DBox[{63, 339, 338, 337, 336, 335, 334, 333, 55, 25, 232, 231, 230,
        229, 228, 227, 226, 17, 40}], 
      Line3DBox[{64, 283, 284, 285, 286, 287, 288, 26, 41, 233, 234, 235, 236,
        237, 238, 239, 71, 78}], 
      Line3DBox[{84, 364, 363, 362, 361, 360, 359, 358, 77, 260, 47, 282, 281,
        280, 279, 278, 277, 276, 32, 70}], 
      Line3DBox[{34, 184, 185, 186, 187, 188, 11, 203, 204, 19, 157, 158, 159,
        160, 161, 162, 49, 309, 57}], 
      Line3DBox[{35, 189, 190, 191, 192, 12, 205, 206, 207, 20, 163, 164, 165,
        166, 167, 50, 310, 311, 58}], 
      Line3DBox[{36, 193, 194, 195, 13, 208, 209, 210, 21, 168, 169, 170, 171,
        51, 312, 313, 314, 59}], 
      Line3DBox[{37, 196, 197, 198, 14, 211, 212, 213, 214, 22, 172, 173, 174,
        52, 315, 316, 317, 318, 319, 60}], 
      Line3DBox[{38, 199, 200, 15, 215, 216, 217, 218, 219, 23, 175, 176, 53, 
       320, 321, 322, 323, 324, 325, 61}], 
      Line3DBox[{39, 201, 16, 220, 221, 222, 223, 224, 225, 24, 177, 54, 326, 
       327, 328, 329, 330, 331, 332, 62}], 
      Line3DBox[{65, 289, 290, 291, 292, 293, 294, 27, 261, 42, 240, 241, 242,
        243, 244, 245, 72, 340, 79}], 
      Line3DBox[{66, 295, 296, 297, 298, 299, 28, 262, 263, 43, 246, 247, 248,
        249, 250, 73, 341, 342, 80}], 
      Line3DBox[{67, 300, 301, 302, 303, 29, 264, 265, 266, 44, 251, 252, 253,
        254, 74, 343, 344, 345, 346, 81}], 
      Line3DBox[{68, 304, 305, 306, 30, 267, 268, 269, 270, 45, 255, 256, 257,
        75, 347, 348, 349, 350, 351, 82}], 
      Line3DBox[{69, 307, 308, 31, 271, 272, 273, 274, 275, 46, 258, 259, 76, 
       352, 353, 354, 355, 356, 357, 83}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
SSw=
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{All, All, All},
  PlotRangePadding->{Automatic, Automatic, Automatic},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.644102104858697*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "Determine", " ", "the", " ", "exact", " ", "analytic", " ", "solution", 
   " ", "for", " ", "this", " ", 
   RowBox[{"p", ".", "d", ".", "e", ".", " ", "with"}], " ", "its", " ", 
   "boundary", " ", "conditions", " ", "and", " ", "compare", " ", "it", " ", 
   "to", " ", "our", " ", "discretized", " ", 
   RowBox[{
   "solution", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", "Of"}], " ",
    "course", " ", "the", " ", "agreement", " ", "is", " ", "not", " ", 
   "very", " ", "good", " ", "for", " ", "such", " ", "low", " ", "numbers", 
   " ", "of", " ", "points", " ", "but", " ", "increasing", " ", "NX"}], ",", 
  " ", 
  RowBox[{"NY", " ", "to", " ", "10", " ", "each"}], ",", " ", 
  RowBox[{
   RowBox[{"and", " ", "taking", " ", "InterpolationOrder"}], "\[Rule]", 
   RowBox[{"6", " ", "should", " ", "give", " ", "a", " ", "nice", " ", 
    RowBox[{"agreement", "."}]}]}]}]], "Text",
 CellChangeTimes->{{3.61457591247508*^9, 3.6145760475005913`*^9}, {
  3.6145802922143497`*^9, 3.614580321404963*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem 7 : Solve a non-linear Laplace equation", "Subtitle",
 CellChangeTimes->{{3.614576705562067*^9, 3.6145767136572123`*^9}, 
   3.614576755717746*^9, {3.614576826273418*^9, 3.61457687396128*^9}, {
   3.6145769941541157`*^9, 3.614577013104905*^9}, 3.6145836342448797`*^9}],

Cell[TextData[{
 "Where these methods become much more powerful is when no exact solution is \
available. Now try to modify your equation to solve the ",
 StyleBox["*non - linear* ",
  FontWeight->"Bold"],
 "elliptic pde;\n\nD[f[x, y], {x, 2}] + 5 D[f[x, y], {y, 2}] - 2 f[x, y]^2 == \
0\n\nJust do the same manipulations (strip boundary points and replace \
boundary values) as above, but now on the list; \n\ndxxfval + 5 dyyfval - 2 \
fval^2"
}], "Text",
 CellChangeTimes->{{3.6145770494414597`*^9, 3.614577084224771*^9}, {
  3.614578899021061*^9, 3.614578899357349*^9}}],

Cell["You should then find a solution;", "Text",
 CellChangeTimes->{{3.61457612139172*^9, 3.614576125436276*^9}, 
   3.6145762316573*^9, {3.614580367982316*^9, 3.614580368406258*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"solution2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f1", "\[Rule]", "0.20404183989284114`"}], ",", 
     RowBox[{"f2", "\[Rule]", 
      RowBox[{"-", "0.6915666859498503`"}]}], ",", 
     RowBox[{"f3", "\[Rule]", "0.20404183989284064`"}], ",", 
     RowBox[{"f4", "\[Rule]", "0.08474567161566736`"}], ",", 
     RowBox[{"f5", "\[Rule]", 
      RowBox[{"-", "0.5567675552494726`"}]}], ",", 
     RowBox[{"f6", "\[Rule]", "0.084745671615667`"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.614576179851096*^9, 3.6145761803237667`*^9}}],

Cell["\<\
Check that the solution to this equation is consistent with converging to a \
(smooth) solution as you increase NX, NY. Also check that the reflection \
boundary condition at x=1 and periodicity of y are correctly implemented in \
the solution.\
\>", "Text",
 CellChangeTimes->{{3.614576187274818*^9, 3.614576231657709*^9}, {
  3.614576335221764*^9, 3.614576364901195*^9}}]
}, Open  ]]
},
WindowSize->{1440, 852},
WindowMargins->{{Automatic, 180}, {947, Automatic}},
FrontEndVersion->"10.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 23, \
2015)",
StyleDefinitions->FrontEnd`FileName[{"Creative"}, "PastelColor.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 770, 19, 252, "Subtitle"],
Cell[1352, 43, 5067, 131, 232, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6456, 179, 148, 2, 22, "Subtitle"],
Cell[6607, 183, 310, 6, 29, "Text"],
Cell[6920, 191, 345, 9, 73, "Input"],
Cell[7268, 202, 167, 3, 29, "Text"],
Cell[CellGroupData[{
Cell[7460, 209, 443, 11, 59, "Input"],
Cell[7906, 222, 133, 3, 38, "Output"]
}, Open  ]],
Cell[8054, 228, 563, 9, 65, "Text"],
Cell[CellGroupData[{
Cell[8642, 241, 314, 7, 38, "Input"],
Cell[8959, 250, 177, 5, 38, "Output"]
}, Open  ]],
Cell[9151, 258, 267, 3, 29, "Text"],
Cell[CellGroupData[{
Cell[9443, 265, 524, 12, 58, "Input"],
Cell[9970, 279, 184, 5, 38, "Output"]
}, Open  ]],
Cell[10169, 287, 476, 8, 47, "Text"],
Cell[CellGroupData[{
Cell[10670, 299, 287, 8, 38, "Input"],
Cell[10960, 309, 405, 8, 38, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11414, 323, 172, 2, 22, "Subtitle"],
Cell[11589, 327, 717, 11, 47, "Text"],
Cell[12309, 340, 1674, 47, 175, "Input"],
Cell[CellGroupData[{
Cell[14008, 391, 52, 1, 38, "Input"],
Cell[14063, 394, 1331, 48, 56, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[15443, 448, 243, 5, 22, "Subtitle"],
Cell[15689, 455, 854, 13, 47, "Text"],
Cell[16546, 470, 6646, 200, 941, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23229, 675, 247, 5, 22, "Subtitle"],
Cell[23479, 682, 1005, 17, 83, "Text"],
Cell[24487, 701, 705, 13, 38, "Input"],
Cell[25195, 716, 222, 5, 29, "Text"],
Cell[25420, 723, 1571, 53, 175, "Input"],
Cell[26994, 778, 741, 14, 173, "Text"],
Cell[27738, 794, 811, 20, 90, "Input"],
Cell[28552, 816, 192, 2, 29, "Text"],
Cell[28747, 820, 326, 8, 38, "Input"],
Cell[29076, 830, 208, 3, 29, "Text"],
Cell[29287, 835, 1578, 46, 56, "Input"],
Cell[30868, 883, 1551, 38, 90, "Input"],
Cell[32422, 923, 1447, 39, 56, "Input"],
Cell[33872, 964, 1940, 45, 107, "Input"],
Cell[35815, 1011, 2838, 63, 175, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38690, 1079, 173, 2, 22, "Subtitle"],
Cell[38866, 1083, 634, 12, 65, "Text"],
Cell[39503, 1097, 602, 17, 38, "Input"],
Cell[40108, 1116, 205, 3, 29, "Text"],
Cell[40316, 1121, 787, 19, 56, "Input"],
Cell[41106, 1142, 313, 6, 29, "Text"],
Cell[CellGroupData[{
Cell[41444, 1152, 177, 3, 38, "Input"],
Cell[41624, 1157, 421, 9, 38, "Output"]
}, Open  ]],
Cell[42060, 1169, 120, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[42205, 1174, 688, 20, 38, "Input"],
Cell[42896, 1196, 368, 8, 38, "Output"]
}, Open  ]],
Cell[43279, 1207, 322, 8, 65, "Text"],
Cell[CellGroupData[{
Cell[43626, 1219, 178, 3, 38, "Input"],
Cell[43807, 1224, 477, 10, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44321, 1239, 692, 20, 38, "Input"],
Cell[45016, 1261, 478, 10, 45, "Output"]
}, Open  ]],
Cell[45509, 1274, 577, 11, 47, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46123, 1290, 253, 5, 22, "Subtitle"],
Cell[46379, 1297, 286, 6, 29, "Text"],
Cell[46668, 1305, 533, 10, 38, "Input"],
Cell[47204, 1317, 333, 6, 29, "Text"],
Cell[47540, 1325, 418, 11, 38, "Input"],
Cell[47961, 1338, 611, 11, 83, "Text"],
Cell[48575, 1351, 556, 14, 38, "Input"],
Cell[49134, 1367, 980, 17, 119, "Text"],
Cell[CellGroupData[{
Cell[50139, 1388, 196, 5, 38, "Input"],
Cell[50338, 1395, 3478, 93, 107, "Output"]
}, Open  ]],
Cell[53831, 1491, 511, 10, 83, "Text"],
Cell[54345, 1503, 2541, 62, 124, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56923, 1570, 249, 3, 22, "Subtitle"],
Cell[57175, 1575, 496, 8, 47, "Text"],
Cell[57674, 1585, 679, 20, 38, "Input"],
Cell[58356, 1607, 233, 4, 29, "Text"],
Cell[58592, 1613, 230, 6, 38, "Input"],
Cell[58825, 1621, 223, 5, 29, "Text"],
Cell[CellGroupData[{
Cell[59073, 1630, 420, 10, 38, "Input"],
Cell[59496, 1642, 240, 5, 25, "Print"]
}, Open  ]],
Cell[59751, 1650, 334, 7, 65, "Text"],
Cell[60088, 1659, 583, 14, 38, "Input"],
Cell[60674, 1675, 131, 1, 29, "Text"],
Cell[CellGroupData[{
Cell[60830, 1680, 832, 22, 73, "Input"],
Cell[61665, 1704, 22505, 381, 317, "Output"]
}, Open  ]],
Cell[84185, 2088, 1060, 20, 65, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85282, 2113, 282, 3, 22, "Subtitle"],
Cell[85567, 2118, 573, 11, 137, "Text"],
Cell[86143, 2131, 183, 2, 29, "Text"],
Cell[86329, 2135, 587, 14, 38, "Input"],
Cell[86919, 2151, 383, 7, 47, "Text"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
