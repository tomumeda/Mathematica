(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     64891,       1596]
NotebookOptionsPosition[     57612,       1397]
NotebookOutlinePosition[     60004,       1456]
CellTagsIndexPosition[     59925,       1451]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a general purpose tool"
}], "Subsection",
 CellChangeTimes->{
  3.5677576479117575`*^9, {3.56775769201528*^9, 3.567757695118458*^9}, 
   3.5678230852246017`*^9, {3.571947214348036*^9, 3.571947224716629*^9}, 
   3.5719477396330805`*^9}],

Cell[TextData[{
 "Having the need to serve as calculation tool for many different experts, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has always had many area of mathematical knowledge. Here are just few \
examples"
}], "Text",
 CellChangeTimes->{{3.5677600738335123`*^9, 3.5677601211452184`*^9}, {
   3.567760165897778*^9, 3.5677601713290887`*^9}, {3.5677604215614014`*^9, 
   3.5677604919704285`*^9}, {3.567762415089424*^9, 3.5677624408668985`*^9}, {
   3.5677633903702073`*^9, 3.5677633912112556`*^9}, 3.5678364160858083`*^9, {
   3.571947235623253*^9, 3.5719472921774874`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnU2sJcdVx4ePBZo3MxsWsATkr3hsj5EQiAVCQbNBYpVsghCLRLpm4QVS
iIQiEcmguxqJDWFjIQh+OHESx544OIRJ4ufJF3GcT3sch1gJMRlHg0hEiOFJ
JiQM93bfrjp16lR19f14t27f309HM/d2V1dVd5+qf1V1v3t+8S1/+Ib7fvLU
qVN/9DOzf97w5j9+/Vvf+ua3v/GnZ19+6+1vm7zlp2YffuknTp365Vma+ecX
7z2HYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGOfvyPeeeuvPMx+4886m7zn51
25XBMAzD9tY+fueZv73ltLR/uuvs1muFYRiG7Zx99u6zn7v77LONfS5h7a7n
LxiHOz16720HR+e9Nn3pHlQJwzAMG2aP3X6g5jgpe8+tB0qVvnLhXLvr4VsP
2i0fft1Cla7ceWbrp4ZhGIbtlj3XycpDtxw8deeZ9pHQR4XNtjjZms2V5LH/
0AnQ0+e9AM0OeeTWg2fuZpaEYRiGDbZP33W2VZZPpZ8BPd6okpSkF+49N5sc
tQd+kWU6DMMwbE3293ecyT8D+kwjW/K9hWfvXgjZu7tVOwzDMAxbi7VTnvck
9OX5Zn3v6fNekp7uXmZ49DbjkPah0lM8UcIwDMOG2zPdrOfK62wd+ezdZz8v
5lBPdhOrJ+7Q6a91z6dm9snzrOlhGIZhg+0j3esKnyt4OeED3TsPT0aSNLMn
OsEy92IYhmFYrz3SLN+911qLU/ae7t2GjyZW52Zi9NjtB1+6Z801fOXqzYZv
fPdN8d7Xf/flZufV+4tye9M7X7t55RV57Mvv/OZ2b0GFVUpaU73eS/2OK7Mb
8uo7rGM3cmphzrt0PTEM0/ale3qW75wd3nKwlT9B6iTp5mvver3eO+9/BkjS
N9/1jZuV9VcVViltJZKUGiSckCTt1PXEsJ2x62/9vZnd/PGPbqZp06xe1ifO
L1Tps+nlO/m0KDVL2pA1knTl1atG3zLvf65eeXU8klS5FUhSM0h47eVvRLPa
E7raFd5iDBuH/cvv/sZ/vO+vUnr0n08+MkuwrrLe3SzKvT+9fPeckCT3Wt2z
d5+dydnT588+cceZD9x+8Ohtc7tm/QzRKtZK0ivz5SCjl3v1HfdrSWoWjhzd
3KobvfuNrr9qcrAnYn5XIBxtxztL3JW1ONAVrbrBwVWKD7R6+I5olSw0u/Rz
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
nV540turIWyU1r07B13VW5v7uyFv945pFxA67urVyPsqnrw7jFKSJpNJ5+Lz
7/OvOZcX/rpxSVqtbSQkaa1tjdZbMYsRl3DuKiWprebciZJVDNxsk9oIO8Y4
JenwcHrRDfSnh6JZuFlU1wbEhtl3p2hq5OZTddvaVjSduqRHh/qonrJkowz3
JA4vkyTRvP3O9ry62lrnVV7DcIwe5SmrjbKtGeef4q7OL7x503tdNEyQ8/ZF
0okTxJ677CpRJknRmfiCrMpY7UWPK8O6LeXJsBV2T5IuT66fOu3sxqVrwd6F
b88aX+fPi5bo3Dt24cibfZtTLV+396DR+M3uqGxZKi+10Tx8NUnS51VemUjc
/Gn3XCva90CK3Ptwqvr7tCTlXDRKoEREu4JztP67LGTBHpdkJSlZUNpvLRH0
dVvCk2FLjFSS5gP8haNOj/RITS9z2wt39kAvbAKJEVpZWXFrilGH558lRX2E
1fyyAqdOpvsYnJT7YuYp+z5YgjL3boZaLxXNkjIuKhOInA1vtxQkc5etSb8i
tXAXbM80PV122Fz1/iU8GbbEWCXJtdmglQl3tVtBUpIC5gl623tvWUEziZqB
efiKC3fWeQ2WJGtr3L900LoHUubeevq/giQFt20xfou8PfazzF12E53uQ5On
8oTg+Lga4nR1ZWy/lcfFdVvOk2EbjFWS2vlRO1eyRkO5hbvcLMnR1977y8qO
+uzD1ypJG5kl6VOgeQ+k0L2ba+7f29nQLMmT7Krjuyxz8JqSk5Dk9kzTK8nP
141Z0u4wWkmaDyOn00ngcaL5iGX0PkmSG+3mnJSkbFmmNgQ9Q3R4iSSZy/K9
a/Lm0NmaUKlpYGE3CKUUS1I3F1D3Qtz0MknSGZjeru5l/i4blYyFpUiS+isj
h6CZFfUlPBm2xO5JUh7Lz7Rft6O2qep6L7olhvxilFwcyD5L6itLFiBXKKJN
/vASSRJF+GJT52WU21vDaJCZvlapBwmwJPEoX/f94qYXzpLiN81ib88u3Bl3
WS6ddZMT++mOeWSiIL859tvEwp2hm+WeDNtgbJIEAAA7C5IEAACVgCQBAEAl
IEkAAFAJSBIAAFQCkgQAAJWAJAEAQCUgSQAAUAlIEgAAVAKSBAAAlYAkAQBA
JSBJAABQCUgSAABUApIEAACVgCQBAEAljE2SwvjJmw18UhhbxcVn0QGFBkYT
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
kCQAAKgEJAkAACoBSQIAgEqY6dH/A8dfq7I=
    "], {{0, 290}, {561, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{561, 290},
  PlotRange->{{0, 561}, {0, 290}}]], "Figura",
 CellChangeTimes->{3.5719681573453455`*^9, 3.571968301456588*^9, 
  3.571969344575251*^9}],

Cell["\<\
Figure 1. Mathematics and Algorithms: list of general topics covered by \
Mathematica\
\>", "Didascalia",
 CellChangeTimes->{{3.5719683113411536`*^9, 3.571968340519822*^9}, 
   3.5719683844763365`*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnU2sHclVxy1g4fssJBaIDbafnz+yQAiEkNiwiEAWi+wmrFAkpETcWQQh
pIAYZTdIbyYznu/vsefTzoxnPLHjeXYyGaLIEoqQAkIE4Q0ZKxrAgCWEWDBY
CIhiqqtud5+qOlXd992+99Xt9/vpjOe+vtXV1d2n6l+num7X1hf+8LP3/8SB
Awf+6KD557Off+A3vvSlz3/5t3/K/PGbX/7j6Rd+0nz4xPz3KyZN9flbnzo0
lH0gbMBsMQzDMKy/fdDD9ryQGIZh2LhNis43I0ObMAzDsNWYFKPrpw7tnDr0
1vGNFzcn57c23j6+cenExjdO6Qq15yXHMAzDRmNSjIzufP3khjHz4dqpQ29s
bTxzdPLC5uT5zYn57LY7Q5gwDMOwwU3q0ZWTGztWcb52ogqRnj06eWlzYlTp
6dqMPL25tfHOiQ2T8topVAnDMAwbzKQeGfV5zw7QXTqx8dDhg08dnVw4vmFU
6eyxyWtbE/PnE0cOGnv8yMHHjhw08vTKsclbxythQpUwDMOwBU0+PDJ6tP3z
B189NjGS5HTHCJORnvNbG2bjI4cPnjs2MaGTiaHeP3XIKJfRozNHDr58bPL2
8Y33USUMwzBsAZPx0dWTh563kmR0x+iL+WD06Mmjk1dtHGT+fH1r0jxFauyr
9qs3tjbeEqq05+eFYRiGrZdJPbp4opq3cPlkpS+vbU2M+pgoyajMo4cPmpjI
BEomGroe6ZGzp49OHj580ERPRsuuo0oYhmHYnCb1yERDRlNMNGTU56HDlRI9
c7SaXPfc5uTlY5MrVqeeOqqESM7ccJ/JxCQ2mXyT4TsMwzCst8lfwl63IZKb
yfD+qUNfOXzwnRMbjx85+K57imR/jmQU55HDB+X07yBKMgkuHt84v7Vhdr96
EknCMAzDelmgR0Z0jKy8uFlNVLh8csP8e9GKkflsdOqrx6vJDCaGMqJjpMfI
TaBHJpgyXxkz6Y0kuRE8AiUMwzAsbx9EevTS5uQhG9cYZXnMipF7hGSipCv1
c6VmaM6YEaxXj01MQGRiKKNWL9TbTXqT7NyxiQuyLtWqtOenjGEYhpVmwZvr
jHxct69oeMaOuRkNcq9ocM+PzL9GmNxzpaftIyTz+dmjM/WJzciQe9eQ+8mS
USuz1+DzHL5/4969ex9+X/nq07c+vnfvxhdnHz5+9rtLvJLyEEMc7r5nP2lP
agXlH+gKVFc7m+yBD+95qDduGTdl3m8xDFupxa9RdRJz+eSGUY037bCbCY5M
HHT2WPWihte3qpczuMkMJm4y37qRvet2jM4ojhvEa8TI7PI1q0cX7WxwEyi5
yRImyBp4+M62cnceiLZXrbrbvn6S9N1Xb90bmyR98c49nU9e/fTyb8q832IY
Np/9ze//jrEf/+hHiYpe4dIEO8Yv9HbKYsTiitUjN9Rm5MPI06N2op17nOSC
HfPtq8eqyMjESkanmhngV09WP5I1oZD5t3m05HIwic328zYfd4hBA6WqrYub
Nb9VX7YN3L6ttvDDXYGkJNlv70WXyHYb7t27deu+NbgpGIbl7S/u+/V/fPtc
So/+5f2LJkGwS/DMaMdKiXuZ6k4tLuaz0aNXjk3cqJ2RpEfqXyGZ8Oea1a+n
6vE6I1KvbU0u11r2DZGJe7FDM1HcBFwm8TsnqtkOwwZK1dhd2PLIFjJomurm
0SLCq7gFi5pZf9xJ6GAiSgrHqfwj6rl5xbMb44LJiEMqV51S5NwRg3SeUSar
9itThqwkuZTqt06V5J268UWryPdaqUoWsu6NtAmkujXXrb1ciVsWHCWQyJTD
YBgW2nc/86v/feef43bvf/7j32M9+lYtBEaGTMxiVMOIhVEZIz3XTs0G7lws
8+LmTInesxO/X9isNOWMG6/b2nApXSTVDNaZxEZxTIZPHp0Y8Xqo/srNiDC7
mHDpuc2Jm0O+I17KOsB1qBoTvxlpR+0OKXrhoyUTW+qGtG4nO/ftJUnp3Lok
ScmzOXfl7DKtaPcZpbMK9/34wzsfJyUp/bwvMHemtz6Z5VmdcraQVpJufPhJ
5mq4gqVOsL6q0VFylxRVwrCMffTUn8Z19ocvP6YmbqIkozgvH6tenXr2WKUg
T9h3pRo1ecq+KciY+fyuffGCm8jdPEJ62A7lNaGQkTMjWI8eVqY3mPTuHUQm
5QX/idJ79RJLA6lSOHaXfBZjpSroZieCqUNKqCXb1bh7n3+W5KTEU8ZUbpln
SbMWMpSGQHADGdWVoscZJbNycUfUbusHkhc5b7N8wlgmWcg6/NELGY0WesFa
fFW9oGxWhpzDYBim2Ld/+ef+8+9vSj26+w8//M6vHUmlb54lvW2X4XOvVnhp
c2I+m3/N53P2TxMNuVfbvbQ5ez+Dkydnz9swakeM1JnI62v2WdJF+68cyjN/
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
9aXFnfmbU1vSgjBNzpkyBKvUsDTNHqIu3bWrTHq9PltbNb0Lrx4u6izqos4L
1UdW3CyXUUqStujmHtMWJbVoekctWV4lmjdnqvOeEiwEu1irPJ8kzV/EuY7T
L79BwIfLZdSSFK/ZPJ3WUYrsxoUrPXvrJtfbgwUuo+U76wzdMSJ319bHzCXw
8heFFaut+8fvPEGvlHrOszLIxUHrz/KrWXpbRHHFWLFmFSj+E7pu9dFfZNZs
unFhKu57chVaxbXUKClyyZakL/RwUbVU7vymSvkzhZGZp2tjfGn9fPpXdiG9
iaJ1tRVKpd6PrJ8kXZ3ePrDR2J0zN71vgwrb/ilVxm0PXTvsfgZK5acTVcrm
mTpQULJEDYnLEeYv3Vxf9Ln7BBMflY1Ck6pNfnPUfmqT0escirx7V8yG7WSz
pdwIl0q6c3CjogTazW09OuUD8a1P+0IPF1VLpdaIfGHCOhI08loZ1fL0r+yq
JKXzDHdPLTS//xi5JOXHwYOnO03FNtttx6jez6+YmvNEIVboUZlOZVjSjOKE
zpuomKkT1H09VaObXYJ9Q3H0JQwWo1uSpDN5HWzvRsiGWO3OyAT11njY2+uM
9XuoFHWTTiue46cOXDQolV4j8oWRMpwvo/ZN0Cb0quyJKCnOU909Uan3IyOX
JKWr124XHt0Oh80qph2imn1Oe6TqUUr73PSG6g+pNL0lyaPnCSaePSQPop9+
PCyxfaMOpWBh+kiSpRn8aUdy5Y3oJ0n1TZPDsv5QcDtmGwTRvZv7VK9JrYNa
qfKSlCxMKwTx96koKSpP/8qejJLUahjunqjU+5H9IElxdUgFNTYmEPGRG0Tu
GBPojpIiJ8zWkrmiJGX/9An2j5JcDraJy+fSDPPv2xo0ML0lqSLSmqk/TrQn
UVL4bdZzMrHGQlGSQNMsZR+9PItFSZ0BkR4l7W/GLUl6axsPnvshsz8EL+Uq
LRn5Z0mRFyrdoN6SJBOkRqATJ9jVXY4CoO4RQnnFYHG6JEk2sPFoT/BnpySF
oUD6gYnf+Ove6JXR74IlJCly0XSp0sG6VpjE6dekJCkqT//Krm3sylPdfb/L
0/pJUp4wAPabztYJRbCyLb+RguKLS4dktAq27R9JHr8tVDxy15V/nYFwcO8M
+52gvD7+OdfjPmo3NhYu/6/9W4H2AOlK4WNT/351R0lDzLjTQhS/Hoa9ujBN
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
    "], {{0, 243}, {561, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{561, 243},
  PlotRange->{{0, 561}, {0, 243}}]], "Figura",
 CellChangeTimes->{
  3.571968204999071*^9, 3.571968301457588*^9, {3.5719692889620705`*^9, 
   3.571969315831607*^9}}],

Cell["\<\
Figure 2. Visualization and Graphics: list of general topics covered by \
Mathematica\
\>", "Didascalia",
 CellChangeTimes->{{3.5719683113411536`*^9, 3.571968380968136*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Example 1", "Subsubsection",
 CellChangeTimes->{{3.571947297679802*^9, 3.571947300579968*^9}}],

Cell["\<\
Algebraic manipulation. 
When we do calculations many times we need to transform algebraic expression, \
for instance to simplify them or to expand powers.\
\>", "Text",
 CellChangeTimes->{{3.567761113416973*^9, 3.5677611370653257`*^9}, 
   3.5677636722823315`*^9, {3.571947304133171*^9, 3.5719473085104218`*^9}, {
   3.571968486382165*^9, 3.571968508376423*^9}, {3.5719685464766026`*^9, 
   3.571968574481204*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.5677668377653875`*^9, 3.5677668870222044`*^9}, 
   3.571947644898662*^9}],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", "^", "4"}], "-", "1"}], ")"}]}], ",", "x"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"%", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5677605286235247`*^9, 3.567760531290677*^9}}],

Cell[BoxData[
 RowBox[{"Simplify", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.56776053675799*^9, 3.567760539667156*^9}}],

Cell["\<\
Simplify doesn\[CloseCurlyQuote]t know about special function, whereas \
FullSimplify does\
\>", "Text",
 CellChangeTimes->{{3.5677634930340796`*^9, 3.5677635005055065`*^9}, {
  3.5719473238693*^9, 3.5719473465255957`*^9}}],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Gamma", "[", "x", "]"}], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "-", "x"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.567760708677823*^9, 3.567760721849577*^9}}],

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"Gamma", "[", "x", "]"}], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "-", "x"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.567760708677823*^9, 3.567760737548475*^9}}],

Cell["\<\
The same happens for many other function working on symbolic manipulation of \
algebraic expressions. Generally speaking, it\[CloseCurlyQuote]s important to \
use the appropriate function according to what we are working on, and on the \
class of problem / data we are dealing with. \
\>", "Text",
 CellChangeTimes->{{3.567761078361968*^9, 3.567761097825081*^9}, {
   3.571947366910762*^9, 3.5719474381688375`*^9}, 3.5719474847765036`*^9, {
   3.5719686076150994`*^9, 3.5719686078611135`*^9}}],

Cell["\<\
Some years ago I had a question from a user, about the following integral\
\>", "Text",
 CellChangeTimes->{{3.5719687915426197`*^9, 3.57196880483838*^9}}],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ChebyshevT", "[", 
     RowBox[{"n", ",", "x"}], "]"}], 
    RowBox[{"ChebyshevU", "[", 
     RowBox[{"n", ",", "x"}], "]"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.571968637816827*^9, 3.5719686835804443`*^9}}],

Cell["\<\
She told me it is a well known standard integral of a Chebyshev polynomials \
product. The question was: why Integrate is not aware of a well known \
algebraic expression simplification?
Clearly, the answer is: because Integrate doesn\[CloseCurlyQuote]t know about \
any algebraic simplification, it works on integration.
However, you can use FunctionExpand to \[OpenCurlyDoubleQuote]pre-process\
\[CloseCurlyDoubleQuote] your data and get the right result.\
\>", "Text",
 CellChangeTimes->{{3.5719688077655473`*^9, 3.5719689384780235`*^9}, {
  3.5719689725869746`*^9, 3.571968990372992*^9}}],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"FunctionExpand", "[", 
    RowBox[{
     RowBox[{"ChebyshevT", "[", 
      RowBox[{"n", ",", "x"}], "]"}], 
     RowBox[{"ChebyshevU", "[", 
      RowBox[{"n", ",", "x"}], "]"}]}], "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.571968637816827*^9, 3.5719686626712484`*^9}}],

Cell["\<\
Expand has the same behavior of Simplify as for the special function\
\>", "Text",
 CellChangeTimes->{{3.5719689432312956`*^9, 3.571968960162264*^9}}],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "y"}], ")"}], "^", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.5677602113633785`*^9, 3.567760211459384*^9}}],

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{"ChebyshevT", "[", 
   RowBox[{"n", ",", "x"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.567762604952284*^9, 3.567762604954284*^9}, {
  3.56776319407598*^9, 3.5677631977231884`*^9}}],

Cell[BoxData[
 RowBox[{"FunctionExpand", "[", 
  RowBox[{"ChebyshevT", "[", 
   RowBox[{"n", ",", "x"}], "]"}], "]"}]], "Input"],

Cell["\<\
If we work with piecewise function, even FunctionExpand could be limited. \
There is, indeed, PiecewiseExpand\
\>", "Text",
 CellChangeTimes->{{3.5677635214817066`*^9, 3.5677635486092577`*^9}, {
  3.571947508614867*^9, 3.571947541971775*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Expand", "[", 
    RowBox[{"Min", "[", 
     RowBox[{"x", ",", "y", ",", "z"}], "]"}], "]"}], ",", 
   RowBox[{"FunctionExpand", "[", 
    RowBox[{"Min", "[", 
     RowBox[{"x", ",", "y", ",", "z"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.56776335159499*^9, 3.567763354812174*^9}, {
  3.5677635535875425`*^9, 3.567763559402876*^9}}],

Cell[BoxData[
 RowBox[{"PiecewiseExpand", "[", 
  RowBox[{"Min", "[", 
   RowBox[{"x", ",", "y", ",", "z"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"SquareWave", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"ExclusionsStyle", "\[Rule]", "Dotted"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"PiecewiseExpand", "[", 
  RowBox[{"SquareWave", "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.56776209786528*^9, 3.5677621058667383`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Example 2", "Subsubsection",
 CellChangeTimes->{
  3.5677576479117575`*^9, {3.56775769201528*^9, 3.567757695118458*^9}, {
   3.567766619355895*^9, 3.5677666251002235`*^9}, 3.567823122009466*^9, {
   3.5719476065624695`*^9, 3.571947609461635*^9}}],

Cell[TextData[{
 "Equation solving is another historical component of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.5677577026628895`*^9, 3.567757820573633*^9}, {
  3.5677581452642045`*^9, 3.567758226062826*^9}, {3.567758375167354*^9, 
  3.5677584413271384`*^9}, {3.5677601075054383`*^9, 3.567760110649618*^9}, {
  3.567760499488858*^9, 3.5677605002489023`*^9}, {3.567763719162013*^9, 
  3.5677637330498075`*^9}, {3.5677654848120027`*^9, 3.5677655060762186`*^9}, {
  3.5677655405401897`*^9, 3.5677655426763124`*^9}, {3.5677666310515637`*^9, 
  3.5677666902439494`*^9}, {3.567774040515361*^9, 3.567774067507905*^9}, {
  3.571947613467864*^9, 3.571947639692364*^9}, {3.571947767106652*^9, 
  3.571947772515961*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.5677668377653875`*^9, 3.5677668870222044`*^9}, 
   3.571947644898662*^9}],

Cell["\<\
Solve allows the declaration of the domain of variables\
\>", "Text",
 CellChangeTimes->{{3.5677693168601832`*^9, 3.5677693376923747`*^9}, {
  3.5719476482148514`*^9, 3.571947660519555*^9}, {3.571947791953073*^9, 
  3.571947802863697*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", "-", 
     RowBox[{"5", " ", 
      SuperscriptBox["x", "4"]}], "+", 
     SuperscriptBox["x", "8"]}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5677692536165657`*^9, 3.5677692729466715`*^9}},
 CellID->459940862],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", "-", 
     RowBox[{"5", " ", 
      SuperscriptBox["x", "4"]}], "+", 
     SuperscriptBox["x", "8"]}], "\[Equal]", "0"}], ",", "x", ",", "Reals"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.567769303054394*^9},
 CellID->198436870],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", "-", 
     RowBox[{"5", " ", 
      SuperscriptBox["x", "4"]}], "+", 
     SuperscriptBox["x", "8"]}], "\[Equal]", "0"}], ",", "x", ",", 
   "Integers"}], "]"}]], "Input",
 CellChangeTimes->{3.5677693075836525`*^9},
 CellID->652346551],

Cell["\<\
You can also set a different domain for different variables. In that case \
domain specification has to be added in the list of equations.\
\>", "Text",
 CellChangeTimes->{{3.5677704028352976`*^9, 3.567770467723009*^9}, {
  3.571947667922979*^9, 3.571947682860833*^9}, {3.5719691556554456`*^9, 
  3.5719691713313417`*^9}}],

Cell["x \[Element] \[DoubleStruckCapitalR] and y \[Element] \
\[DoubleStruckCapitalC]", "Text",
 CellChangeTimes->{{3.5677704028352976`*^9, 3.5677705177148685`*^9}, {
  3.5719476872690854`*^9, 3.571947704325061*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"x", "^", "2"}], "+", 
       RowBox[{"y", "^", "2"}]}], "\[Equal]", "1"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"x", "^", "4"}], "+", " ", 
       RowBox[{"y", "^", "4"}]}], "\[Equal]", "2"}], ",", 
     RowBox[{"Element", "[", 
      RowBox[{"x", ",", "Reals"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5719691411276145`*^9, 3.571969151208191*^9}}],

Cell["\<\
Sometimes it could be better (or faster) to use NSolve\
\>", "Text",
 CellChangeTimes->{{3.5677706304523163`*^9, 3.5677707008433423`*^9}, {
  3.567770785820203*^9, 3.567770788619363*^9}, {3.5677741447963257`*^9, 
  3.567774146747437*^9}, {3.567786047939225*^9, 3.5677860479592266`*^9}, {
  3.5719478149693894`*^9, 3.571947846401187*^9}}],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", "+", "y"}], "]"}], "==", 
     RowBox[{"1", "/", "2"}]}], "&&", 
    RowBox[{
     RowBox[{
      RowBox[{"E", "^", "x"}], "-", "y"}], "==", "1"}], "&&", 
    RowBox[{
     RowBox[{"x", "^", "2"}], "\[LessEqual]", "10"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5677709973663025`*^9, 3.5677710218367023`*^9}, {
  3.567771232204735*^9, 3.5677712648065996`*^9}, {3.567771300852661*^9, 
  3.5677713010126705`*^9}},
 CellID->75445724],

Cell["\<\
Of course, if the solution can be obtained by using Solve, then symbolic \
result can be converted to numerical using an arbitrary precision\
\>", "Text",
 CellChangeTimes->{{3.567770795290745*^9, 3.567770828482643*^9}, {
  3.567770859339408*^9, 3.5677709008917847`*^9}, {3.5719478510374527`*^9, 
  3.5719478735597405`*^9}, {3.5719479045585136`*^9, 3.571947927468824*^9}}],

Cell[BoxData[
 RowBox[{"res", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "+", "y"}], "]"}], "==", 
      RowBox[{"1", "/", "2"}]}], "&&", 
     RowBox[{
      RowBox[{
       RowBox[{"E", "^", "x"}], "-", "y"}], "==", "1"}], "&&", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "\[LessEqual]", "10"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.567770208675192*^9, 3.5677702135734725`*^9}, {
  3.5677708301577387`*^9, 3.5677708307967753`*^9}, {3.567770923102055*^9, 
  3.5677709237720933`*^9}, {3.567771009454994*^9, 3.567771018580516*^9}, {
  3.567771266022669*^9, 3.5677712955093555`*^9}},
 CellID->29063076],

Cell[BoxData[
 RowBox[{"N", "[", "res", "]"}]], "Input",
 CellChangeTimes->{{3.567770208675192*^9, 3.5677702135734725`*^9}, {
  3.5677708301577387`*^9, 3.5677708307967753`*^9}, {3.5677709121904306`*^9, 
  3.567770929337412*^9}},
 CellID->4334682],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"res", ",", "50"}], "]"}]], "Input",
 CellChangeTimes->{{3.567770208675192*^9, 3.5677702135734725`*^9}, {
  3.5677708301577387`*^9, 3.5677708307967753`*^9}, {3.5677709121904306`*^9, 
  3.567770929337412*^9}, {3.5719478937338943`*^9, 3.5719478955129967`*^9}},
 CellID->370465256],

Cell["\<\
In many cases it could be the general solution doesn\[CloseCurlyQuote]t \
exists or cannot be calculated, neither symbolically nor numerically. In such \
cases we can still ask for a particular solution\
\>", "Text",
 CellChangeTimes->{{3.5677710508753633`*^9, 3.5677711360752363`*^9}, {
   3.5677741766841493`*^9, 3.567774181955451*^9}, {3.5719479369373655`*^9, 
   3.5719479612137537`*^9}, {3.5719480028151336`*^9, 3.5719480115746346`*^9}, 
   3.5719480746162405`*^9}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", "-", "2"}], "]"}], "\[Equal]", "y"}], ",", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "\[Equal]", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.567771808573701*^9, 3.5677718160131264`*^9}}],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", "-", "2"}], "]"}], "\[Equal]", "y"}], ",", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "\[Equal]", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input"],

Cell["\<\
ask for a particular solution or instance\
\>", "Text",
 CellChangeTimes->{{3.5719481005257225`*^9, 3.571948110120271*^9}}],

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", "-", "2"}], "]"}], "\[Equal]", "y"}], ",", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "\[Equal]", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.567771798925149*^9, 3.567771821069416*^9}, {
  3.570338554922351*^9, 3.570338566014985*^9}},
 CellID->48921080],

Cell["ask for three solutions", "Text",
 CellChangeTimes->{{3.5677715765964327`*^9, 3.567771583266814*^9}, {
  3.5677718334271226`*^9, 3.5677718335071273`*^9}, {3.571948090952175*^9, 
  3.571948096521493*^9}}],

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", "-", "2"}], "]"}], "\[Equal]", "y"}], ",", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "\[Equal]", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.567771526380561*^9, 3.5677715382532396`*^9}}],

Cell["\<\
FindRoot provides a similar result but asks a starting point to find a local \
solution \
\>", "Text",
 CellChangeTimes->{{3.5677718741954546`*^9, 3.567771896962757*^9}, {
  3.5677719277325163`*^9, 3.5677719575952244`*^9}, {3.5719481204808636`*^9, 
  3.5719481463813453`*^9}}],

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Exp", "[", 
       RowBox[{"x", "-", "2"}], "]"}], "\[Equal]", "y"}], ",", 
     RowBox[{
      RowBox[{"y", "^", "2"}], "\[Equal]", "x"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "1"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellID->10539561]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Example 3", "Subsubsection",
 CellChangeTimes->{{3.5719481802692833`*^9, 3.5719481816343613`*^9}}],

Cell["\<\
Linear algebra and matrices are another typical \
\[OpenCurlyDoubleQuote]general\[CloseCurlyDoubleQuote] subject, being \
involved in so many real case problems. \
\>", "Text",
 CellChangeTimes->{{3.567776030332261*^9, 3.567776066446325*^9}, {
  3.567776105368393*^9, 3.5677761078799973`*^9}, {3.567776184586936*^9, 
  3.567776205323122*^9}, {3.5719481928550034`*^9, 3.5719482364985*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"M", "=", 
    RowBox[{"HilbertMatrix", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5"}], "}"}], "]"}]}], ")"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.567776221149027*^9, 3.5677762452614064`*^9}, {
  3.567776447909997*^9, 3.567776474052492*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", "M", "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.567776225147256*^9, 3.5677762270853667`*^9}, {
  3.567776455749446*^9, 3.5677764637329025`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CholeskyDecomposition", "[", "M", "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5677762962843246`*^9, 3.5677763164544783`*^9}}],

Cell[BoxData[
 RowBox[{"CharacteristicPolynomial", "[", 
  RowBox[{"M", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.5677763353795605`*^9, 3.567776343285013*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"HilbertMatrix", "[", 
    RowBox[{"{", 
     RowBox[{"50", ",", "50"}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5677764926045537`*^9, 3.567776510652586*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "M", "]"}], ",", 
   RowBox[{"MatrixPlot", "[", 
    RowBox[{"Inverse", "[", "M", "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.5677763549526806`*^9, 3.5677763582928715`*^9}, {
  3.5677764222535295`*^9, 3.5677764290849204`*^9}}],

Cell["\<\
Solve can be used when we have the equations. Many times, however, we already \
have the matrix of coefficients and don\[CloseCurlyQuote]t want to write \
equations. In such cases LinearSolve can be used.\
\>", "Text",
 CellChangeTimes->{{3.567776675316004*^9, 3.5677767060757637`*^9}, {
   3.5719482515353594`*^9, 3.571948394649545*^9}, 3.571969215146848*^9}],

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "50"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.567776724656826*^9, 3.567776749165228*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"S", "=", 
   RowBox[{"LinearSolve", "[", 
    RowBox[{"M", ",", "b"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5677767134731865`*^9, 3.5677767656281695`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", ".", "S"}], "\[Equal]", "b"}]], "Input",
 CellChangeTimes->{{3.5677767676642857`*^9, 3.5677767752847223`*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " as a special expression to deal with sparse matrices, that\
\[CloseCurlyQuote]s named SparseArray"
}], "Text",
 CellChangeTimes->{{3.567776675316004*^9, 3.5677767060757637`*^9}, {
  3.567776903444052*^9, 3.5677770283631973`*^9}, {3.571948414294669*^9, 
  3.5719484371639767`*^9}}],

Cell["\<\
You can create a sparse matrix by providing only those elements not zero. \
This can be done with a list of assignment rule (position -> value) or by \
means of a general rule, if exists.\
\>", "Text",
 CellChangeTimes->{{3.567778015243186*^9, 3.5677780356324215`*^9}, {
  3.571948450981767*^9, 3.5719485209407687`*^9}}],

Cell[BoxData[
 RowBox[{"A", "=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", "3"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "4"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5677780713096848`*^9, 3.567778104412943*^9}}],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "A", "]"}]], "Input",
 CellChangeTimes->{{3.5677780893589163`*^9, 3.56777809158972*^9}}],

Cell[BoxData[
 RowBox[{"A", "=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i_", ",", "i_"}], "}"}], "\[RuleDelayed]", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i_", ",", "j_"}], "}"}], "/;", 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{"i", "-", "j"}], "]"}], "\[Equal]", "1"}]}], ":>", 
       RowBox[{"RandomReal", "[", "]"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5677780473792424`*^9, 3.567778047706843*^9}, {
  3.567778150807424*^9, 3.5677781762822685`*^9}}],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "A", "]"}]], "Input",
 CellChangeTimes->{{3.5677780504836483`*^9, 3.5677780559592576`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"SparseArray", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i_", ",", "i_"}], "}"}], "\[RuleDelayed]", 
        RowBox[{"RandomReal", "[", "]"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i_", ",", "j_"}], "}"}], "/;", 
         RowBox[{
          RowBox[{"Abs", "[", 
           RowBox[{"i", "-", "j"}], "]"}], "\[Equal]", "1"}]}], ":>", 
        RowBox[{"RandomReal", "[", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100000", ",", "100000"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", "100000", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.567778417911093*^9, 3.5677784272711096`*^9}, {
  3.567778561836946*^9, 3.5677785843789854`*^9}, {3.5677786184962454`*^9, 
  3.5677786496027*^9}},
 CellID->274483809],

Cell["\<\
let use LinearSolve to solve the system\
\>", "Text",
 CellChangeTimes->{{3.567778208683526*^9, 3.5677782394623795`*^9}, 
   3.567778589214994*^9, {3.5719485404808865`*^9, 3.5719485468942533`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sol", "=", 
   RowBox[{"LinearSolve", "[", 
    RowBox[{"s", ",", "b"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.567778277495247*^9, 3.567778287900465*^9}, {
  3.5677785917265987`*^9, 3.567778601242615*^9}},
 CellID->79983591],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", ".", "sol"}], "\[Equal]", "b"}]], "Input",
 CellChangeTimes->{{3.567778610665032*^9, 3.5677786138318377`*^9}}],

Cell["\<\
An important note: when using SparseArray in matrix operations, the results \
could have some more zeros. They are not automatically eliminated by the \
internal representation of the matrix.\
\>", "Text",
 CellChangeTimes->{{3.5677786787435513`*^9, 3.5677787620476975`*^9}, {
  3.571948554673698*^9, 3.5719486284749193`*^9}}],

Cell[BoxData[
 RowBox[{"A", "=", 
  RowBox[{"SparseArray", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i_", ",", "i_"}], "}"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i_", ",", "j_"}], "}"}], "/;", 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{"i", "-", "j"}], "]"}], "\[Equal]", "1"}]}], "\[Rule]", 
       "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5677787750269203`*^9, 3.5677787771797247`*^9}, {
  3.5677791985832644`*^9, 3.5677791998312664`*^9}}],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "A", "]"}]], "Input",
 CellChangeTimes->{{3.567778779316928*^9, 3.5677787815477324`*^9}}],

Cell[BoxData[
 RowBox[{"B", "=", 
  RowBox[{
   RowBox[{"A", ".", "A"}], "-", 
   RowBox[{"2", "A"}]}]}]], "Input",
 CellChangeTimes->{{3.567778790736148*^9, 3.567778793606553*^9}}],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "B", "]"}]], "Input",
 CellChangeTimes->{{3.567778795681357*^9, 3.5677787990665627`*^9}}],

Cell["\<\
Apply SparseArray on the result once again to optimize the outcoming matrix.\
\>", "Text",
 CellChangeTimes->{{3.571948645165874*^9, 3.5719486734684925`*^9}}],

Cell[BoxData[
 RowBox[{"ByteCount", "[", "B", "]"}]], "Input",
 CellChangeTimes->{{3.567778806632576*^9, 3.5677788223574038`*^9}, {
  3.5677791763688254`*^9, 3.5677791794108305`*^9}, {3.5677792097840843`*^9, 
  3.567779212607689*^9}}],

Cell[BoxData[
 RowBox[{"ByteCount", "[", 
  RowBox[{"SparseArray", "[", "B", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.567779535263056*^9, 3.567779543983471*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Example 4", "Subsubsection",
 CellChangeTimes->{{3.571948696188792*^9, 3.571948697460865*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 9 has introduced symbolic tensors (further reading ",
 ButtonBox["tutorial/SymbolicTensors",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/SymbolicTensors"],
 ", ",
 ButtonBox["guide/SymbolicTensors",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/SymbolicTensors"],
 ", ",
 ButtonBox["guide/VectorAnalysis)",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/VectorAnalysis"]
}], "Text",
 CellChangeTimes->{{3.5642580818960485`*^9, 3.564258085281242*^9}, {
   3.5642581906442685`*^9, 3.564258433889181*^9}, 3.5642584855621367`*^9, {
   3.567772141907767*^9, 3.5677722165050335`*^9}, {3.567773616068084*^9, 
   3.567773623067484*^9}, {3.5719487098975763`*^9, 3.5719487401853085`*^9}}],

Cell["There are three domains", "Text",
 CellChangeTimes->{{3.564258491337467*^9, 3.564258598140576*^9}, {
  3.564309660807787*^9, 3.5643096647680135`*^9}, {3.5719487480317574`*^9, 
  3.571948776241371*^9}}],

Cell[BoxData[
 ButtonBox["Arrays",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Arrays"]], "Text",
 CellChangeTimes->{{3.5642585992236376`*^9, 3.564258600962737*^9}, {
   3.5642586402159824`*^9, 3.5642586552688437`*^9}, 3.568024715651556*^9}],

Cell[BoxData[
 ButtonBox["Matrices",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Matrices"]], "Text",
 CellChangeTimes->{{3.5642586075071115`*^9, 3.564258608506169*^9}, 
   3.564258684870537*^9, 3.5680247156545563`*^9}],

Cell[BoxData[
 ButtonBox["Vectors",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Vectors"]], "Text",
 CellChangeTimes->{{3.5642586120193696`*^9, 3.564258625500141*^9}, 
   3.564258695381138*^9, 3.5680247156555557`*^9}],

Cell[BoxData[
 RowBox[{"$Assumptions", "=", 
  RowBox[{"m", "\[Element]", 
   RowBox[{"Matrices", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}], ",", "Reals", ",", 
     RowBox[{"Symmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}]}]}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorRank", "[", "m", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorDimensions", "[", "m", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorSymmetry", "[", "m", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$Assumptions", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m", "\[Element]", 
      RowBox[{"Matrices", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "4"}], "}"}], ",", "Complexes", ",", 
        RowBox[{"Symmetric", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"v", "\[Element]", 
      RowBox[{"Vectors", "[", 
       RowBox[{"4", ",", "Complexes"}], "]"}]}]}], "}"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorRank", "[", 
  RowBox[{"m", "\[TensorProduct]", "v"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorDimensions", "[", 
  RowBox[{"v", "\[TensorProduct]", "m", "\[TensorProduct]", "v"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"TensorSymmetry", "[", 
  RowBox[{"v", "\[TensorProduct]", "v", "\[TensorProduct]", "v"}], 
  "]"}]], "Input"],

Cell["\<\
Note that when a symbol is defined as a symbolic tensor it cannot be assigned \
any actual value\
\>", "Text",
 CellChangeTimes->{{3.56777321860335*^9, 3.567773243506775*^9}, {
  3.5678370610466976`*^9, 3.567837065653961*^9}, {3.5719488160956507`*^9, 
  3.571948855856925*^9}}],

Cell[BoxData[
 RowBox[{"m", "=", "10"}]], "Input",
 CellChangeTimes->{{3.567773246823964*^9, 3.5677732719264*^9}, {
  3.5677733108366256`*^9, 3.5677733110446377`*^9}}],

Cell[BoxData[
 RowBox[{"TensorRank", "[", "m", "]"}]], "Input",
 CellChangeTimes->{3.5677732880383215`*^9}],

Cell[BoxData["$Assumptions"], "Input",
 CellChangeTimes->{{3.567773316431946*^9, 3.5677733187650795`*^9}}]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1424, 775},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
       StyleData["Didascalia", StyleDefinitions -> StyleData["Text"]], 
       CellMargins -> {{Inherited, Inherited}, {20, 0}}, ReturnCreatesNewCell -> 
       True, StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, TextAlignment -> 
       Center, CounterIncrements -> "Figura", MenuSortingValue -> 1630, 
       FontFamily -> "Arial", FontSize -> 11], 
      Cell[
       StyleData["Didascalia", "SlideShow"], 
       CellMargins -> {{Inherited, Inherited}, {20, 0}}, ReturnCreatesNewCell -> 
       True, StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, TextAlignment -> 
       Center, CounterIncrements -> "Figura", MenuSortingValue -> 1630, 
       FontFamily -> "Arial", FontSize -> 11]}, Open]], 
   Cell[
    StyleData["Figura"], CellMargins -> {{0, 0}, {0, 0}}, 
    ReturnCreatesNewCell -> True, 
    StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, 
    CellFrameMargins -> {{0, 0}, {5, 0}}, TextAlignment -> Center, 
    LineSpacing -> {1, 1}, MenuSortingValue -> 1630, FontFamily -> "Arial"], 
   Cell[
    StyleData["Figura"], CellMargins -> {{Inherited, Inherited}, {5, 0}}, 
    ReturnCreatesNewCell -> True, 
    StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, TextAlignment -> Center, 
    MenuSortingValue -> 1630, FontFamily -> "Arial"]}, Visible -> False, 
  FrontEndVersion -> "9.0 for Microsoft Windows (64-bit) (January 25, 2013)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[579, 22, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[28981, 522, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[34935, 701, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[44493, 988, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[53596, 1268, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 59463, 1437}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[668, 27, 306, 8, 84, "Subsection"],
Cell[977, 37, 593, 11, 76, "Text"],
Cell[1573, 50, 14127, 236, 290, "Figura"],
Cell[15703, 288, 211, 5, 34, "Didascalia"],
Cell[15917, 295, 12829, 215, 243, "Figura"],
Cell[28749, 512, 183, 4, 34, "Didascalia"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28981, 522, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[29070, 527, 100, 1, 50, "Subsubsection"],
Cell[29173, 530, 425, 8, 105, "Text"],
Cell[29601, 540, 188, 4, 46, "Input"],
Cell[29792, 546, 190, 7, 46, "Input"],
Cell[29985, 555, 145, 3, 46, "Input"],
Cell[30133, 560, 126, 2, 46, "Input"],
Cell[30262, 564, 233, 5, 45, "Text"],
Cell[30498, 571, 241, 6, 46, "Input"],
Cell[30742, 579, 245, 6, 46, "Input"],
Cell[30990, 587, 503, 8, 105, "Text"],
Cell[31496, 597, 164, 3, 45, "Text"],
Cell[31663, 602, 302, 8, 46, "Input"],
Cell[31968, 612, 602, 10, 135, "Text"],
Cell[32573, 624, 349, 9, 46, "Input"],
Cell[32925, 635, 160, 3, 45, "Text"],
Cell[33088, 640, 200, 5, 46, "Input"],
Cell[33291, 647, 236, 5, 46, "Input"],
Cell[33530, 654, 128, 3, 46, "Input"],
Cell[33661, 659, 252, 5, 45, "Text"],
Cell[33916, 666, 400, 10, 46, "Input"],
Cell[34319, 678, 132, 3, 46, "Input"],
Cell[34454, 683, 257, 7, 46, "Input"],
Cell[34714, 692, 172, 3, 46, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[34935, 701, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[35024, 706, 252, 4, 50, "Subsubsection"],
Cell[35279, 712, 752, 13, 46, "Text"],
Cell[36034, 727, 188, 4, 46, "Input"],
Cell[36225, 733, 249, 5, 45, "Text"],
Cell[36477, 740, 321, 10, 51, "Input",
 CellID->459940862],
Cell[36801, 752, 307, 10, 51, "Input",
 CellID->198436870],
Cell[37111, 764, 313, 10, 51, "Input",
 CellID->652346551],
Cell[37427, 776, 332, 6, 75, "Text"],
Cell[37762, 784, 216, 3, 45, "Text"],
Cell[37981, 789, 562, 17, 46, "Input"],
Cell[38546, 808, 347, 6, 45, "Text"],
Cell[38896, 816, 612, 18, 46, "Input",
 CellID->75445724],
Cell[39511, 836, 382, 6, 75, "Text"],
Cell[39896, 844, 746, 20, 46, "Input",
 CellID->29063076],
Cell[40645, 866, 246, 5, 46, "Input",
 CellID->4334682],
Cell[40894, 873, 322, 6, 46, "Input",
 CellID->370465256],
Cell[41219, 881, 480, 8, 75, "Text"],
Cell[41702, 891, 402, 12, 46, "Input"],
Cell[42107, 905, 335, 11, 46, "Input"],
Cell[42445, 918, 133, 3, 45, "Text"],
Cell[42581, 923, 475, 14, 46, "Input",
 CellID->48921080],
Cell[43059, 939, 209, 3, 45, "Text"],
Cell[43271, 944, 419, 12, 46, "Input"],
Cell[43693, 958, 286, 6, 45, "Text"],
Cell[43982, 966, 462, 16, 46, "Input",
 CellID->10539561]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[44493, 988, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[44582, 993, 104, 1, 50, "Subsubsection"],
Cell[44689, 996, 398, 7, 45, "Text"],
Cell[45090, 1005, 321, 9, 46, "Input"],
Cell[45414, 1016, 212, 4, 46, "Input"],
Cell[45629, 1022, 180, 4, 46, "Input"],
Cell[45812, 1028, 168, 3, 46, "Input"],
Cell[45983, 1033, 229, 6, 46, "Input"],
Cell[46215, 1041, 307, 7, 46, "Input"],
Cell[46525, 1050, 370, 6, 75, "Text"],
Cell[46898, 1058, 253, 7, 46, "Input"],
Cell[47154, 1067, 201, 5, 46, "Input"],
Cell[47358, 1074, 149, 3, 46, "Input"],
Cell[47510, 1079, 348, 8, 46, "Text"],
Cell[47861, 1089, 330, 6, 75, "Text"],
Cell[48194, 1097, 695, 22, 46, "Input"],
Cell[48892, 1121, 130, 2, 46, "Input"],
Cell[49025, 1125, 729, 21, 46, "Input"],
Cell[49757, 1148, 133, 2, 46, "Input"],
Cell[49893, 1152, 984, 29, 105, "Input",
 CellID->274483809],
Cell[50880, 1183, 207, 4, 45, "Text"],
Cell[51090, 1189, 269, 7, 46, "Input",
 CellID->79983591],
Cell[51362, 1198, 149, 3, 46, "Input"],
Cell[51514, 1203, 336, 6, 75, "Text"],
Cell[51853, 1211, 665, 20, 46, "Input"],
Cell[52521, 1233, 131, 2, 46, "Input"],
Cell[52655, 1237, 181, 5, 46, "Input"],
Cell[52839, 1244, 131, 2, 46, "Input"],
Cell[52973, 1248, 168, 3, 45, "Text"],
Cell[53144, 1253, 234, 4, 46, "Input"],
Cell[53381, 1259, 166, 3, 46, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53596, 1268, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[53685, 1273, 100, 1, 50, "Subsubsection"],
Cell[53788, 1276, 759, 19, 76, "Text"],
Cell[54550, 1297, 207, 3, 45, "Text"],
Cell[54760, 1302, 244, 5, 44, "Text"],
Cell[55007, 1309, 222, 5, 44, "Text"],
Cell[55232, 1316, 220, 5, 44, "Text"],
Cell[55455, 1323, 314, 9, 46, "Input"],
Cell[55772, 1334, 63, 1, 46, "Input"],
Cell[55838, 1337, 69, 1, 46, "Input"],
Cell[55910, 1340, 67, 1, 46, "Input"],
Cell[55980, 1343, 547, 16, 76, "Input"],
Cell[56530, 1361, 101, 2, 46, "Input"],
Cell[56634, 1365, 135, 3, 46, "Input"],
Cell[56772, 1370, 133, 3, 46, "Input"],
Cell[56908, 1375, 287, 6, 45, "Text"],
Cell[57198, 1383, 167, 3, 46, "Input"],
Cell[57368, 1388, 107, 2, 46, "Input"],
Cell[57478, 1392, 106, 1, 46, "Input"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
