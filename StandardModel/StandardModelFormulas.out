Attributes[ee$] = {Temporary}
 
Attributes[error$] = {Temporary}
 
evalDifferentialOps[opdef_][exp_] := Module[{$ = exp, op}, 
     $ = $ /. dd:xDot[a__] :> Fold[op, arg, Reverse[dd]]; 
      op[a_, b_] := b /. opdef[a]; $]
 
$ = {"Quarks(grouped by generation(mass eigenvalue))", 
     {{u, d}, {c, s}, {t, b}}}
 
Attributes[xDot] = {Flat, OneIdentity}
 
Attributes[exp0$] = {Temporary}
 
Attributes[exp1$] = {Temporary}
 
expand2CT[ispace_Integer, ones_][exp_] := 
    Module[{$scal, $ = exp, $1, $2 = {}, $4 = {}, $1s = ones}, 
     $ = If[Length[$] < 2, xDot[$], $]; xPrint["exp: ", $]; 
      $scal = tuExtractPattern[scal[_]][$]; xPrint["$scal: ", $scal]; 
      $scal = Times @@ $scal /. scal[a_] -> a; If[$scal =!= 1, 
       AppendTo[$2, $scal]]; $ = Select[List @@ $,  !MatchQ[#1, scal[_]] & ]; 
      While[Length[$] > 0, {$1, $} = {$[[1]], $[[2 ;; All]]}; 
        If[tuMemberQ[$1, {X[_]}], If[Length[$4] > 0, 
           AppendTo[$2, xDot @@ $4]; $4 = {}]; AppendTo[$2, $1], 
         AppendTo[$4, $1]]]; If[Length[$4] > 0, AppendTo[$2, xDot @@ $4]]; 
      $ = (ReplacePart[$1s, ispace -> #1] & ) /@ $2 /. X[a__] -> a /. toDot; 
      Dot @@ $]
 
tuExtractPattern[pattern_, maxlevel_:Infinity][exp_] := 
    Module[{pos}, pos = Position[exp, pattern, {0, maxlevel}]; 
      Extract[exp, pos]]
 
tuExtractPattern /: tuExtractPattern::usage = "tuExtractPattern[pattern_,maxl\
evel_:Infinity][exp_] extracts a List of items in exp_ that match pattern_ to \
maxlevel_. *3Feb2014* "
 
tuMemberQ[patterns_][variable_] := tuMemberQ[variable, patterns]
 
tuMemberQ[variable_, patterns_] := 
    Or @@ (MemberQ[Flatten[{variable}], #1] & ) /@ Flatten[{patterns}]
 
tuMemberQ /: tuMemberQ::usage = "tuMemberQ[variable_,patterns_] True if any \
variable_ (may be List[]) matches any in patterns_ (may be List). Equivalent \
form: tuMemberQ[patterns_][variable_] *16May2015*"
 
toDot := dotOps -> Dot
 
dotOps := Dot | xDot | CenterDot | Inactive[Dot]
 
Attributes[CenterDot] = {Flat, OneIdentity}
 
expandCom[subs_:{}][exp_] := Block[{tmp = exp}, 
     tmp = expandDot[subs][tmp //. tuCommutatorExpand]; tmp = tmp /. toxDot; 
      tmp = expandDot[toDot][tuMatrixOrderedMultiply[tmp]]; tmp]
 
expandCom /: expandCom::usage = 
     "expandCom[subs_:{}][exp_] expands Commutator expressions *22Mar2019*"
 
expandDot[sub_:{}, scalar_:{}, func_:{}, iterate_:20][exp_] := 
    tuRepeat[{sub, tuOpDistribute[dotOps], tuOpSimplify[dotOps, scalar]}, 
      {func}, iterate][exp]
 
expandDot /: expandDot::usage = "expandDot[sub_:{},scalar_:{},func_:{},iterat\
e_:20] functional definition equivalent to \
tuRepeat[{sub,tuOpDistribute[dotOps],tuOpSimplify[dotOps,scalar]},{func},iter\
ate]. This definition serves as an example of how to collect several repeated \
operations into one statement.  *22Mar2019*"
 
tuRepeat[rules_List:{}, operations_:{}, nInterate_:100][exp_] := 
    Module[{$IterationLimit = 20, xrule, xop, tmp = exp, tmp0, icnt = 0}, 
     xrule = tuRule[{rules}]; xop = Flatten[{operations}]; 
      xPrint[xrule, xop, $IterationLimit]; While[tmp0 =!= tmp, 
       tmp0 = tmp; xPrint[icnt, tmp]; icnt++; xPrint[xop]; 
        If[xop =!= {}, tmp = (Composition[Sequence @@ xop])[tmp]]; 
        If[xrule =!= {}, tmp = Fold[#1 //. Sequence[#2, MaxIterations -> 
               nInterate] & , tmp, xrule]]; xPrint[operation =!= Null]; 
        If[icnt >= nInterate, Return[tmp]]; xPrint[$IterationLimit]; ]; tmp]
 
tuRepeat /: tuRepeat::usage = "tuRepeat[rules_List:{},operations_:{},nInterat\
e_:100][exp_] applies rules_List and operations_ (may be List) repeatedly \
until exp_ does not change. nInterate_ sets MaxInterations in ReplaceRepeated \
and While[] loop. *22Feb2016*"
 
$IterationLimit = 4096
 
tuRule[rules_, negativePower_:False, simplerArg_:True] := 
    Module[{$ = rules, rr$}, $ = Flatten[$]; 
      $ = $ //. (head_)[CR[__] | CG[__] | CO[__] | CP[__] | CB[__]] -> head; 
      $ = tuExtractPattern[(Rule[__]) | (RuleDelayed[__])][$]; 
      If[simplerArg, $ = $ /. (rr:Rule | RuleDelayed)[-(a_), b_] -> 
           rr[a, -b]; ]; If[negativePower, 
       $ = {$, tuRulePositiveNegativePower[$], 
         $ /. (rr:Rule | RuleDelayed)[a_, b_] -> rr[1/a, 1/b]}]; 
      $ = Flatten[DeleteCases[(Rule | RuleDelayed)[a_, a_]][$]]; 
      $ = Flatten[DeleteCases[FontFamily -> a_][$]]; DeleteDuplicates[$]]
 
tuRule /: tuRule::usage = "tuRule[rules_,negativePower_:False,simplerArg_:Tru\
e] produces a List of valid Rule[]s from rules_ and forms a Flatten[]d list \
of Rules. Deletes imbedded comments in the form of head_[CG[__]] and other \
non-Rule forms. If  If negativePower_\[Rule]True then negative Power of \
Rule[]s are generated.  If simplerArg_\[Rule]True then Rules are transformed \
from -a\[Rule]b \[Rule] a\[Rule]-b and \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)->b \[Implies] a\[Rule]Sqrt[b] . *7Aug2015*1Feb2018*"
 
Attributes[rr$] = {Temporary}
 
CR[a__] := style[Red, a]
 
style[color_, exp__] := Module[{tmp = {exp}}, 
     tmp = Thread[Style[tmp, color, FontFamily -> "Helvetica"]]; 
      Sequence @@ tmp]
 
CG[a__] := style[Darker[Green], a]
 
CO[a__] := style[Orange, a]
 
CP[a__] := style[Darker[Pink], a]
 
CB[a__] := style[Blue, a]
 
tuRulePositiveNegativePower[rules_] := Module[{$ = rules, rr$}, 
     $ = $ /. (rr:Rule | RuleDelayed)[(a_)^(b_), c_] :> 
        (rr$[a^(-b), c^(-1)] /. rr$ -> rr)]
 
tuRulePositiveNegativePower /: tuRulePositiveNegativePower::usage = "tuRulePo\
sitiveNegativePower[rules_] produces inverse Power in Rule[]s that include \
Power[] in first arguement.  Mathematica does not recognize inversed Power \
terms in pattern matching.  *2Feb2018*"
 
tuOpDistribute[op_, over_:Plus] := 
    {oo:(op /. Dot -> dotOps)[a1___, over[a_, ap__], a2___] :> 
      Distribute[ExpandAll[oo], over]}
 
tuOpDistribute /: tuOpDistribute::usage = "tuOpDistribute[op_,over_:Plus] \
Rule for distributing op_ over over_. \
EG.\na.(b-c).d/.tuOpDistribute[dotOps]->a.b.d+a.(-c).d. Works with op_s of \
form  CommutatorM[arg__\!\(\*SubscriptBox[\(]\), \(\[Rho]\)]\) as well.  \
*21May2015*23Jun2017*"
 
tuOpSimplify[operator_, scalars_List:{}] := 
    Flatten[{(op:operator)[a_] :> a /; MatchQ[op, dotOps], 
      (op:operator)[a_] -> a, (op:operator)[] -> 1, 
      (op:operator)[Longest[a___], (cc:(c_)^(n_:1))*(d_), Longest[e___]] :> 
       cc*op[a, d, e] /; (NumericQ[c] || tuMemberQ[c, scalars]) && 
         (NumericQ[n] || tuMemberQ[n, scalars]), 
      (op:operator)[Longest[a___], cc:(c_)^(n_:1), Longest[d___]] :> 
       cc*op[a, d] /; (NumericQ[c] || tuMemberQ[c, scalars]) && 
         (NumericQ[n] || tuMemberQ[n, scalars]), 
      Conjugate[(op:operator)[a__]] :> op @@ Thread[Conjugate[{a}]]}]
 
tuOpSimplify /: tuOpSimplify::usage = "tuOpSimplify[operator_,scalars_List:{}\
] Rule for simplifying operator[] expressions by removing NumericQ and \
scalars_ from its arguements. NOTE: Some of these Rule[]s do not seem active \
for some expressions. BUG: Does not catch some scalars_. \
*26Sep2015**21Mar2018**12Mar2019*"
 
cc[a_] := Conjugate[a]
 
tuCommutatorExpand := {CommutatorP -> ACommutator, CommutatorM -> MCommutator}
 
tuCommutatorExpand /: tuCommutatorExpand::usage = "tuCommutatorExpand is \
Rule[] to replace Commutator expression into Dot[]d notation. *21Mar2016*"
 
ACommutator[A_, B_] := tuCommutator[Dot, 1][A, B]
 
tuCommutator[op_:Dot, sign_:-1][A_, B_] := op[A, B] + sign*op[B, A]
 
tuCommutator /: tuCommutator::usage = "tuCommutator[op_:Dot,sign_:-1][A_,B_] \
expands the commutator of matrices A and B using op_ as multiplicative \
operator. *17Feb2016*"
 
MCommutator[A_, B_] := tuCommutator[Dot][A, B]
 
toxDot := dotOps -> xDot
 
tuMatrixOrderedMultiply[exp_] := Module[{tmp, A$, head, pos, $p, i, $n, $}, 
     pos = tuExtractPositionPattern[dotOps][exp]; xPrint[">>", pos]; 
      pos = tuPositionNestDelete[pos]; xPrint[">>", pos]; 
      Do[$p = pos[[i,1]]; xPrint[$p, "<<"]; $p = If[$p[[-1]] == 0, 
          Delete[$p, -1]]; $ = exp[[Sequence @@ $p]]; xPrint["===", $]; 
        pos[[i,1]] = $p; If[MatchQ[head = Head[$], dotOps], 
         tmp = MapIndexed[Map[A$[#2], #1, {2}] & , $]; 
          tmp = tmp /. head -> Dot; tmp = tmp /. Times -> head; 
          tmp = tmp /. A$[_][a_] -> a]; pos[[i,2]] = tmp, {i, Length[pos]}]; 
      tuReplacePart[exp, pos]]
 
tuMatrixOrderedMultiply /: tuMatrixOrderedMultiply::usage = "tuMatrixOrderedM\
ultiply[exp_] evaluates top Level matrix expressions (Head->dotOps) using Dot \
for actual matrix multiply but maintaining order of elements from each \
matrix.  The matrix inputs must have the same proper form and sizes. This \
routine is useful when matrix elements are noncommuting matrices. \
*18Feb2016*"
 
Attributes[A$] = {Temporary}
 
tuExtractPositionPattern[pattern_, maxlevel_:Infinity][exp_] := 
    Module[{xpattern = pattern, pos, list, tmp, xList}, 
     If[Head[xpattern] == List, xpattern = Alternatives @@ xpattern; 
        xPrint[xHead[xpattern]]]; pos = Position[exp, xpattern, 
        {0, maxlevel}, Heads -> True]; list = Extract[exp, pos]; 
      tmp = Thread[pos -> list]; xPrint["X ", tmp, ", ", xpattern, ", ", 
       list, ", ", pos]; tmp]
 
tuExtractPositionPattern /: tuExtractPositionPattern::usage = "tuExtractPosit\
ionPattern[pattern_,maxlevel_:Infinity][exp_] extracts a List of \
{Positions,items} that match pattern_ in exp_ up to Level maxlevel_.  Returns \
a List[ pos1->match1,pos2->match2,... ]. pattern_ may be a List or \
Alternatives. *3Nov2016*)"
 
tuPositionNestDelete[position_List] := Module[{$ = position, $p, dup, $n, $t, 
      i}, $p = $ = (#1 & ) /@ Sort[$]; xPrint[$p]; If[$p[[1,1]] == {}, 
       Return[{$p[[1]]}]]; Do[$t = $p[[i,1]]; $n = FirstPosition[$t, 0][[1]]; 
        $p[[i,1]] = $t[[1 ;; If[NumericQ[$n], $n - 1, -1]]], 
       {i, Length[$p]}]; Do[If[MemberQ[SequencePosition[$p[[$j,1]], 
          $p[[$i,1]]], {1, ___}], $[[$j]] = dup[$i, $[[$j]]]], 
       {$i, Length[$] - 1}, {$j, $i + 1, Length[$]}]; DeleteCases[$, dup[__]]]
 
tuPositionNestDelete /: tuPositionNestDelete::usage = "tuPositionNestDelete[p\
osition_List] reduces the result of Position\[Rule] position_List so that \
there is only top level positions. E.G. \
{{1,2}\[Rule]a,{1}\[Rule]r[a]}\[Rule]{{1}->r[a]}. If pointer to whole \
expression {} exists then that alone is returned.  *11Feb2017*"
 
tuReplacePart[exp_, pos_List] := Module[{$}, 
     If[Length[$ = Cases[pos, ({} -> _) | ({} :> _)]] > 0, $[[1,2]], 
      ReplacePart[exp, pos]]]
 
tuReplacePart /: tuReplacePart::usage = "tuReplacePart[exp_,pos_List] like \
ReplacePart[] except replaces whole exp_ when pos contains {{}->replacement} \
in which case ReplacePart does nothing. *5Sep2015*"
 
expandDC[sub_:{}, scalar_:{}, func_:{}, iterate_:20] := 
    expandDot[sub, scalar, func, iterate]
 
Attributes[exp$] = {Temporary}
 
Attributes[eyd$] = {Temporary}
 
Attributes[e$] = {Temporary}
 
$def["/Users/Tom/Mathematica/StandardModel/StandardModelFormulas"] = {}
 
$defID := NBname["stub"]
 
NBname[type_String] := Module[{name = NotebookFileName[], 
      dir = FileNameDrop[NotebookFileName[], -1], 
      base = FileBaseName[NotebookFileName[]]}, Switch[type, "name", name, 
      "dir", dir, "base", base, "stub", FileNameJoin[{dir, base}]]]
 
$lepton = {{{e, Subscript[\[Nu], e]}, {\[Mu], Subscript[\[Nu], \[Mu]]}, 
      {\[Tau], Subscript[\[Nu], \[Tau]]}}}
 
Attributes[Subscript] = {NHoldRest}
 
$quark = {{{u, d}, {c, s}, {t, b}}}
 
$SpinorsPath = "/Users/Tom/Library/Mathematica/Applications"
 
$stdmodeleigenvaluesTbl = 
    Grid[{{Text["Standard Model Eigenvalues(1805.00411), \nSingle generation, \
{u,d} have color index\n{R,L}chirality, \
antiparticle{Y\[Rule]-Y,R\[LeftRightArrow]L}"], SpanFromLeft}, 
      {"Particle", Subscript[u, R], Subscript[d, R], 
       Subscript[Q, L][Subscript[u, L], Subscript[d, L]], Subscript[e, R], 
       Subscript[L, L][Subscript[\[Nu], L], Subscript[e, L]], 
       Subscript[\[Nu], R]}, {SU[3], 3, 3, 3, 0, 0, 0}, 
      {SU[2], 0, 0, 2, 0, 2, 0}, {Y[Style["hypercharge", RGBColor[0, 2/3, 0], 
         FontFamily -> "Helvetica"]], 4/3, -2/3, 1/3, -2, -1, 0}}, 
     Frame -> All]
