tmpx = Sum[Sum[Sum[Sum[16*(-I)^la*I^l*Pi^2*KroneckerDelta[l, la]*
         KroneckerDelta[m, ma]*xIntegrate[Conjugate[SphericalHarmonicY[l, m, 
             Subscript[\[Theta], OverHat[k]], Subscript[\[Phi], OverHat[k]]]]*
           fFTP[k, \[Eta]\[UnderBracket]Subscript\[UnderBracket]Times]*
           SphericalBesselJ[l, 
            \[Chi]\[UnderBracket]Subscript\[UnderBracket]Times*Norm[k]], k]*
         xIntegrate[Conjugate[fFTP[ka, 
             \[Eta]\[UnderBracket]Subscript\[UnderBracket]Times]]*
           Conjugate[SphericalBesselJ[la, 
             \[Chi]\[UnderBracket]Subscript\[UnderBracket]Times*Norm[ka]]]*
           SphericalHarmonicY[la, ma, Subscript[\[Theta], OverHat[ka]], 
            Subscript[\[Phi], OverHat[ka]]], ka], {ma, -la, la}], 
       {la, 0, Infinity}], {m, -l, l}], {l, 0, Infinity}]
 
Attributes[Subscript] = {HoldFirst, NHoldRest}
 
Subscript[a, eq] = ToExpression[MakeBoxes[Subscript[a, eq]]]
 
Subscript[c, s] = ToExpression[MakeBoxes[Subscript[c, s]]]
 
Subscript[f, b] = ToExpression[MakeBoxes[Subscript[f, b]]]
 
Subscript[f, \[Nu]] = ToExpression[MakeBoxes[Subscript[f, \[Nu]]]]
 
Subscript[k, eq] = ToExpression[MakeBoxes[Subscript[k, eq]]]
 
Subscript[r, s] = ToExpression[MakeBoxes[Subscript[r, s]]]
 
Subscript[R, \[Eta]] = ToExpression[MakeBoxes[Subscript[R, \[Eta]]]]
 
Subscript[y, \[Eta]] = ToExpression[MakeBoxes[Subscript[y, \[Eta]]]]
 
Subscript[\[CapitalDelta], T] = ToExpression[
     MakeBoxes[Subscript[\[CapitalDelta], T]]]
 
Subscript[\[Eta], 0] = ToExpression[MakeBoxes[Subscript[\[Eta], 0]]]
 
Subscript[\[Eta], recomb] = ToExpression[MakeBoxes[Subscript[\[Eta], recomb]]]
 
Subscript[\[Eta], y] = ToExpression[MakeBoxes[Subscript[\[Eta], y]]]
 
Subscript[\[CapitalTheta], 0] = ToExpression[
     MakeBoxes[Subscript[\[CapitalTheta], 0]]]
 
Subscript[\[Rho], a] = ToExpression[MakeBoxes[Subscript[\[Rho], a]]]
 
Subscript[\[Rho], b] = ToExpression[MakeBoxes[Subscript[\[Rho], b]]]
 
Subscript[\[Rho], cr] = ToExpression[MakeBoxes[Subscript[\[Rho], cr]]]
 
Subscript[\[Rho], de] = ToExpression[MakeBoxes[Subscript[\[Rho], de]]]
 
Subscript[\[Rho], m] = ToExpression[MakeBoxes[Subscript[\[Rho], m]]]
 
Subscript[\[Rho], \[Gamma]] = ToExpression[
     MakeBoxes[Subscript[\[Rho], \[Gamma]]]]
 
Subscript[\[CapitalPhi], y] = ToExpression[
     MakeBoxes[Subscript[\[CapitalPhi], y]]]
 
Subscript[\[CapitalPsi], y] = ToExpression[
     MakeBoxes[Subscript[\[CapitalPsi], y]]]
 
Subscript[\[CapitalOmega], b] = ToExpression[
     MakeBoxes[Subscript[\[CapitalOmega], b]]]
 
Subscript[\[CapitalOmega], m] = ToExpression[
     MakeBoxes[Subscript[\[CapitalOmega], m]]]
 
Subscript /: SubStar[a] = ToExpression[MakeBoxes[SubStar[a]]]
 
Subscript /: SubStar[y] = ToExpression[MakeBoxes[SubStar[y]]]
 
Subscript /: SubStar[z] = ToExpression[MakeBoxes[SubStar[z]]]
 
Subscript /: SubStar[\[Eta]] = ToExpression[MakeBoxes[SubStar[\[Eta]]]]
 
Subscript /: SubStar[\[Chi]] = ToExpression[MakeBoxes[SubStar[\[Chi]]]]
 
Subscript[Utilities`SubscriptSymbols`Private`x_, 
      Utilities`SubscriptSymbols`Private`n_] /; 
     Utilities`SubscriptSymbols`Private`$FixSubscrip\[Tau]SymbolsBug := 
    Block[{Utilities`SubscriptSymbols`Private`$FixSubscrip\[Tau]SymbolsBug}, 
     ToExpression[ToBoxes[Subscript[Utilities`SubscriptSymbols`Private`x, 
        Utilities`SubscriptSymbols`Private`n]]]]
 
Subscript[c, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[c, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[a, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[a, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[eq, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[eq, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[T, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[T, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[y, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[y, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[l, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[l, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[m, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[m, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[de, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[de, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[cr, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[cr, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[s, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[s, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[H, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[H, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Subscript[k, (Utilities`SubscriptSymbols`Private`n_)?
      Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st] := 
    ToExpression[MakeBoxes[Subscript[k, 
       Utilities`SubscriptSymbols`Private`n]]]
 
Attributes[MakeBoxes] = {HoldAllComplete}
 
MakeBoxes[HoldPattern[(x:Blank[Subscript])^(n_)], form_] := 
    \(\*MakeBoxes[x, form]\^\*MakeBoxes[n, form]\)
 
MakeBoxes[(symb_Symbol)?(With[{str = ToString[#1]}, 
        StringMatchQ[str, "*\[UnderBracket]Subscript\[UnderBracket]*"] && 
         StringLength[str] > 12] & ), TraditionalForm] := 
    With[{st = ToString[symb], p1 = StringPosition[ToString[symb], 
         "\[UnderBracket]", 1][[1,1]], p2 = StringPosition[ToString[symb], 
        "$"]}, If[p2 === {}, 
      \(\(\*StringTake[st, List[1, Plus[p1, -1]]]\)\_
         \(\*StringTake[st, List[Plus[p1, 11], -1]]\)\), 
      \(\(\*StringTake[st, List[1, Plus[p1, -1]]]\)\_
         \(\*StringTake[st, List[Plus[p1, 11], Plus[Part[p2, -1, 1], -1]]]\)\
\)]]
 
MakeBoxes[Utilities`Notation`Private`expr_, 
     Utilities`Notation`Private`form_] := 
    With[{Utilities`Notation`Private`boxes = NotationMakeBoxes[
        Utilities`Notation`Private`expr, Utilities`Notation`Private`form]}, 
     Utilities`Notation`Private`boxes /; 
      Head[Utilities`Notation`Private`boxes] =!= NotationMakeBoxes]
 
Attributes[NotationMakeBoxes] = {HoldAllComplete}
 
NotationMakeBoxes[\[Eta]\[UnderBracket]Subscript\[UnderBracket]0, 
     StandardForm] := \(\[Eta]\_0\)
 
NotationMakeBoxes[\[Eta]\[UnderBracket]Subscript\[UnderBracket]Times, 
     StandardForm] := \(\[Eta]\_*\)
 
NotationMakeBoxes[\[CapitalTheta]\[UnderBracket]Subscript\[UnderBracket]0, 
     StandardForm] := \(\[CapitalTheta]\_0\)
 
NotationMakeBoxes[\[Chi]\[UnderBracket]Subscript\[UnderBracket]Times, 
     StandardForm] := \(\[Chi]\_*\)
 
NotationMakeBoxes[HoldPattern[ParsedBoxWrapper][
      Utilities`Notation`Private`boxes__], 
     Utilities`Notation`Private`anyForm_] := 
    (Utilities`Notation`Private`issueObsoleteFunMessage[NotationMakeBoxes, 
      "Utilities`Notation`"]; 
     TagBox[Utilities`Notation`Private`boxes, "NotationTemplateTag"]; )
 
NotationMakeBoxes /: NotationMakeBoxes::usage = "NotationMakeBoxes is a \
private version of MakeBoxes. The Notation package uses NotationMakeBoxes in \
an attempt to minimally interfere with other functions that use MakeBoxes."
 
Utilities`Notation`Private`issueObsoleteFunMessage[
     Utilities`Notation`Private`fun_, Utilities`Notation`Private`context_] := 
    (Message[Utilities`Notation`Private`fun::obspkgfn, 
      Utilities`Notation`Private`fun, Utilities`Notation`Private`context]; )
 
Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st[
     Utilities`SubscriptSymbols`Private`n_String] := 
    ToExpression[Utilities`SubscriptSymbols`Private`n, StandardForm, 
     IntegerQ[#1] && NonNegative[#1] & ]
 
Utilities`SubscriptSymbols`Private`Integer\[CapitalTau]\[Epsilon]st[
     Utilities`SubscriptSymbols`Private`n_] := 
    IntegerQ[Utilities`SubscriptSymbols`Private`n] && 
     NonNegative[Utilities`SubscriptSymbols`Private`n]
