(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
$s\[Epsilon]:=T[\[Epsilon],"uuu",{i_,j_,k_}]:>LeviCivitaTensor[3][[i+1,j+1,k+1]];
$order\[Mu]\[Mu]:={dd:Dot[a_,b_]:>If[tuHasAllQ[{a,b},\[Mu]]&&OrderedQ[{b,a}],Reverse[dd],
dd],
dd:Dot[a_,b_]:>If[tuHasAllQ[{a,b},\[Mu]]&&tuHasAnyQ[{b},T[X,"d",{\[Mu]}]],tuIndexSwapUpDown[\[Mu]][dd],
dd],
dd:Dot[a_,b_]:>If[tuHasAllQ[{a,b},\[Mu]]&&tuHasAnyQ[{b},T[P,"u",{\[Mu]}]],tuIndexSwapUpDown[\[Mu]][dd],
dd]
};
$sumBreakUp:={xSum[a_,{n1_,-\[Infinity],\[Infinity]}]:>xSum[a,{n1,1,\[Infinity]}]+(xSum[a,{-n1,1,\[Infinity]}]/.n1->-n1),
xSum[a_,{n1_,-\[Infinity],\[Infinity]},{n2_,-\[Infinity],\[Infinity]}]:>xSum[a,{n1,1,\[Infinity]},{n2,1,\[Infinity]}]+(xSum[a,{n1,1,\[Infinity]},{-n2,1,\[Infinity]}]/.n2->-n2)+
(xSum[a,{-n1,1,\[Infinity]},{n2,1,\[Infinity]}]/.n1->-n1)+
(xSum[a,{-n1,1,\[Infinity]},{-n2,1,\[Infinity]}]/.n1->-n1/.n2->-n2)};
$sumGather:={(s1_:1)xSum[a_,c__]+ (s2_:1)xSum[b_,c__]->xSum[s1 a+s2  b,c],xSum[xSum[a_,c1__],c2__]->xSum[a,c1,c2]
};

tuDotVarSeparate//Clear
tuDotVarSeparate[var_][exp_xDot]:=Module[{$,$1,$2},
$=Apply[List,exp];
$=Map[If[tuHasAnyQ[#,var],XX[#],#]&,$];
$1=Select[$,tuHasAnyQ[#,XX]&]/.XX[a_]->a;
$1=Apply[xDot,$1];
$2=Select[$,tuHasNoneQ[#,XX]&];
$2=Apply[xxDot,$2];
$=$1**$2
];
$scalar={T,\[Tau],\[Sigma],n,n1,n2,Tensor[p,_,_],Tensor[x,_,_],factor\[Theta],Tensor[\[Delta],_,_]};
$scalarNon={T,\[Tau],\[Sigma],Tensor[p,_,_],Tensor[x,_,_],factor\[Theta]};

$constant={T,n,n1,n2};
$sPartial0={
tuDPartial[xx_,\[Sigma]]:>0/;MatchQ[xx,Apply[Alternatives,{Tensor[x,_,_],Tensor[p,_,_],\[Tau],Tensor[\[Alpha],_,_],Tensor[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),_,_],\[Zeta],Tensor[\[Theta],_,_],factor\[Theta]}]]
,tuDPartial[xx_,\[Tau]]:>0/;MatchQ[xx,\[Sigma]]
,tuDPartial[\[Tau],\[Tau]]->1
,tuDPartial[\[Sigma],\[Sigma]]->1
};

tuLightCone2//Clear
tuLightCone2[step_][exp_]:=Module[{$,$s,$p,$sP},
If[step==1,(*Sum over dummy \[Mu] indices *)
$=exp//Expand;
If[tuHasAnyQ[$,Plus],$=$//(#/.pp:Plus[_,__]:>tuIndependentTerms[{\[Mu]}][pp]+Sum[tuDependentTerms[{\[Mu]}][pp],{\[Mu],0,2}]/;tuHasAllQ[pp,\[Mu]]&),
$=Sum[$,{\[Mu],0,2}]
];
];
If[step==2,(*convert to light-cone variables X^n\[Rule]iX^+-,P^n\[Rule]iP^+-, Overscript[\[CapitalTheta], _]\[Rule], no \[CapitalPi]'s*)
$p={T[\[CapitalPi],"ud",{0,s_}]:>(T[\[CapitalPi],"ud",{"+",s}]-T[\[CapitalPi],"ud",{"-",s}])Sqrt[2],
T[\[CapitalPi],"ud",{1,s_}]:>(T[\[CapitalPi],"ud",{"+",s}]+T[\[CapitalPi],"ud",{"-",s}])Sqrt[2],T[\[CapitalPi],"dd",{0,s_}]:>(T[\[CapitalPi],"dd",{"+",s}]-T[\[CapitalPi],"dd",{"-",s}])Sqrt[2],
T[\[CapitalPi],"dd",{1,s_}]:>(T[\[CapitalPi],"dd",{"+",s}]+T[\[CapitalPi],"dd",{"-",s}])Sqrt[2]};
$g=tuRule[{$gammaMetric,tuRuleSelect[{T[\[CapitalGamma],"u",{0}],T[\[CapitalGamma],"u",{1}]},{"+"}][$gammaLightCone]}];

$sP={
{$s=e[27]//tuRuleSelect[Tensor[\[CapitalPi],_,_]],
$s//tuIndexLowerAll[\[Mu],\[Mu]]}//tuAddPatternVariable[\[Mu]],
e[26]//tuRuleSelect[\!\(\*OverscriptBox[\(T[\[CapitalTheta], "\<\>", {}]\), \(_\)]\)],
T[X,"u",{"+"}]->T[iX,"u",{"+"}],
T[X,"d",{"+"}]->T[iX,"d",{"+"}],
T[X,"u",{"-"}]->T[iX,"u",{"-"}],
T[X,"d",{"-"}]->T[iX,"d",{"-"}],
T[X,"u",{2}]->T[iX,"",{}],
T[X,"d",{2}]->T[iX,"",{}]
}//tuRule;
$=exp/.(e[1]//tuRuleSelect[{T[X,"d",{0|1|2}],T[P,"u",{0|1|2}]},{},{T,pm}])(*metric*)
/.(e[4]//tuRuleSelect[{T[X,"u",{0|1|2}],T[P,"d",{0|1|2}]},{},{T,pm}])(*lightcone*)
;
$=$//expandDot[{$g,$p,$sP},{},{tuDerivativeExpand[]},4]
];

If[step==3,(*expand the \[CapitalGamma]'s and \[CapitalTheta]*)
If[tuHasNoneQ[exp,\[CapitalTheta]],Return[exp]];
$s={
T[\[CapitalTheta],"",{}]->{{\[Theta]1},{\[Theta]2}},
{\[Theta]1->0,\[Theta]2->\[Theta] factor\[Theta]},
$gammaLightCone};
$=exp/.toxDot/.dd:xDot[__]:>tuDotVarSeparate[{\[CapitalGamma],\[CapitalTheta]}][dd];
$=$//expandDot[{$s},{},{tuDerivativeExpand[{}]},3]//tuMatrixOrderedMultiply//expandDot[{toDot,xxDot->xDot,NonCommutativeMultiply->Dot,{{a_}}->a,$sPartial0},{factor\[Theta]}]
];

If[step==4,(*lightcone variable\[Rule]average+Overscript[deviation, _] variable, X^-\[Rule]x^-+Overscript[X^-, _]*)
$s={
e[4,1]//tuRuleSelect[{T[iX,"d",{"-"}],T[iX,"u",{"+"}],T[iX,"",{}],T[iX,"u",{"-"}],Tensor[iP,_,_]},{},{X,P,T},False],
e[33]//tuRuleInTermsOf[{\[Zeta],\!\(\*OverscriptBox[\(\[Theta]\), \(_\)]\)},\[Theta]]
}//tuRule;
$=exp/.$s//expandDot[{$sPartial0},{},{tuDerivativeExpand[]},2](*BUG in using $s within expandDot[]*)
];
If[step==5,(*Integrate over {\[Sigma],0,2\[Pi]}*)
$=exp;
$=$//expandDot[{$sIntegral0,e[4,1]//tuRuleSelect[xIntegral[__]],$sPartial0},{$scalar},{tuDerivativeExpand[],tuOpDistributeF[xIntegral],tuIntegralSimplify[{iP,iX,\[Theta]}]},6]
];

If[step==6,(*Fourier decompose Overscript[A, _] variables *)
$s={e[12]//tuRuleSelect[\!\(\*OverscriptBox[\(a_\), \(_\)]\)],
$sXminus,
$sPplus,
e[33]//tuRuleSelect[\!\(\*OverscriptBox[\(a_\), \(_\)]\),{n}]};
$sCombineSum={ Dot[xSum[a_,b_],xSum[a1_,b1_],xSum[a2_,b2_]]:>Dot[xSum[a,b],xSum[a1,b1]/.n->n1,xSum[a2,b2]/.n->n2]
,Dot[(c_:1)xSum[a_,b_],(c1_:1)xSum[a1_,b1_]]:>Dot[c xSum[a,b],c1 xSum[a1,b1]/.n->n1]
,Dot[xSum[a_,b_,c_],xSum[a1_,b1_]]:>Dot[xSum[a,b,c]/.n->n2,xSum[a1,b1]]
,Dot[xSum[a_,b_],xSum[a1_,b1_,c1_]]:>Dot[xSum[a,b],xSum[a1,b1,c1]/.n->n2]};

$=exp//expandDot[tuRule[{$s,$sPartial0}],{$scalar},{tuDerivativeExpand[$constant]},4];

$=$/.$sCombineSum/.xSum[a1_,c1__]. xSum[a2_,c2__]->xSum[ a1. a2,c1,c2]//expandDot[{},{$scalar,Exp[_]},{},4]
];

If[step==7,(*Manipulate Sum,xIntegral for integration*)
$=exp//expandDot[{tuOpDistribute[xIntegral],tuSumGatherR,$sPartial0},{Exp[_],$scalar(*,\[Zeta]*)},(** ?\[Zeta] Grassmanian **){tuIntegralSimplify[{}],Expand,tuOpGather[xSum,False],tuOpSwitch[xIntegral,xSum]},9];
];

If[step==8,(*Evaluate xIntegral over {\[Sigma],0,2\[Pi]}*)
$=exp/.xIntegral[a_,\[Sigma]]->xIntegral[a,{\[Sigma],0,2\[Pi]}]//Activate;
$=$/.(Exp[2I \[Pi] a_]-1)->a 2\[Pi] \[Delta][a]/.\[Delta][a_+b__:0]->T[\[Delta],"dd",{a,-b}]//expandDot[{},{$scalar},{},2]//tuSumKroneckerDelta[]
];

If[step==9,(*convert xSum {n,-\[Infinity],\[Infinity]}\[LongRightArrow]{n,1,\[Infinity]}*)
$=exp/.$sumBreakUp//.$sumGather//tuSumSimplify[$scalarNon];
$=$//tuOpGather[xSum,False]//expandDot[{},{$scalar},{},4];
(*uniform xSum indices*)
$=$//.ss:xSum[a_,{n,1,\[Infinity]},{n2,1,\[Infinity]}]:>(ss/.{n2->n1})//.ss:xSum[a_,{n1,1,\[Infinity]},{n2,1,\[Infinity]}]:>(ss/.{n1->n,n2->n1})//.$sumGather;
$=$/.{xSum[_ T[\[Delta],"dd",{n_,-n_}],{n_,1,\[Infinity]}]->0}
];

If[step==10,(*order Dot[] of \[Alpha]'s and \[Theta]'s*)
$s={Dot[T[\[Alpha]1_,"d",{n1_}],T[\[Alpha]2_,"d",{n2_}]]:>    Dot[T[\[Alpha]2,"d",{n2}],T[\[Alpha]1,"d",{n1}]]/;tuHasNoneQ[n1,-1]&&tuHasAnyQ[n2,-1]&&tuHasAnyQ[\[Alpha]1,{\[Alpha]}]&&tuHasAnyQ[\[Alpha]2,{\[Alpha]}],

Dot[T[\[Theta],"d",{n1_}],T[\[Theta],"d",{n2_}]]:>    -Dot[T[\[Theta],"d",{n2}],T[\[Theta],"d",{n1}]]/;tuHasNoneQ[n1,-1]&&tuHasAnyQ[n2,-1]
};
$squant={Dot[T[\[Alpha],"d",{n1_}],T[\[Alpha],"d",{n2_}]]:>    Dot[T[\[Alpha],"d",{n2}],T[\[Alpha],"d",{n1}]]+n1 T[\[Delta],"dd",{n1,n2}]/;tuHasNoneQ[n1,-1]&&tuHasAnyQ[n2,-1],

Dot[T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n1_}],T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n2_}]]:>    Dot[T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n2}],T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n1}]]+n1 T[\[Delta],"dd",{n1,n2}]/;tuHasNoneQ[n1,-1]&&tuHasAnyQ[n2,-1],

Dot[T[\[Alpha],"d",{n1_}],T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n2_}]]->    Dot[T[\!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\),"d",{n2}],T[\[Alpha],"d",{n1}]],

Dot[T[\[Theta],"d",{n1_}],T[\[Theta],"d",{n2_}]]:>    -Dot[T[\[Theta],"d",{n2}],T[\[Theta],"d",{n1}]]+T[\[Delta],"dd",{n1,n2}]/;tuHasNoneQ[n1,-1]&&tuHasAnyQ[n2,-1]
};

$=exp//expandDot[{$squant,$sumBreakUp},$scalar,{Expand,tuSumKroneckerDelta[]},4];
$=$//.$sumGather//.xSum[a_,b__]:>xSum[Simplify[a],b]//tuOpSimplifyF[xSum,$scalarNon];
$=$//.xSum[a_,b__]:>xSum[Simplify[a],b]//tuOpSimplifyF[xSum,$scalarNon];
$=$//.$sumGather
];
$
];



