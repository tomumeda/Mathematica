e[1] = {S -> Inactive[Integrate][tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, 
             {Void}], \[Tau]] . Tensor[P, {Void}, {\[Mu]}] - 
          tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] . 
            Tensor[P, {Void}, {\[Mu]}]*Tensor[u, {}, {}] - 
          ((Tensor[P, {Void}, {\[Mu]}] . Tensor[P, {\[Mu]}, {Void}] + 
             tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] . 
               tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
              T[Style["tension", RGBColor[0, 2/3, 0], FontFamily -> 
                  "Helvetica"]]^2)*Tensor[\[ScriptL], {}, {}])/2, \[Sigma], 
         \[Tau]]/(2*Pi), {Tensor[X, {\[Mu]}, {Void}], Tensor[P, {\[Mu]}, 
         {Void}]}[Style["canonical spacetime variables in 3D", 
        RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]], 
      {Tensor[X, {Void}, {0}] -> -Tensor[X, {0}, {Void}], 
        Tensor[X, {Void}, {1}] -> Tensor[X, {1}, {Void}], 
        Tensor[X, {Void}, {2}] -> Tensor[X, {2}, {Void}], 
        Tensor[P, {0}, {Void}] -> -Tensor[P, {Void}, {0}], 
        Tensor[P, {1}, {Void}] -> Tensor[P, {Void}, {1}], 
        Tensor[P, {2}, {Void}] -> Tensor[P, {Void}, {2}]}[
       Style["Minkowski metric relationships", RGBColor[0, 2/3, 0], 
        FontFamily -> "Helvetica"]]}[
     Style["e[1] Nambu-Goto action, closed 3D string", RGBColor[0, 2/3, 0], 
      FontFamily -> "Helvetica"]]
 
e[2] = {Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] -> 
       Inactive[Integrate][Tensor[P, {Void}, {\[Mu]}], \[Sigma]]/(2*Pi), 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
       Inactive[Integrate][Tensor[X, {Void}, {\[Nu]}] . Tensor[P, {Void}, 
            {\[Rho]}]*Tensor[\[Epsilon], {\[Mu], \[Nu], \[Rho]}, 
           {Void, Void, Void}], \[Sigma]]/(2*Pi), 
      Tensor[\[Epsilon], {\[Mu], \[Nu], \[Rho]}, {Void, Void, Void}][
       Style["Levi-Civita tensor", RGBColor[0, 2/3, 0], 
        FontFamily -> "Helvetica"]]}[Style["e[2] Noether charges", 
      RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]]
 
e[3] = {Tensor[Style["X", Italic], {"\[PlusMinus]"}, {Void}] -> 
       ("\[PlusMinus]"[Tensor[X, {0}, {Void}]] + Tensor[X, {1}, {Void}])/
        Sqrt[2], Tensor[Style["P", Italic], {Void}, {"\[PlusMinus]"}] -> 
       ("\[PlusMinus]"[Tensor[P, {Void}, {0}]] + Tensor[P, {Void}, {1}])/
        Sqrt[2]}[Style["e[3] light-cone coordinates", RGBColor[0, 2/3, 0], 
      FontFamily -> "Helvetica"]]
 
e[4] = {{Tensor[X, {2}, {Void}] -> Tensor[Style["X", Italic], {}, {}], 
       Tensor[P, {Void}, {2}] -> Tensor[Style["P", Italic], {}, {}], 
       {Tensor[X, {0}, {Void}] -> (-Tensor[Style["X", Italic], {"-"}, 
             {Void}] + Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
        Tensor[X, {1}, {Void}] -> (Tensor[Style["X", Italic], {"-"}, 
            {Void}] + Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
        Tensor[P, {Void}, {0}] -> (-Tensor[Style["P", Italic], {Void}, 
             {"-"}] + Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
        Tensor[P, {Void}, {1}] -> (Tensor[Style["P", Italic], {Void}, 
            {"-"}] + Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2]}, 
       {Tensor[Style["X", Italic], {Void}, {"-"}] -> 
          Tensor[Style["X", Italic], {"+"}, {Void}], 
         Tensor[Style["X", Italic], {Void}, {"+"}] -> 
          Tensor[Style["X", Italic], {"-"}, {Void}]}[Style["computable", 
         RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]], 
       Tensor[x, {}, {}] -> Inactive[Integrate][Tensor[Style["X", Italic], 
           {}, {}], \[Sigma]]/(2*Pi), Tensor[p, {}, {}] -> 
        Inactive[Integrate][Tensor[Style["P", Italic], {}, {}], \[Sigma]]/
         (2*Pi), Tensor[x, {"-"}, {Void}][\[Tau]] -> 
        Inactive[Integrate][Tensor[Style["X", Italic], {"-"}, {Void}], 
          \[Sigma]]/(2*Pi), Tensor[p, {Void}, {"+"}][\[Tau]] -> 
        Inactive[Integrate][Tensor[Style["P", Italic], {Void}, {"+"}], 
          \[Sigma]]/(2*Pi), OverBar[Tensor[Style["X", Italic], {}, {}]] -> 
        -Tensor[x, {}, {}] + Tensor[Style["X", Italic], {}, {}], 
       OverBar[Tensor[Style["P", Italic], {}, {}]] -> -Tensor[p, {}, {}] + 
         Tensor[Style["P", Italic], {}, {}], 
       {OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] -> 
          -Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, 
            {Void}]}[Style["Error in text", RGBColor[1, 0, 0], 
         FontFamily -> "Helvetica"]], OverBar[Tensor[Style["P", Italic], 
          {Void}, {"+"}]] -> -Tensor[p, {Void}, {"+"}] + 
         Tensor[Style["P", Italic], {Void}, {"+"}], 
       Tensor[Style["X", Italic], {}, {}] -> 
        OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}], 
       Tensor[Style["P", Italic], {}, {}] -> 
        OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}], 
       {Tensor[Style["X", Italic], {"-"}, {Void}] -> 
          OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
           Tensor[x, {"-"}, {Void}]}[Style["Error in text", 
         RGBColor[1, 0, 0], FontFamily -> "Helvetica"]], 
       Tensor[Style["P", Italic], {Void}, {"+"}] -> 
        OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
         Tensor[p, {Void}, {"+"}], 
       {Tensor[Style["X", Italic], {"+"}, {Void}] -> \[Tau], 
         Tensor[Style["P", Italic], {Void}, {"-"}] -> 
          Tensor[p, {Void}, {"-"}][\[Tau]]}[Style["lightcone gauge", 
         RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]], 
       Style["Constraints", RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"], 
       {Tensor[Style["P", Italic], {Void}, {"+"}] -> 
          (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
            T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
             tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
           (2*Tensor[p, {Void}, {"-"}])}[Style["by Hamiltonian constraint??", 
         RGBColor[1, 0, 0], FontFamily -> "Helvetica"]], 
       {tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] -> 0}[
        Style[
         " by \!\(\*OverscriptBox[SuperscriptBox[\(X\), \(-\)], \(_\)]\)??", 
         RGBColor[1, 0, 0], FontFamily -> "Helvetica"]], 
       tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]] -> 0, 
       tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]] -> 0, 
       Inactive[Integrate][OverBar[a_], \[Sigma]] -> 0, 
       tuDDown["\[PartialD]"][\[Tau], \[Sigma]] -> 0, 
       tuDDown["\[PartialD]"][\[Sigma], \[Tau]] -> 0}[
      Style["e[4] define", RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]]}
 
e[7] = Tensor[Style["P", Italic], {}, {}] . Tensor[Style["P", Italic], {}, 
        {}] + Tensor[Style["P", Italic], {Void}, {"-"}] . 
       Tensor[Style["P", Italic], {Void}, {"+"}] + 
      Tensor[Style["P", Italic], {Void}, {"+"}] . Tensor[Style["P", Italic], 
        {Void}, {"-"}] + T^2*tuDDown["\[PartialD]"][
         Tensor[Style["X", Italic], {}, {}], \[Sigma]] . 
        tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {}, {}], 
         \[Sigma]] + T^2*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], 
          {"-"}, {Void}], \[Sigma]] . tuDDown["\[PartialD]"][
         Tensor[Style["X", Italic], {"+"}, {Void}], \[Sigma]] + 
      T^2*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {"+"}, {Void}], 
         \[Sigma]] . tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {"-"}, 
          {Void}], \[Sigma]] -> 0
 
e[8] = {\[ScriptCapitalL] -> -H + tuDDown["\[PartialD]"][x, \[Tau]] . p + 
       tuDDown["\[PartialD]"][Tensor[x, {"-"}, {Void}], \[Tau]] . 
        Tensor[p, {Void}, {"-"}] - 
       (u*Inactive[Integrate][tuDDown["\[PartialD]"][
            OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] . 
           OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]])/(2*Pi) + 
       Inactive[Integrate][tuDDown["\[PartialD]"][
           OverBar[Tensor[Style["X", Italic], {}, {}]], \[Tau]] . 
          OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]]/(2*Pi), 
     H -> -Tensor[p, {Void}, {"+"}], 
     H -> (p . p + Inactive[Integrate][OverBar[Tensor[Style["P", Italic], {}, 
              {}]] . OverBar[Tensor[Style["P", Italic], {}, {}]] + 
           T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, 
                {}]], \[Sigma]] . tuDDown["\[PartialD]"][OverBar[Tensor[
                Style["X", Italic], {}, {}]], \[Sigma]], \[Sigma]]/(2*Pi))/
       (2*Tensor[p, {Void}, {"-"}])}
 
e[9] = {H -> (Tensor[p, {}, {}] . Tensor[p, {}, {}] + 
        Inactive[Integrate][OverBar[Tensor[Style["P", Italic], {}, {}]] . 
            OverBar[Tensor[Style["P", Italic], {}, {}]] + 
           T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, 
                {}]], \[Sigma]] . tuDDown["\[PartialD]"][OverBar[Tensor[
                Style["X", Italic], {}, {}]], \[Sigma]], \[Sigma]]/(2*Pi))/
       (2*Tensor[p, {Void}, {"-"}]), H -> Tensor[p, {Void}, {"+"}]}
 
e[10] = {Tensor[\[ScriptCapitalP], {}, {}] -> Tensor[p, {}, {}], 
     Tensor[\[ScriptCapitalP], {Void}, {"-"}] -> Tensor[p, {Void}, {"-"}], 
     Tensor[\[ScriptCapitalP], {Void}, {"+"}] -> Tensor[p, {Void}, {"+"}], 
     Tensor[\[ScriptCapitalJ], {}, {}] -> 
      -\[Tau] . Tensor[p, {Void}, {"+"}] + Tensor[x, {"-"}, {Void}] . 
        Tensor[p, {Void}, {"-"}], Tensor[\[ScriptCapitalJ], {"+"}, {Void}] -> 
      -x . Tensor[p, {Void}, {"-"}] + \[Tau] . Tensor[p, {}, {}], 
     Tensor[\[ScriptCapitalJ], {"-"}, {Void}] -> 
      x . Tensor[p, {Void}, {"+"}] + Tensor[x, {"-"}, {Void}] . 
        Tensor[p, {}, {}] + Inactive[Integrate][OverBar[Style["X", Italic]] . 
           OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] - 
          OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] . 
           OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]]/(2*Pi), 
     {Tensor[\[ScriptCapitalP], {}, {}]^2 -> -\[ScriptCapitalM]^2 -> 
         -Inactive[Integrate][OverBar[Tensor[Style["P", Italic], {}, {}]] . 
              OverBar[Tensor[Style["P", Italic], {}, {}]] + 
             T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], 
                  {}, {}]], \[Sigma]] . tuDDown["\[PartialD]"][OverBar[
                 Tensor[Style["X", Italic], {}, {}]], \[Sigma]], \[Sigma]]/
          (2*Pi), Tensor[\[ScriptCapitalP], {}, {}] . 
         Tensor[\[ScriptCapitalJ], {}, {}] -> \[CapitalLambda] -> 
         (Tensor[p, {Void}, {"-"}]*Inactive[Integrate][
            OverBar[Tensor[Style["X", Italic], {}, {}]] . OverBar[Tensor[
                Style["P", Italic], {Void}, {"+"}]] - 
             OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] . 
              OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]])/(2*Pi)}[
      Style["Poincare invariants", RGBColor[0, 2/3, 0], 
       FontFamily -> "Helvetica"]]}
 
e[11] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Tensor[p, {Void}, {"-"}]*Inactive[Integrate][
         OverBar[Tensor[Style["X", Italic], {}, {}]] . 
          OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]], \[Sigma]])/
       (2*Pi) - (Tensor[p, {Void}, {"-"}]*Inactive[Integrate][
         OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] . 
          OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]])/(2*Pi)
 
e[12] = {{OverBar[Tensor[Style["P", Italic], {}, {}]] - 
        T*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
          \[Sigma]] -> Sqrt[2]*Sqrt[T]*xSum[E^(I*n*\[Sigma])*
          Tensor[\[Alpha], {Void}, {n}], {n, -Infinity, Infinity}], 
      OverBar[Tensor[Style["P", Italic], {}, {}]] + 
        T*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
          \[Sigma]] -> Sqrt[2]*Sqrt[T]*xSum[E^(I*n*\[Sigma])*
          Tensor[OverTilde[\[Alpha]], {Void}, {n}], {n, -Infinity, 
          Infinity}]}, {OverBar[Tensor[Style["P", Italic], {}, {}]] -> 
        (Sqrt[T]*xSum[E^(I*n*\[Sigma])*(Tensor[\[Alpha], {Void}, {n}] + 
             Tensor[OverTilde[\[Alpha]], {Void}, {n}]), {n, -Infinity, 
            Infinity}])/Sqrt[2]}[Style["note that this is also iP-p and can \
be accomodated if \
p\[Rule]\!\(\*SqrtBox[\(2/T\)]\)(\!\(\*SubscriptBox[\(\[Alpha]\), \
\(0\)]\)+\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(~\)], \(0\)]\)). ", 
       RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]], "\n", 
     tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
       \[Sigma]] -> xSum[(E^(I*n*\[Sigma])*(-Tensor[\[Alpha], {Void}, {n}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {n}]))/(Sqrt[2]*Sqrt[T]), 
       {n, -Infinity, Infinity}], 
     {OverBar[Tensor[Style["X", Italic], {}, {}]] -> 
        ((-I)*xSum[(E^(I*n*\[Sigma])*(-Tensor[\[Alpha], {Void}, {n}] + 
              Tensor[OverTilde[\[Alpha]], {Void}, {n}]))/n, 
           {n, -Infinity, Infinity}])/(Sqrt[2]*Sqrt[T])}[
      Style["note that this is the same as iX, since \
\!\(\*SubscriptBox[\(\[PartialD]\), \(\[Sigma]\)]\)[x]\[Rule]0. To avoid the \
\[Infinity]-value at n\[Rule]0 set ", RGBColor[0, 2/3, 0], 
       FontFamily -> "Helvetica"], Style[{Tensor[\[Alpha], {Void}, {0}] -> 0, 
        Tensor[OverTilde[\[Alpha]], {Void}, {0}] -> 0, xLimit[__] -> 0}, 
       RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]]}
 
e[13] = \[ScriptCapitalL] -> -Tensor[p, {Void}, {"+"}] + 
      xSum[(tuDDown["\[PartialD]"][Tensor[\[Alpha], {Void}, {n}], \[Tau]] . 
           Tensor[\[Alpha], {Void}, {-n}] + tuDDown["\[PartialD]"][
            Tensor[\[Alpha], {Void}, {n}], \[Tau]] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n}] - 
          tuDDown["\[PartialD]"][Tensor[OverTilde[\[Alpha]], {Void}, {n}], 
            \[Tau]] . Tensor[\[Alpha], {Void}, {-n}] - 
          tuDDown["\[PartialD]"][Tensor[OverTilde[\[Alpha]], {Void}, {n}], 
            \[Tau]] . Tensor[OverTilde[\[Alpha]], {Void}, {-n}] - 
          I*n*(Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, 
              {-n}] + Tensor[\[Alpha], {Void}, {n}] . 
             Tensor[OverTilde[\[Alpha]], {Void}, {-n}] - 
            Tensor[OverTilde[\[Alpha]], {Void}, {n}] . Tensor[\[Alpha], 
              {Void}, {-n}] - Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
             Tensor[OverTilde[\[Alpha]], {Void}, {-n}])*Tensor[u, {}, {}])/n, 
        {n, -Infinity, Infinity}]/2 + Tensor[p, {}, {}]*
       tuDDown["\[PartialD]"][Tensor[x, {}, {}], \[Tau]] + 
      Tensor[p, {Void}, {"-"}]*tuDDown["\[PartialD]"][Tensor[x, {"-"}, 
         {Void}], \[Tau]]
 
e[14] = \[ScriptCapitalM]^2 -> (-2*I)*T*
      xSum[Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, {n}] + 
        Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
         Tensor[OverTilde[\[Alpha]], {Void}, {n}], {n, 1, Infinity}]
 
e[16] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Sqrt[T]*(xSum[(Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], 
             {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}] + 
           Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], {Void}, {n1}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}] - 
           Tensor[\[Alpha], {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], 
             {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}])/n1, 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[\[Alpha], {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], 
             {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/
           n1), {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-((Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, 
              {n2}] . Tensor[\[Alpha], {Void}, {-n - n2}] + 
            Tensor[\[Alpha], {Void}, {n}] . Tensor[OverTilde[\[Alpha]], 
              {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], {Void}, 
              {-n - n2}] - Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
             Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], {Void}, 
              {-n - n2}])/n), {n, -Infinity, Infinity}, 
         {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n - n2}]/n, 
         {n, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . Tensor[\[Alpha], 
            {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}]/n1, 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . Tensor[\[Alpha], 
            {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/
          n1, {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . Tensor[\[Alpha], 
             {Void}, {-n1 - n2}]/n1), {n1, -Infinity, Infinity}, 
         {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/n1), 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}]))/(2*Sqrt[2])
 
e[19] = {CommutatorM[Tensor[x, {"-"}, {Void}], Tensor[p, {Void}, {"-"}]] -> 
      I, CommutatorM[x, p] -> I, CommutatorM[Tensor[\[Alpha], {Void}, {n}], 
       ConjugateTranspose[Tensor[\[Alpha], {Void}, {n}]]] -> n, 
     CommutatorM[Tensor[OverTilde[\[Alpha]], {Void}, {n}], 
       ConjugateTranspose[Tensor[OverTilde[\[Alpha]], {Void}, {n}]]] -> n}
 
e[20] = {{xSum[Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, 
           {n}], {n, 1, Infinity}] -> Style["N", Italic]}[
      Style["number operator of \[Alpha]'s", RGBColor[0, 2/3, 0], 
       FontFamily -> "Helvetica"]], 
     {xSum[Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
          Tensor[OverTilde[\[Alpha]], {Void}, {n}], {n, 1, Infinity}] -> 
        OverTilde[Style["N", Italic]]}[
      Style[
       "number operator of \!\(\*OverscriptBox[\(\[Alpha]\), \(~\)]\)'s", 
       RGBColor[0, 2/3, 0], FontFamily -> "Helvetica"]], 
     {OverTilde[Style["N", Italic]] -> Style["N", Italic]}[
      Style["level matching condition", RGBColor[0, 2/3, 0], 
       FontFamily -> "Helvetica"]]}
 
e[22] = {Tensor[\[ScriptCapitalJ], {}, {}] -> 
      H*\[Tau] + CommutatorP[Tensor[x, {"-"}, {Void}], Tensor[p, {Void}, 
          {"-"}]]/2, Tensor[\[ScriptCapitalJ], {"+"}, {Void}] -> 
      p*\[Tau] - x*Tensor[p, {Void}, {"-"}], 
     Tensor[\[ScriptCapitalJ], {"-"}, {Void}] -> -CommutatorP[x, H]/2 + 
       \[CapitalLambda]/Tensor[p, {Void}, {"-"}] - 
       p*Tensor[x, {"-"}, {Void}], 
     CommutatorM[Tensor[\[ScriptCapitalJ], {}, {}], Tensor[\[ScriptCapitalJ], 
        {"\[PlusMinus]"}, {Void}]] -> "\[PlusMinus]"[
       I*Tensor[\[ScriptCapitalJ], {"\[PlusMinus]"}, {Void}]], 
     CommutatorM[Tensor[\[ScriptCapitalJ], {"+"}, {Void}], 
       Tensor[\[ScriptCapitalJ], {"-"}, {Void}]] -> 
      I*Tensor[\[ScriptCapitalJ], {}, {}]}
 
e[1, 1] = \[ScriptCapitalL] -> 
     tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
        \[Tau]] . OverBar[Tensor[Style["P", Italic], {}, {}]] + 
      tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
        \[Tau]] . Tensor[p, {}, {}] + tuDDown["\[PartialD]"][
        OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]], \[Tau]] . 
       Tensor[p, {Void}, {"-"}] + tuDDown["\[PartialD]"][Tensor[x, {}, {}], 
        \[Tau]] . OverBar[Tensor[Style["P", Italic], {}, {}]] + 
      tuDDown["\[PartialD]"][Tensor[x, {}, {}], \[Tau]] . Tensor[p, {}, {}] + 
      tuDDown["\[PartialD]"][Tensor[x, {"-"}, {Void}], \[Tau]] . 
       Tensor[p, {Void}, {"-"}] + OverBar[Tensor[Style["P", Italic], {Void}, 
        {"+"}]] + Tensor[p, {Void}, {"+"}] - 
      tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] . OverBar[Tensor[Style["P", Italic], {}, {}]]*
       Tensor[u, {}, {}] - tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] . 
        Tensor[p, {}, {}]*Tensor[u, {}, {}] - 
      tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {"-"}, 
           {Void}]], \[Sigma]] . Tensor[p, {Void}, {"-"}]*Tensor[u, {}, {}] - 
      (OverBar[Tensor[Style["P", Italic], {}, {}]] . 
         OverBar[Tensor[Style["P", Italic], {}, {}]]*Tensor[\[ScriptL], {}, 
         {}])/2 - (OverBar[Tensor[Style["P", Italic], {}, {}]] . 
         Tensor[p, {}, {}]*Tensor[\[ScriptL], {}, {}])/2 - 
      (OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] . 
         Tensor[p, {Void}, {"-"}]*Tensor[\[ScriptL], {}, {}])/2 - 
      (Tensor[p, {}, {}] . OverBar[Tensor[Style["P", Italic], {}, {}]]*
        Tensor[\[ScriptL], {}, {}])/2 - 
      (Tensor[p, {}, {}] . Tensor[p, {}, {}]*Tensor[\[ScriptL], {}, {}])/2 - 
      (Tensor[p, {Void}, {"-"}] . OverBar[Tensor[Style["P", Italic], {Void}, 
           {"+"}]]*Tensor[\[ScriptL], {}, {}])/2 - 
      (Tensor[p, {Void}, {"-"}] . Tensor[p, {Void}, {"+"}]*
        Tensor[\[ScriptL], {}, {}])/2 - 
      (Tensor[p, {Void}, {"+"}] . Tensor[p, {Void}, {"-"}]*
        Tensor[\[ScriptL], {}, {}])/2 - 
      (T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, 
            {}]], \[Sigma]] . tuDDown["\[PartialD]"][
          OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]]*
        Tensor[\[ScriptL], {}, {}])/2
 
e[1, 2] = {OverBar[Tensor[Style["P", Italic], {}, {}]]*Tensor[\[ScriptL], {}, 
         {}] + Tensor[p, {}, {}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] - 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
        \[Tau]] - tuDDown["\[PartialD]"][Tensor[x, {}, {}], \[Tau]] -> 0, 
     -1 + Tensor[p, {Void}, {"-"}]*Tensor[\[ScriptL], {}, {}] -> 0, 
     Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]] - 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["P", Italic], {}, {}]], 
        \[Tau]] + OverBar[Tensor[Style["P", Italic], {}, {}]]*
        tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] + 
       Tensor[p, {}, {}]*tuDDown["\[PartialD]"][Tensor[u, {}, {}], 
         \[Sigma]] + T^2*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]]*
        tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] + 
       T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
          \[Sigma]], \[Sigma]] -> 0, Tensor[p, {Void}, {"-"}]*
       tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] . OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] . Tensor[p, {}, {}] + tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]], \[Sigma]] . 
        Tensor[p, {Void}, {"-"}] -> 0, 
     OverBar[Tensor[Style["P", Italic], {}, {}]] . 
        OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       OverBar[Tensor[Style["P", Italic], {}, {}]] . Tensor[p, {}, {}] + 
       OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] . 
        Tensor[p, {Void}, {"-"}] + Tensor[p, {}, {}] . 
        OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       Tensor[p, {}, {}] . Tensor[p, {}, {}] + Tensor[p, {Void}, {"-"}] . 
        OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[p, {Void}, {"-"}] . Tensor[p, {Void}, {"+"}] + 
       Tensor[p, {Void}, {"+"}] . Tensor[p, {Void}, {"-"}] + 
       T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, 
            {}]], \[Sigma]] . tuDDown["\[PartialD]"][
          OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] -> 0}
 
e[3, 1] = {Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      (-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      (-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      (Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2]}
 
e[3, 2] = {Tensor[X, {0}, {Void}] -> 
      -(Tensor[Style["X", Italic], {"-"}, {Void}]/Sqrt[2]) + 
       Tensor[Style["X", Italic], {"+"}, {Void}]/Sqrt[2], 
     Tensor[X, {1}, {Void}] -> (Sqrt[2]*Tensor[Style["X", Italic], {"-"}, 
          {Void}] + Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}])/2, 
     Tensor[P, {Void}, {0}] -> -(Tensor[Style["P", Italic], {Void}, {"-"}]/
         Sqrt[2]) + Tensor[Style["P", Italic], {Void}, {"+"}]/Sqrt[2], 
     Tensor[P, {Void}, {1}] -> (Sqrt[2]*Tensor[Style["P", Italic], {Void}, 
          {"-"}] + Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}])/2}
 
e[4, 1] = {Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      (-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      (-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      (Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     Tensor[X, {0}, {Void}] -> (-Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
     Tensor[X, {1}, {Void}] -> (Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
     Tensor[P, {Void}, {0}] -> (-Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
     Tensor[P, {Void}, {1}] -> (Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
     Tensor[X, {2}, {Void}] -> Tensor[Style["X", Italic], {}, {}], 
     Tensor[P, {Void}, {2}] -> Tensor[Style["P", Italic], {}, {}], 
     Tensor[Style["X", Italic], {Void}, {"-"}] -> Tensor[Style["X", Italic], 
       {"+"}, {Void}], Tensor[Style["X", Italic], {Void}, {"+"}] -> 
      Tensor[Style["X", Italic], {"-"}, {Void}], Tensor[x, {}, {}] -> 
      Inactive[Integrate][Tensor[Style["X", Italic], {}, {}], \[Sigma]]/
       (2*Pi), Tensor[p, {}, {}] -> Inactive[Integrate][
        Tensor[Style["P", Italic], {}, {}], \[Sigma]]/(2*Pi), 
     Tensor[x, {"-"}, {Void}] -> Inactive[Integrate][
        Tensor[Style["X", Italic], {"-"}, {Void}], \[Sigma]]/(2*Pi), 
     Tensor[p, {Void}, {"+"}] -> Inactive[Integrate][
        Tensor[Style["P", Italic], {Void}, {"+"}], \[Sigma]]/(2*Pi), 
     OverBar[Tensor[Style["X", Italic], {}, {}]] -> -Tensor[x, {}, {}] + 
       Tensor[Style["X", Italic], {}, {}], 
     OverBar[Tensor[Style["P", Italic], {}, {}]] -> -Tensor[p, {}, {}] + 
       Tensor[Style["P", Italic], {}, {}], 
     OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] -> 
      -Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, {Void}], 
     OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] -> 
      -Tensor[p, {Void}, {"+"}] + Tensor[Style["P", Italic], {Void}, {"+"}], 
     Tensor[Style["X", Italic], {}, {}] -> 
      OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}], 
     Tensor[Style["P", Italic], {}, {}] -> 
      OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}], 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
       Tensor[x, {"-"}, {Void}], Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[p, {Void}, {"+"}], Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      \[Tau], Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      Tensor[p, {Void}, {"-"}], Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
         tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
       (2*Tensor[p, {Void}, {"-"}]), tuDDown["\[PartialD]"][
       Tensor[u, {}, {}], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]] -> 0, 
     Inactive[Integrate][OverBar[a_], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][\[Tau], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][\[Sigma], \[Tau]] -> 0}
 
e[8, 0] = Inactive[Integrate][\[ScriptCapitalL], \[Sigma]]/(2*Pi) -> 
     -H + tuDDown["\[PartialD]"][Tensor[x, {}, {}], \[Tau]] . 
       Tensor[p, {}, {}] - (Tensor[u, {}, {}]*Inactive[Integrate][
         tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
           \[Sigma]] . OverBar[Tensor[Style["P", Italic], {}, {}]], 
         \[Sigma]])/(2*Pi) + Inactive[Integrate][
        tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
          \[Tau]] . OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]]/
       (2*Pi) + Tensor[p, {Void}, {"-"}]*tuDDown["\[PartialD]"][
        Tensor[x, {"-"}, {Void}], \[Tau]]
 
e[11, 1] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Sqrt[T]*(xSum[(Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], 
             {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}] + 
           Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], {Void}, {n1}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}] - 
           Tensor[\[Alpha], {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], 
             {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}])/n1, 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[\[Alpha], {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], 
             {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/
           n1), {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-((Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, 
              {n2}] . Tensor[\[Alpha], {Void}, {-n - n2}] + 
            Tensor[\[Alpha], {Void}, {n}] . Tensor[OverTilde[\[Alpha]], 
              {Void}, {n2}] . Tensor[OverTilde[\[Alpha]], {Void}, 
              {-n - n2}] - Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
             Tensor[\[Alpha], {Void}, {n2}] . Tensor[\[Alpha], {Void}, 
              {-n - n2}])/n), {n, -Infinity, Infinity}, 
         {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n - n2}]/n, 
         {n, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . Tensor[\[Alpha], 
            {Void}, {n1}] . Tensor[\[Alpha], {Void}, {-n1 - n2}]/n1, 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . Tensor[\[Alpha], 
            {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/
          n1, {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . Tensor[\[Alpha], 
             {Void}, {-n1 - n2}]/n1), {n1, -Infinity, Infinity}, 
         {n2, -Infinity, Infinity}] + 
        xSum[-(Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . 
            Tensor[OverTilde[\[Alpha]], {Void}, {-n1 - n2}]/n1), 
         {n1, -Infinity, Infinity}, {n2, -Infinity, Infinity}]))/(2*Sqrt[2])
 
e[14, 1] = \[ScriptCapitalM]^2 -> (-2*I)*T*
      (xSum[Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, {n}], 
        {n, 1, Infinity}] + xSum[Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
         Tensor[OverTilde[\[Alpha]], {Void}, {n}], {n, 1, Infinity}])
 
e[14, 2] = {\[ScriptCapitalM]^2 -> (-2*I)*T*(OverTilde[Style["N", Italic]] + 
        Style["N", Italic]), \[ScriptCapitalM]^2 -> 
      (-4*I)*T*Style["N", Italic]}
 
e[16, 0] = {\[CapitalLambda] -> Sqrt[2]*Sqrt[T]*(\[Lambda] + 
        OverTilde[\[Lambda]]), OverTilde[\[Lambda]] -> 
      I*xSum[(-(Conjugate[Tensor[OverTilde[\[Beta]], {Void}, {n}]]*
            Tensor[OverTilde[\[Alpha]], {Void}, {n}]) + 
          Conjugate[Tensor[OverTilde[\[Alpha]], {Void}, {n}]]*
           Tensor[OverTilde[\[Beta]], {Void}, {n}])/n, {n, Infinity}], 
     \[Lambda] -> I*xSum[(-(Conjugate[Tensor[\[Beta], {Void}, {n}]]*
            Tensor[\[Alpha], {Void}, {n}]) + 
          Conjugate[Tensor[\[Alpha], {Void}, {n}]]*Tensor[\[Beta], {Void}, 
            {n}])/n, {n, Infinity}], Tensor[OverTilde[\[Beta]], {Void}, 
       {n}] -> xSum[Conjugate[Tensor[OverTilde[\[Alpha]], {Void}, {-m + n}]]*
         Tensor[OverTilde[\[Alpha]], {Void}, {m}], {n > m}] + 
       xSum[Tensor[OverTilde[\[Alpha]], {Void}, {m}]*
          Tensor[OverTilde[\[Alpha]], {Void}, {-m + n}], {m, 1, -1 + n}]/2, 
     Tensor[\[Beta], {Void}, {n}] -> 
      xSum[Conjugate[Tensor[\[Alpha], {Void}, {-m + n}]]*
         Tensor[\[Alpha], {Void}, {m}], {n > m}] + 
       xSum[Tensor[\[Alpha], {Void}, {m}]*Tensor[\[Alpha], {Void}, {-m + n}], 
         {m, 1, -1 + n}]/2}
 
e[16, 1] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Sqrt[T]*xSum[(-Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], 
             {Void}, {n - n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n1}] + 
          Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, {-n1}] . 
           Tensor[\[Alpha], {Void}, {n + n1}] - Tensor[\[Alpha], {Void}, 
            {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {n - n1}] . 
           Tensor[\[Alpha], {Void}, {n1}] + Tensor[\[Alpha], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] - 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n}] . Tensor[\[Alpha], {Void}, {n1}] + 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n}] + 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {n}] . Tensor[\[Alpha], {Void}, {n1}] + 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n}] - 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[\[Alpha], {Void}, {-n}] . 
           Tensor[\[Alpha], {Void}, {n + n1}] - Tensor[\[Alpha], {Void}, 
            {-n1}] . Tensor[\[Alpha], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] + 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n}] . Tensor[\[Alpha], {Void}, {n + n1}] + 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] + 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n + n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n + n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . Tensor[\[Alpha], 
            {Void}, {n - n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n1}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . Tensor[\[Alpha], 
            {Void}, {-n1}] . Tensor[\[Alpha], {Void}, {n + n1}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n - n1}] . 
           Tensor[\[Alpha], {Void}, {n1}] - Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[\[Alpha], {Void}, {n}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {n1}] + Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[\[Alpha], {Void}, {n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[\[Alpha], {Void}, {n1}] . Tensor[OverTilde[\[Alpha]], 
            {Void}, {n}] + Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . Tensor[\[Alpha], 
            {Void}, {n}] - Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . Tensor[\[Alpha], 
            {Void}, {-n}] . Tensor[\[Alpha], {Void}, {n + n1}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . Tensor[\[Alpha], 
            {Void}, {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . Tensor[\[Alpha], 
            {Void}, {-n + n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . Tensor[\[Alpha], 
            {Void}, {-n + n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . Tensor[\[Alpha], 
            {Void}, {n + n1}] + Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}])/n, 
        {n1, 1, Infinity}, {n, 1, Infinity}])/(2*Sqrt[2])
 
e[16, 2] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Sqrt[T]*(xSum[Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, 
            {-n1}] . Tensor[\[Alpha], {Void}, {n + n1}]/n, {n1, 1, Infinity}, 
         {n, 1, Infinity}] - xSum[Tensor[\[Alpha], {Void}, {-n - n1}] . 
           Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, {n1}]/n, 
         {n1, 1, Infinity}, {n, 1, Infinity}] + 
        xSum[Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n1}] . Tensor[\[Alpha], {Void}, {n}]/n, {n1, 1, Infinity}, 
         {n, 1, Infinity}] - xSum[Tensor[\[Alpha], {Void}, {-n1}] . 
           Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, 
            {n + n1}]/n, {n1, 1, Infinity}, {n, 1, Infinity}] - 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}]/n, 
         {n1, 1, Infinity}, {n, 1, Infinity}] + 
        xSum[Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}]/n, {n1, 1, Infinity}, 
         {n, 1, Infinity}] - xSum[Tensor[OverTilde[\[Alpha]], {Void}, 
            {-n - n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}]/n, {n1, 1, Infinity}, 
         {n, 1, Infinity}] + xSum[Tensor[OverTilde[\[Alpha]], {Void}, 
            {-n1}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}]/n, 
         {n1, 1, Infinity}, {n, 1, Infinity}]))/(2*Sqrt[2])
 
e[16, 3] = Tensor[\[ScriptCapitalP], {Void}, {\[Mu]}] . 
      Tensor[\[ScriptCapitalJ], {\[Mu]}, {Void}] -> 
     (Sqrt[T]*xSum[(Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, 
            {-n1}] . Tensor[\[Alpha], {Void}, {n + n1}] - 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n}] . Tensor[\[Alpha], {Void}, {n1}] + 
          Tensor[\[Alpha], {Void}, {-n - n1}] . Tensor[\[Alpha], {Void}, 
            {n1}] . Tensor[\[Alpha], {Void}, {n}] - 
          Tensor[\[Alpha], {Void}, {-n1}] . Tensor[\[Alpha], {Void}, {-n}] . 
           Tensor[\[Alpha], {Void}, {n + n1}] - Tensor[OverTilde[\[Alpha]], 
            {Void}, {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}] - 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n - n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {-n1}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {-n}] . 
           Tensor[OverTilde[\[Alpha]], {Void}, {n + n1}])/n, 
        {n1, 1, Infinity}, {n, 1, Infinity}])/(2*Sqrt[2])
 
e[1, 2, 2] = xSum[Tensor[\[Alpha], {Void}, {-n}] . Tensor[\[Alpha], {Void}, 
         {n}], {n, 1, Infinity}] - xSum[Tensor[OverTilde[\[Alpha]], {Void}, 
         {-n}] . Tensor[OverTilde[\[Alpha]], {Void}, {n}], 
       {n, 1, Infinity}] -> 0
 
T[A_, uds_String][index0__] := Module[{tmp, ud = Characters[uds], 
      index = {index0}}, If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
T[A_, up_List, down_List] := Module[{tmp, u = up /. Null -> Void, 
      d = down /. Null -> Void, return}, 
     If[up == {} && down == {}, Return[Tensor[A, up, down]]]; 
      If[up == {}, u = Table[Void, {Length[d]}]]; 
      If[down == {}, d = Table[Void, {Length[u]}]]; 
      If[Length[d] == Length[u] &&  !Inner[(#1 =!= Void && #2 =!= Void) || 
            (#1 === Void && #2 === Void) & , u, d, Or], Tensor[A, u, d], 
       Style[Tensor[A, up, down], FontColor -> Red]]]
 
T[A_, uds_String, index_List] := Module[{tmp, ud = Characters[uds]}, 
     If[Cases[ud, Except["u" | "d"]] === {} && 
       (tmp = Which[Head[index] === List && Length[ud] == Length[index], 
          Tensor[A, MapThread[If[#1 === "u", #2, Void] & , {ud, index}], 
           MapThread[If[#1 === "d", #2, Void] & , {ud, index}]], 
          ud === {"u"}, Tensor[A, {index}, {Void}], ud === {"d"}, 
          Tensor[A, {Void}, {index}], True, -1]) =!= -1, tmp, 
      Style[Tensor[A, uds, index], FontColor -> Red]]]
 
T /: T::usage = "T[A_,uds_String][index0__] produces any Tensor where \
uds_String specifies up/down position of index_, \
e.g.,T[Symbol,\"udd\"][i,j,k]->((\!\(\*SuperscriptBox[\(Symbol\), \
\(i\)]\)\!\(\*SubscriptBox[\()\), \(jk\)]\))"
 
Attributes[ee$] = {Temporary}
 
Attributes[error$] = {Temporary}
 
evalDifferentialOps[opdef_][exp_] := Module[{$ = exp, op}, 
     $ = $ /. dd:xDot[a__] :> Fold[op, arg, Reverse[dd]]; 
      op[a_, b_] := b /. opdef[a]; $]
 
$ = {Tensor[\[ScriptCapitalJ], {}, {}] -> H*\[Tau] + 
       CommutatorP[Tensor[x, {"-"}, {Void}], Tensor[p, {Void}, {"-"}]]/2, 
     Tensor[\[ScriptCapitalJ], {"+"}, {Void}] -> 
      p*\[Tau] - x*Tensor[p, {Void}, {"-"}], 
     Tensor[\[ScriptCapitalJ], {"-"}, {Void}] -> -CommutatorP[x, H]/2 + 
       \[CapitalLambda]/Tensor[p, {Void}, {"-"}] - 
       p*Tensor[x, {"-"}, {Void}], 
     CommutatorM[Tensor[\[ScriptCapitalJ], {}, {}], Tensor[\[ScriptCapitalJ], 
        {"\[PlusMinus]"}, {Void}]] -> "\[PlusMinus]"[
       I*Tensor[\[ScriptCapitalJ], {"\[PlusMinus]"}, {Void}]], 
     CommutatorM[Tensor[\[ScriptCapitalJ], {"+"}, {Void}], 
       Tensor[\[ScriptCapitalJ], {"-"}, {Void}]] -> 
      I*Tensor[\[ScriptCapitalJ], {}, {}]}
 
Attributes[xDot] = {Flat, OneIdentity}
 
evalOp[n1_Integer, n2_Integer, n3_Integer][n_Integer] := 
    Module[{nc = n}, If[Inequality[1, LessEqual, n3, Less, n], nc = nc - n3, 
       Return[0]]; If[nc = nc - n2; nc <= 1, Return[0]]; 
      If[nc - n1 != n, Return[0]]; Return[1]; ]
 
Attributes[exp0$] = {Temporary}
 
Attributes[exp1$] = {Temporary}
 
expand2CT[ispace_Integer, ones_][exp_] := 
    Module[{$scal, $ = exp, $1, $2 = {}, $4 = {}, $1s = ones}, 
     $ = If[Length[$] < 2, xDot[$], $]; xPrint["exp: ", $]; 
      $scal = tuExtractPattern[scal[_]][$]; xPrint["$scal: ", $scal]; 
      $scal = Times @@ $scal /. scal[a_] -> a; If[$scal =!= 1, 
       AppendTo[$2, $scal]]; $ = Select[List @@ $,  !MatchQ[#1, scal[_]] & ]; 
      While[Length[$] > 0, {$1, $} = {$[[1]], $[[2 ;; All]]}; 
        If[tuMemberQ[$1, {X[_]}], If[Length[$4] > 0, 
           AppendTo[$2, xDot @@ $4]; $4 = {}]; AppendTo[$2, $1], 
         AppendTo[$4, $1]]]; If[Length[$4] > 0, AppendTo[$2, xDot @@ $4]]; 
      $ = (ReplacePart[$1s, ispace -> #1] & ) /@ $2 /. X[a__] -> a /. toDot; 
      Dot @@ $]
 
tuExtractPattern[pattern_, maxlevel_:Infinity][exp_] := 
    Module[{pos}, pos = Position[exp, pattern, {0, maxlevel}]; 
      Extract[exp, pos]]
 
tuExtractPattern /: tuExtractPattern::usage = "tuExtractPattern[pattern_,maxl\
evel_:Infinity][exp_] extracts a List of items in exp_ that match pattern_ to \
maxlevel_. *3Feb2014* "
 
tuMemberQ[patterns_][variable_] := tuMemberQ[variable, patterns]
 
tuMemberQ[variable_, patterns_] := 
    Or @@ (MemberQ[Flatten[{variable}], #1] & ) /@ Flatten[{patterns}]
 
tuMemberQ /: tuMemberQ::usage = "tuMemberQ[variable_,patterns_] True if any \
variable_ (may be List[]) matches any in patterns_ (may be List). Equivalent \
form: tuMemberQ[patterns_][variable_] *16May2015*"
 
toDot := dotOps -> Dot
 
dotOps := Dot | xDot | CenterDot | Inactive[Dot]
 
Attributes[CenterDot] = {Flat, OneIdentity}
 
expandCom[subs_:{}][exp_] := Block[{tmp = exp}, 
     tmp = expandDot[subs][tmp //. tuCommutatorExpand]; tmp = tmp /. toxDot; 
      tmp = expandDot[toDot][tuMatrixOrderedMultiply[tmp]]; tmp]
 
expandCom /: expandCom::usage = 
     "expandCom[subs_:{}][exp_] expands Commutator expressions *22Mar2019*"
 
expandDot[sub_:{}, scalar_:{}, func_:{}, iterate_:20][exp_] := 
    tuRepeat[{sub, tuOpDistribute[dotOps], tuOpSimplify[dotOps, scalar]}, 
      {func}, iterate][exp]
 
expandDot /: expandDot::usage = "expandDot[sub_:{},scalar_:{},func_:{},iterat\
e_:20] functional definition equivalent to \
tuRepeat[{sub,tuOpDistribute[dotOps],tuOpSimplify[dotOps,scalar]},{func},iter\
ate]. This definition serves as an example of how to collect several repeated \
operations into one statement.  *22Mar2019*"
 
tuRepeat[rules_List:{}, operations_:{}, nInterate_:100][exp_] := 
    Module[{$IterationLimit = 20, xrule, xop, tmp = exp, tmp0, icnt = 0}, 
     xrule = tuRule[{rules}]; xop = Flatten[{operations}]; 
      xPrint[xrule, xop, $IterationLimit]; While[tmp0 =!= tmp, 
       tmp0 = tmp; xPrint[icnt, tmp]; icnt++; xPrint[xop]; 
        If[xop =!= {}, tmp = (Composition[Sequence @@ xop])[tmp]]; 
        If[xrule =!= {}, tmp = Fold[#1 //. Sequence[#2, MaxIterations -> 
               nInterate] & , tmp, xrule]]; xPrint[operation =!= Null]; 
        If[icnt >= nInterate, Return[tmp]]; xPrint[$IterationLimit]; ]; tmp]
 
tuRepeat /: tuRepeat::usage = "tuRepeat[rules_List:{},operations_:{},nInterat\
e_:100][exp_] applies rules_List and operations_ (may be List) repeatedly \
until exp_ does not change. nInterate_ sets MaxInterations in ReplaceRepeated \
and While[] loop. *22Feb2016*"
 
$IterationLimit = 4096
 
tuRule[rules_, negativePower_:False, simplerArg_:True] := 
    Module[{$ = rules, rr$}, $ = Flatten[$]; 
      $ = $ //. (head_)[CR[__] | CG[__] | CO[__] | CP[__] | CB[__]] -> head; 
      $ = tuExtractPattern[(Rule[__]) | (RuleDelayed[__])][$]; 
      If[simplerArg, $ = $ /. (rr:Rule | RuleDelayed)[-(a_), b_] -> 
           rr[a, -b]; ]; If[negativePower, 
       $ = {$, tuRulePositiveNegativePower[$], 
         $ /. (rr:Rule | RuleDelayed)[a_, b_] -> rr[1/a, 1/b]}]; 
      $ = Flatten[DeleteCases[(Rule | RuleDelayed)[a_, a_]][$]]; 
      $ = Flatten[DeleteCases[FontFamily -> a_][$]]; DeleteDuplicates[$]]
 
tuRule /: tuRule::usage = "tuRule[rules_,negativePower_:False,simplerArg_:Tru\
e] produces a List of valid Rule[]s from rules_ and forms a Flatten[]d list \
of Rules. Deletes imbedded comments in the form of head_[CG[__]] and other \
non-Rule forms. If  If negativePower_\[Rule]True then negative Power of \
Rule[]s are generated.  If simplerArg_\[Rule]True then Rules are transformed \
from -a\[Rule]b \[Rule] a\[Rule]-b and \!\(\*SuperscriptBox[\(a\), \
\(2\)]\)->b \[Implies] a\[Rule]Sqrt[b] . *7Aug2015*1Feb2018*"
 
Attributes[rr$] = {Temporary}
 
CR[a__] := style[Red, a]
 
style[color_, exp__] := Module[{tmp = {exp}}, 
     tmp = Thread[Style[tmp, color, FontFamily -> "Helvetica"]]; 
      Sequence @@ tmp]
 
CG[a__] := style[Darker[Green], a]
 
CO[a__] := style[Orange, a]
 
CP[a__] := style[Darker[Pink], a]
 
CB[a__] := style[Blue, a]
 
tuRulePositiveNegativePower[rules_] := Module[{$ = rules, rr$}, 
     $ = $ /. (rr:Rule | RuleDelayed)[(a_)^(b_), c_] :> 
        (rr$[a^(-b), c^(-1)] /. rr$ -> rr)]
 
tuRulePositiveNegativePower /: tuRulePositiveNegativePower::usage = "tuRulePo\
sitiveNegativePower[rules_] produces inverse Power in Rule[]s that include \
Power[] in first arguement.  Mathematica does not recognize inversed Power \
terms in pattern matching.  *2Feb2018*"
 
tuOpDistribute[op_, over_:Plus] := 
    {oo:(op /. Dot -> dotOps)[a1___, over[a_, ap__], a2___] :> 
      Distribute[ExpandAll[oo], over]}
 
tuOpDistribute /: tuOpDistribute::usage = "tuOpDistribute[op_,over_:Plus] \
Rule for distributing op_ over over_. \
EG.\na.(b-c).d/.tuOpDistribute[dotOps]->a.b.d+a.(-c).d. Works with op_s of \
form  CommutatorM[arg__\!\(\*SubscriptBox[\(]\), \(\[Rho]\)]\) as well.  \
*21May2015*23Jun2017*"
 
tuOpSimplify[operator_, scalars_List:{}] := 
    Flatten[{(op:operator)[a_] :> a /; MatchQ[op, dotOps], 
      (op:operator)[a_] -> a, (op:operator)[] -> 1, 
      (op:operator)[Longest[a___], (cc:(c_)^(n_:1))*(d_), Longest[e___]] :> 
       cc*op[a, d, e] /; (NumericQ[c] || tuMemberQ[c, scalars]) && 
         (NumericQ[n] || tuMemberQ[n, scalars]), 
      (op:operator)[Longest[a___], cc:(c_)^(n_:1), Longest[d___]] :> 
       cc*op[a, d] /; (NumericQ[c] || tuMemberQ[c, scalars]) && 
         (NumericQ[n] || tuMemberQ[n, scalars]), 
      Conjugate[(op:operator)[a__]] :> op @@ Thread[Conjugate[{a}]]}]
 
tuOpSimplify /: tuOpSimplify::usage = "tuOpSimplify[operator_,scalars_List:{}\
] Rule for simplifying operator[] expressions by removing NumericQ and \
scalars_ from its arguements. NOTE: Some of these Rule[]s do not seem active \
for some expressions. BUG: Does not catch some scalars_. \
*26Sep2015**21Mar2018**12Mar2019*"
 
cc[a_] := Conjugate[a]
 
tuCommutatorExpand := {CommutatorP -> ACommutator, CommutatorM -> MCommutator}
 
tuCommutatorExpand /: tuCommutatorExpand::usage = "tuCommutatorExpand is \
Rule[] to replace Commutator expression into Dot[]d notation. *21Mar2016*"
 
ACommutator[A_, B_] := tuCommutator[Dot, 1][A, B]
 
tuCommutator[op_:Dot, sign_:-1][A_, B_] := op[A, B] + sign*op[B, A]
 
tuCommutator /: tuCommutator::usage = "tuCommutator[op_:Dot,sign_:-1][A_,B_] \
expands the commutator of matrices A and B using op_ as multiplicative \
operator. *17Feb2016*"
 
MCommutator[A_, B_] := tuCommutator[Dot][A, B]
 
toxDot := dotOps -> xDot
 
tuMatrixOrderedMultiply[exp_] := Module[{tmp, A$, head, pos, $p, i, $n, $}, 
     pos = tuExtractPositionPattern[dotOps][exp]; xPrint[">>", pos]; 
      pos = tuPositionNestDelete[pos]; xPrint[">>", pos]; 
      Do[$p = pos[[i,1]]; xPrint[$p, "<<"]; $p = If[$p[[-1]] == 0, 
          Delete[$p, -1]]; $ = exp[[Sequence @@ $p]]; xPrint["===", $]; 
        pos[[i,1]] = $p; If[MatchQ[head = Head[$], dotOps], 
         tmp = MapIndexed[Map[A$[#2], #1, {2}] & , $]; 
          tmp = tmp /. head -> Dot; tmp = tmp /. Times -> head; 
          tmp = tmp /. A$[_][a_] -> a]; pos[[i,2]] = tmp, {i, Length[pos]}]; 
      tuReplacePart[exp, pos]]
 
tuMatrixOrderedMultiply /: tuMatrixOrderedMultiply::usage = "tuMatrixOrderedM\
ultiply[exp_] evaluates top Level matrix expressions (Head->dotOps) using Dot \
for actual matrix multiply but maintaining order of elements from each \
matrix.  The matrix inputs must have the same proper form and sizes. This \
routine is useful when matrix elements are noncommuting matrices. \
*18Feb2016*"
 
Attributes[A$] = {Temporary}
 
tuExtractPositionPattern[pattern_, maxlevel_:Infinity][exp_] := 
    Module[{xpattern = pattern, pos, list, tmp, xList}, 
     If[Head[xpattern] == List, xpattern = Alternatives @@ xpattern; 
        xPrint[xHead[xpattern]]]; pos = Position[exp, xpattern, 
        {0, maxlevel}, Heads -> True]; list = Extract[exp, pos]; 
      tmp = Thread[pos -> list]; xPrint["X ", tmp, ", ", xpattern, ", ", 
       list, ", ", pos]; tmp]
 
tuExtractPositionPattern /: tuExtractPositionPattern::usage = "tuExtractPosit\
ionPattern[pattern_,maxlevel_:Infinity][exp_] extracts a List of \
{Positions,items} that match pattern_ in exp_ up to Level maxlevel_.  Returns \
a List[ pos1->match1,pos2->match2,... ]. pattern_ may be a List or \
Alternatives. *3Nov2016*)"
 
tuPositionNestDelete[position_List] := Module[{$ = position, $p, dup, $n, $t, 
      i}, $p = $ = (#1 & ) /@ Sort[$]; xPrint[$p]; If[$p[[1,1]] == {}, 
       Return[{$p[[1]]}]]; Do[$t = $p[[i,1]]; $n = FirstPosition[$t, 0][[1]]; 
        $p[[i,1]] = $t[[1 ;; If[NumericQ[$n], $n - 1, -1]]], 
       {i, Length[$p]}]; Do[If[MemberQ[SequencePosition[$p[[$j,1]], 
          $p[[$i,1]]], {1, ___}], $[[$j]] = dup[$i, $[[$j]]]], 
       {$i, Length[$] - 1}, {$j, $i + 1, Length[$]}]; DeleteCases[$, dup[__]]]
 
tuPositionNestDelete /: tuPositionNestDelete::usage = "tuPositionNestDelete[p\
osition_List] reduces the result of Position\[Rule] position_List so that \
there is only top level positions. E.G. \
{{1,2}\[Rule]a,{1}\[Rule]r[a]}\[Rule]{{1}->r[a]}. If pointer to whole \
expression {} exists then that alone is returned.  *11Feb2017*"
 
tuReplacePart[exp_, pos_List] := Module[{$}, 
     If[Length[$ = Cases[pos, ({} -> _) | ({} :> _)]] > 0, $[[1,2]], 
      ReplacePart[exp, pos]]]
 
tuReplacePart /: tuReplacePart::usage = "tuReplacePart[exp_,pos_List] like \
ReplacePart[] except replaces whole exp_ when pos contains {{}->replacement} \
in which case ReplacePart does nothing. *5Sep2015*"
 
expandDC[sub_:{}, scalar_:{}, func_:{}, iterate_:20] := 
    expandDot[sub, scalar, func, iterate]
 
Attributes[exp$] = {Temporary}
 
Attributes[eyd$] = {Temporary}
 
Attributes[e$] = {Temporary}
 
$0 = {OverBar[Tensor[Style["P", Italic], {}, {}]] - 
       T*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] -> Sqrt[2]*Sqrt[T]*xSum[E^(I*n*\[Sigma])*
         Tensor[\[Alpha], {Void}, {n}], {n, -Infinity, Infinity}], 
     OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       T*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] -> Sqrt[2]*Sqrt[T]*xSum[E^(I*n*\[Sigma])*
         Tensor[OverTilde[\[Alpha]], {Void}, {n}], {n, -Infinity, Infinity}]}
 
$10 = (Sqrt[T]*Inactive[Plus][-evalOp[-21, 1, 20][nn], 
       evalOp[-21, 20, 1][nn], -evalOp[-20, -1, 21][nn], 
       -evalOp[-20, 1, 19][nn], evalOp[-20, 19, 1][nn], 
       Inactive[Plus][evalOp[-39, 19, 20][nn], -evalOp[-39, 20, 19][nn], 
         evalOp[-20, -19, 39][nn], -evalOp[-19, -20, 39][nn]]/20, 
       Inactive[Plus][-evalOp[-39, 19, 20][nn], evalOp[-39, 20, 19][nn], 
         -evalOp[-20, -19, 39][nn], evalOp[-19, -20, 39][nn]]/19, 
       -evalOp[-19, -1, 20][nn], -evalOp[-19, 1, 18][nn], 
       evalOp[-19, 18, 1][nn], Inactive[Plus][evalOp[-38, 18, 20][nn], 
         -evalOp[-38, 20, 18][nn], evalOp[-20, -18, 38][nn], 
         -evalOp[-18, -20, 38][nn]]/20, 
       Inactive[Plus][-evalOp[-38, 18, 20][nn], evalOp[-38, 20, 18][nn], 
         -evalOp[-20, -18, 38][nn], evalOp[-18, -20, 38][nn]]/18, 
       Inactive[Plus][evalOp[-37, 18, 19][nn], -evalOp[-37, 19, 18][nn], 
         evalOp[-19, -18, 37][nn], -evalOp[-18, -19, 37][nn]]/19, 
       Inactive[Plus][-evalOp[-37, 18, 19][nn], evalOp[-37, 19, 18][nn], 
         -evalOp[-19, -18, 37][nn], evalOp[-18, -19, 37][nn]]/18, 
       -evalOp[-18, -1, 19][nn], -evalOp[-18, 1, 17][nn], 
       evalOp[-18, 17, 1][nn], Inactive[Plus][evalOp[-37, 17, 20][nn], 
         -evalOp[-37, 20, 17][nn], evalOp[-20, -17, 37][nn], 
         -evalOp[-17, -20, 37][nn]]/20, 
       Inactive[Plus][-evalOp[-37, 17, 20][nn], evalOp[-37, 20, 17][nn], 
         -evalOp[-20, -17, 37][nn], evalOp[-17, -20, 37][nn]]/17, 
       Inactive[Plus][evalOp[-36, 17, 19][nn], -evalOp[-36, 19, 17][nn], 
         evalOp[-19, -17, 36][nn], -evalOp[-17, -19, 36][nn]]/19, 
       Inactive[Plus][-evalOp[-36, 17, 19][nn], evalOp[-36, 19, 17][nn], 
         -evalOp[-19, -17, 36][nn], evalOp[-17, -19, 36][nn]]/17, 
       Inactive[Plus][evalOp[-35, 17, 18][nn], -evalOp[-35, 18, 17][nn], 
         evalOp[-18, -17, 35][nn], -evalOp[-17, -18, 35][nn]]/18, 
       Inactive[Plus][-evalOp[-35, 17, 18][nn], evalOp[-35, 18, 17][nn], 
         -evalOp[-18, -17, 35][nn], evalOp[-17, -18, 35][nn]]/17, 
       -evalOp[-17, -1, 18][nn], -evalOp[-17, 1, 16][nn], 
       evalOp[-17, 16, 1][nn], Inactive[Plus][evalOp[-36, 16, 20][nn], 
         -evalOp[-36, 20, 16][nn], evalOp[-20, -16, 36][nn], 
         -evalOp[-16, -20, 36][nn]]/20, 
       Inactive[Plus][-evalOp[-36, 16, 20][nn], evalOp[-36, 20, 16][nn], 
         -evalOp[-20, -16, 36][nn], evalOp[-16, -20, 36][nn]]/16, 
       Inactive[Plus][evalOp[-35, 16, 19][nn], -evalOp[-35, 19, 16][nn], 
         evalOp[-19, -16, 35][nn], -evalOp[-16, -19, 35][nn]]/19, 
       Inactive[Plus][-evalOp[-35, 16, 19][nn], evalOp[-35, 19, 16][nn], 
         -evalOp[-19, -16, 35][nn], evalOp[-16, -19, 35][nn]]/16, 
       Inactive[Plus][evalOp[-34, 16, 18][nn], -evalOp[-34, 18, 16][nn], 
         evalOp[-18, -16, 34][nn], -evalOp[-16, -18, 34][nn]]/18, 
       Inactive[Plus][-evalOp[-34, 16, 18][nn], evalOp[-34, 18, 16][nn], 
         -evalOp[-18, -16, 34][nn], evalOp[-16, -18, 34][nn]]/16, 
       Inactive[Plus][evalOp[-33, 16, 17][nn], -evalOp[-33, 17, 16][nn], 
         evalOp[-17, -16, 33][nn], -evalOp[-16, -17, 33][nn]]/17, 
       Inactive[Plus][-evalOp[-33, 16, 17][nn], evalOp[-33, 17, 16][nn], 
         -evalOp[-17, -16, 33][nn], evalOp[-16, -17, 33][nn]]/16, 
       -evalOp[-16, -1, 17][nn], -evalOp[-16, 1, 15][nn], 
       evalOp[-16, 15, 1][nn], Inactive[Plus][evalOp[-35, 15, 20][nn], 
         -evalOp[-35, 20, 15][nn], evalOp[-20, -15, 35][nn], 
         -evalOp[-15, -20, 35][nn]]/20, 
       Inactive[Plus][-evalOp[-35, 15, 20][nn], evalOp[-35, 20, 15][nn], 
         -evalOp[-20, -15, 35][nn], evalOp[-15, -20, 35][nn]]/15, 
       Inactive[Plus][evalOp[-34, 15, 19][nn], -evalOp[-34, 19, 15][nn], 
         evalOp[-19, -15, 34][nn], -evalOp[-15, -19, 34][nn]]/19, 
       Inactive[Plus][-evalOp[-34, 15, 19][nn], evalOp[-34, 19, 15][nn], 
         -evalOp[-19, -15, 34][nn], evalOp[-15, -19, 34][nn]]/15, 
       Inactive[Plus][evalOp[-33, 15, 18][nn], -evalOp[-33, 18, 15][nn], 
         evalOp[-18, -15, 33][nn], -evalOp[-15, -18, 33][nn]]/18, 
       Inactive[Plus][-evalOp[-33, 15, 18][nn], evalOp[-33, 18, 15][nn], 
         -evalOp[-18, -15, 33][nn], evalOp[-15, -18, 33][nn]]/15, 
       Inactive[Plus][evalOp[-32, 15, 17][nn], -evalOp[-32, 17, 15][nn], 
         evalOp[-17, -15, 32][nn], -evalOp[-15, -17, 32][nn]]/17, 
       Inactive[Plus][-evalOp[-32, 15, 17][nn], evalOp[-32, 17, 15][nn], 
         -evalOp[-17, -15, 32][nn], evalOp[-15, -17, 32][nn]]/15, 
       Inactive[Plus][evalOp[-31, 15, 16][nn], -evalOp[-31, 16, 15][nn], 
         evalOp[-16, -15, 31][nn], -evalOp[-15, -16, 31][nn]]/16, 
       Inactive[Plus][-evalOp[-31, 15, 16][nn], evalOp[-31, 16, 15][nn], 
         -evalOp[-16, -15, 31][nn], evalOp[-15, -16, 31][nn]]/15, 
       -evalOp[-15, -1, 16][nn], -evalOp[-15, 1, 14][nn], 
       evalOp[-15, 14, 1][nn], Inactive[Plus][evalOp[-34, 14, 20][nn], 
         -evalOp[-34, 20, 14][nn], evalOp[-20, -14, 34][nn], 
         -evalOp[-14, -20, 34][nn]]/20, 
       Inactive[Plus][-evalOp[-34, 14, 20][nn], evalOp[-34, 20, 14][nn], 
         -evalOp[-20, -14, 34][nn], evalOp[-14, -20, 34][nn]]/14, 
       Inactive[Plus][evalOp[-33, 14, 19][nn], -evalOp[-33, 19, 14][nn], 
         evalOp[-19, -14, 33][nn], -evalOp[-14, -19, 33][nn]]/19, 
       Inactive[Plus][-evalOp[-33, 14, 19][nn], evalOp[-33, 19, 14][nn], 
         -evalOp[-19, -14, 33][nn], evalOp[-14, -19, 33][nn]]/14, 
       Inactive[Plus][evalOp[-32, 14, 18][nn], -evalOp[-32, 18, 14][nn], 
         evalOp[-18, -14, 32][nn], -evalOp[-14, -18, 32][nn]]/18, 
       Inactive[Plus][-evalOp[-32, 14, 18][nn], evalOp[-32, 18, 14][nn], 
         -evalOp[-18, -14, 32][nn], evalOp[-14, -18, 32][nn]]/14, 
       Inactive[Plus][evalOp[-31, 14, 17][nn], -evalOp[-31, 17, 14][nn], 
         evalOp[-17, -14, 31][nn], -evalOp[-14, -17, 31][nn]]/17, 
       Inactive[Plus][-evalOp[-31, 14, 17][nn], evalOp[-31, 17, 14][nn], 
         -evalOp[-17, -14, 31][nn], evalOp[-14, -17, 31][nn]]/14, 
       Inactive[Plus][evalOp[-30, 14, 16][nn], -evalOp[-30, 16, 14][nn], 
         evalOp[-16, -14, 30][nn], -evalOp[-14, -16, 30][nn]]/16, 
       Inactive[Plus][-evalOp[-30, 14, 16][nn], evalOp[-30, 16, 14][nn], 
         -evalOp[-16, -14, 30][nn], evalOp[-14, -16, 30][nn]]/14, 
       Inactive[Plus][evalOp[-29, 14, 15][nn], -evalOp[-29, 15, 14][nn], 
         evalOp[-15, -14, 29][nn], -evalOp[-14, -15, 29][nn]]/15, 
       Inactive[Plus][-evalOp[-29, 14, 15][nn], evalOp[-29, 15, 14][nn], 
         -evalOp[-15, -14, 29][nn], evalOp[-14, -15, 29][nn]]/14, 
       -evalOp[-14, -1, 15][nn], -evalOp[-14, 1, 13][nn], 
       evalOp[-14, 13, 1][nn], Inactive[Plus][evalOp[-33, 13, 20][nn], 
         -evalOp[-33, 20, 13][nn], evalOp[-20, -13, 33][nn], 
         -evalOp[-13, -20, 33][nn]]/20, 
       Inactive[Plus][-evalOp[-33, 13, 20][nn], evalOp[-33, 20, 13][nn], 
         -evalOp[-20, -13, 33][nn], evalOp[-13, -20, 33][nn]]/13, 
       Inactive[Plus][evalOp[-32, 13, 19][nn], -evalOp[-32, 19, 13][nn], 
         evalOp[-19, -13, 32][nn], -evalOp[-13, -19, 32][nn]]/19, 
       Inactive[Plus][-evalOp[-32, 13, 19][nn], evalOp[-32, 19, 13][nn], 
         -evalOp[-19, -13, 32][nn], evalOp[-13, -19, 32][nn]]/13, 
       Inactive[Plus][evalOp[-31, 13, 18][nn], -evalOp[-31, 18, 13][nn], 
         evalOp[-18, -13, 31][nn], -evalOp[-13, -18, 31][nn]]/18, 
       Inactive[Plus][-evalOp[-31, 13, 18][nn], evalOp[-31, 18, 13][nn], 
         -evalOp[-18, -13, 31][nn], evalOp[-13, -18, 31][nn]]/13, 
       Inactive[Plus][evalOp[-30, 13, 17][nn], -evalOp[-30, 17, 13][nn], 
         evalOp[-17, -13, 30][nn], -evalOp[-13, -17, 30][nn]]/17, 
       Inactive[Plus][-evalOp[-30, 13, 17][nn], evalOp[-30, 17, 13][nn], 
         -evalOp[-17, -13, 30][nn], evalOp[-13, -17, 30][nn]]/13, 
       Inactive[Plus][evalOp[-29, 13, 16][nn], -evalOp[-29, 16, 13][nn], 
         evalOp[-16, -13, 29][nn], -evalOp[-13, -16, 29][nn]]/16, 
       Inactive[Plus][-evalOp[-29, 13, 16][nn], evalOp[-29, 16, 13][nn], 
         -evalOp[-16, -13, 29][nn], evalOp[-13, -16, 29][nn]]/13, 
       Inactive[Plus][evalOp[-28, 13, 15][nn], -evalOp[-28, 15, 13][nn], 
         evalOp[-15, -13, 28][nn], -evalOp[-13, -15, 28][nn]]/15, 
       Inactive[Plus][-evalOp[-28, 13, 15][nn], evalOp[-28, 15, 13][nn], 
         -evalOp[-15, -13, 28][nn], evalOp[-13, -15, 28][nn]]/13, 
       Inactive[Plus][evalOp[-27, 13, 14][nn], -evalOp[-27, 14, 13][nn], 
         evalOp[-14, -13, 27][nn], -evalOp[-13, -14, 27][nn]]/14, 
       Inactive[Plus][-evalOp[-27, 13, 14][nn], evalOp[-27, 14, 13][nn], 
         -evalOp[-14, -13, 27][nn], evalOp[-13, -14, 27][nn]]/13, 
       -evalOp[-13, -1, 14][nn], -evalOp[-13, 1, 12][nn], 
       evalOp[-13, 12, 1][nn], Inactive[Plus][evalOp[-32, 12, 20][nn], 
         -evalOp[-32, 20, 12][nn], evalOp[-20, -12, 32][nn], 
         -evalOp[-12, -20, 32][nn]]/20, 
       Inactive[Plus][-evalOp[-32, 12, 20][nn], evalOp[-32, 20, 12][nn], 
         -evalOp[-20, -12, 32][nn], evalOp[-12, -20, 32][nn]]/12, 
       Inactive[Plus][evalOp[-31, 12, 19][nn], -evalOp[-31, 19, 12][nn], 
         evalOp[-19, -12, 31][nn], -evalOp[-12, -19, 31][nn]]/19, 
       Inactive[Plus][-evalOp[-31, 12, 19][nn], evalOp[-31, 19, 12][nn], 
         -evalOp[-19, -12, 31][nn], evalOp[-12, -19, 31][nn]]/12, 
       Inactive[Plus][evalOp[-30, 12, 18][nn], -evalOp[-30, 18, 12][nn], 
         evalOp[-18, -12, 30][nn], -evalOp[-12, -18, 30][nn]]/18, 
       Inactive[Plus][-evalOp[-30, 12, 18][nn], evalOp[-30, 18, 12][nn], 
         -evalOp[-18, -12, 30][nn], evalOp[-12, -18, 30][nn]]/12, 
       Inactive[Plus][evalOp[-29, 12, 17][nn], -evalOp[-29, 17, 12][nn], 
         evalOp[-17, -12, 29][nn], -evalOp[-12, -17, 29][nn]]/17, 
       Inactive[Plus][-evalOp[-29, 12, 17][nn], evalOp[-29, 17, 12][nn], 
         -evalOp[-17, -12, 29][nn], evalOp[-12, -17, 29][nn]]/12, 
       Inactive[Plus][evalOp[-28, 12, 16][nn], -evalOp[-28, 16, 12][nn], 
         evalOp[-16, -12, 28][nn], -evalOp[-12, -16, 28][nn]]/16, 
       Inactive[Plus][-evalOp[-28, 12, 16][nn], evalOp[-28, 16, 12][nn], 
         -evalOp[-16, -12, 28][nn], evalOp[-12, -16, 28][nn]]/12, 
       Inactive[Plus][evalOp[-27, 12, 15][nn], -evalOp[-27, 15, 12][nn], 
         evalOp[-15, -12, 27][nn], -evalOp[-12, -15, 27][nn]]/15, 
       Inactive[Plus][-evalOp[-27, 12, 15][nn], evalOp[-27, 15, 12][nn], 
         -evalOp[-15, -12, 27][nn], evalOp[-12, -15, 27][nn]]/12, 
       Inactive[Plus][evalOp[-26, 12, 14][nn], -evalOp[-26, 14, 12][nn], 
         evalOp[-14, -12, 26][nn], -evalOp[-12, -14, 26][nn]]/14, 
       Inactive[Plus][-evalOp[-26, 12, 14][nn], evalOp[-26, 14, 12][nn], 
         -evalOp[-14, -12, 26][nn], evalOp[-12, -14, 26][nn]]/12, 
       Inactive[Plus][evalOp[-25, 12, 13][nn], -evalOp[-25, 13, 12][nn], 
         evalOp[-13, -12, 25][nn], -evalOp[-12, -13, 25][nn]]/13, 
       Inactive[Plus][-evalOp[-25, 12, 13][nn], evalOp[-25, 13, 12][nn], 
         -evalOp[-13, -12, 25][nn], evalOp[-12, -13, 25][nn]]/12, 
       -evalOp[-12, -1, 13][nn], -evalOp[-12, 1, 11][nn], 
       evalOp[-12, 11, 1][nn], Inactive[Plus][evalOp[-31, 11, 20][nn], 
         -evalOp[-31, 20, 11][nn], evalOp[-20, -11, 31][nn], 
         -evalOp[-11, -20, 31][nn]]/20, 
       Inactive[Plus][-evalOp[-31, 11, 20][nn], evalOp[-31, 20, 11][nn], 
         -evalOp[-20, -11, 31][nn], evalOp[-11, -20, 31][nn]]/11, 
       Inactive[Plus][evalOp[-30, 11, 19][nn], -evalOp[-30, 19, 11][nn], 
         evalOp[-19, -11, 30][nn], -evalOp[-11, -19, 30][nn]]/19, 
       Inactive[Plus][-evalOp[-30, 11, 19][nn], evalOp[-30, 19, 11][nn], 
         -evalOp[-19, -11, 30][nn], evalOp[-11, -19, 30][nn]]/11, 
       Inactive[Plus][evalOp[-29, 11, 18][nn], -evalOp[-29, 18, 11][nn], 
         evalOp[-18, -11, 29][nn], -evalOp[-11, -18, 29][nn]]/18, 
       Inactive[Plus][-evalOp[-29, 11, 18][nn], evalOp[-29, 18, 11][nn], 
         -evalOp[-18, -11, 29][nn], evalOp[-11, -18, 29][nn]]/11, 
       Inactive[Plus][evalOp[-28, 11, 17][nn], -evalOp[-28, 17, 11][nn], 
         evalOp[-17, -11, 28][nn], -evalOp[-11, -17, 28][nn]]/17, 
       Inactive[Plus][-evalOp[-28, 11, 17][nn], evalOp[-28, 17, 11][nn], 
         -evalOp[-17, -11, 28][nn], evalOp[-11, -17, 28][nn]]/11, 
       Inactive[Plus][evalOp[-27, 11, 16][nn], -evalOp[-27, 16, 11][nn], 
         evalOp[-16, -11, 27][nn], -evalOp[-11, -16, 27][nn]]/16, 
       Inactive[Plus][-evalOp[-27, 11, 16][nn], evalOp[-27, 16, 11][nn], 
         -evalOp[-16, -11, 27][nn], evalOp[-11, -16, 27][nn]]/11, 
       Inactive[Plus][evalOp[-26, 11, 15][nn], -evalOp[-26, 15, 11][nn], 
         evalOp[-15, -11, 26][nn], -evalOp[-11, -15, 26][nn]]/15, 
       Inactive[Plus][-evalOp[-26, 11, 15][nn], evalOp[-26, 15, 11][nn], 
         -evalOp[-15, -11, 26][nn], evalOp[-11, -15, 26][nn]]/11, 
       Inactive[Plus][evalOp[-25, 11, 14][nn], -evalOp[-25, 14, 11][nn], 
         evalOp[-14, -11, 25][nn], -evalOp[-11, -14, 25][nn]]/14, 
       Inactive[Plus][-evalOp[-25, 11, 14][nn], evalOp[-25, 14, 11][nn], 
         -evalOp[-14, -11, 25][nn], evalOp[-11, -14, 25][nn]]/11, 
       Inactive[Plus][evalOp[-24, 11, 13][nn], -evalOp[-24, 13, 11][nn], 
         evalOp[-13, -11, 24][nn], -evalOp[-11, -13, 24][nn]]/13, 
       Inactive[Plus][-evalOp[-24, 11, 13][nn], evalOp[-24, 13, 11][nn], 
         -evalOp[-13, -11, 24][nn], evalOp[-11, -13, 24][nn]]/11, 
       Inactive[Plus][evalOp[-23, 11, 12][nn], -evalOp[-23, 12, 11][nn], 
         evalOp[-12, -11, 23][nn], -evalOp[-11, -12, 23][nn]]/12, 
       Inactive[Plus][-evalOp[-23, 11, 12][nn], evalOp[-23, 12, 11][nn], 
         -evalOp[-12, -11, 23][nn], evalOp[-11, -12, 23][nn]]/11, 
       -evalOp[-11, -1, 12][nn], -evalOp[-11, 1, 10][nn], 
       evalOp[-11, 10, 1][nn], Inactive[Plus][evalOp[-30, 10, 20][nn], 
         -evalOp[-30, 20, 10][nn], evalOp[-20, -10, 30][nn], 
         -evalOp[-10, -20, 30][nn]]/20, 
       Inactive[Plus][-evalOp[-30, 10, 20][nn], evalOp[-30, 20, 10][nn], 
         -evalOp[-20, -10, 30][nn], evalOp[-10, -20, 30][nn]]/10, 
       Inactive[Plus][evalOp[-29, 10, 19][nn], -evalOp[-29, 19, 10][nn], 
         evalOp[-19, -10, 29][nn], -evalOp[-10, -19, 29][nn]]/19, 
       Inactive[Plus][-evalOp[-29, 10, 19][nn], evalOp[-29, 19, 10][nn], 
         -evalOp[-19, -10, 29][nn], evalOp[-10, -19, 29][nn]]/10, 
       Inactive[Plus][evalOp[-28, 10, 18][nn], -evalOp[-28, 18, 10][nn], 
         evalOp[-18, -10, 28][nn], -evalOp[-10, -18, 28][nn]]/18, 
       Inactive[Plus][-evalOp[-28, 10, 18][nn], evalOp[-28, 18, 10][nn], 
         -evalOp[-18, -10, 28][nn], evalOp[-10, -18, 28][nn]]/10, 
       Inactive[Plus][evalOp[-27, 10, 17][nn], -evalOp[-27, 17, 10][nn], 
         evalOp[-17, -10, 27][nn], -evalOp[-10, -17, 27][nn]]/17, 
       Inactive[Plus][-evalOp[-27, 10, 17][nn], evalOp[-27, 17, 10][nn], 
         -evalOp[-17, -10, 27][nn], evalOp[-10, -17, 27][nn]]/10, 
       Inactive[Plus][evalOp[-26, 10, 16][nn], -evalOp[-26, 16, 10][nn], 
         evalOp[-16, -10, 26][nn], -evalOp[-10, -16, 26][nn]]/16, 
       Inactive[Plus][-evalOp[-26, 10, 16][nn], evalOp[-26, 16, 10][nn], 
         -evalOp[-16, -10, 26][nn], evalOp[-10, -16, 26][nn]]/10, 
       Inactive[Plus][evalOp[-25, 10, 15][nn], -evalOp[-25, 15, 10][nn], 
         evalOp[-15, -10, 25][nn], -evalOp[-10, -15, 25][nn]]/15, 
       Inactive[Plus][-evalOp[-25, 10, 15][nn], evalOp[-25, 15, 10][nn], 
         -evalOp[-15, -10, 25][nn], evalOp[-10, -15, 25][nn]]/10, 
       Inactive[Plus][evalOp[-24, 10, 14][nn], -evalOp[-24, 14, 10][nn], 
         evalOp[-14, -10, 24][nn], -evalOp[-10, -14, 24][nn]]/14, 
       Inactive[Plus][-evalOp[-24, 10, 14][nn], evalOp[-24, 14, 10][nn], 
         -evalOp[-14, -10, 24][nn], evalOp[-10, -14, 24][nn]]/10, 
       Inactive[Plus][evalOp[-23, 10, 13][nn], -evalOp[-23, 13, 10][nn], 
         evalOp[-13, -10, 23][nn], -evalOp[-10, -13, 23][nn]]/13, 
       Inactive[Plus][-evalOp[-23, 10, 13][nn], evalOp[-23, 13, 10][nn], 
         -evalOp[-13, -10, 23][nn], evalOp[-10, -13, 23][nn]]/10, 
       Inactive[Plus][evalOp[-22, 10, 12][nn], -evalOp[-22, 12, 10][nn], 
         evalOp[-12, -10, 22][nn], -evalOp[-10, -12, 22][nn]]/12, 
       Inactive[Plus][-evalOp[-22, 10, 12][nn], evalOp[-22, 12, 10][nn], 
         -evalOp[-12, -10, 22][nn], evalOp[-10, -12, 22][nn]]/10, 
       Inactive[Plus][evalOp[-21, 10, 11][nn], -evalOp[-21, 11, 10][nn], 
         evalOp[-11, -10, 21][nn], -evalOp[-10, -11, 21][nn]]/11, 
       Inactive[Plus][-evalOp[-21, 10, 11][nn], evalOp[-21, 11, 10][nn], 
         -evalOp[-11, -10, 21][nn], evalOp[-10, -11, 21][nn]]/10, 
       -evalOp[-10, -1, 11][nn], -evalOp[-10, 1, 9][nn], 
       evalOp[-10, 9, 1][nn], Inactive[Plus][evalOp[-29, 9, 20][nn], 
         -evalOp[-29, 20, 9][nn], evalOp[-20, -9, 29][nn], 
         -evalOp[-9, -20, 29][nn]]/20, 
       Inactive[Plus][-evalOp[-29, 9, 20][nn], evalOp[-29, 20, 9][nn], 
         -evalOp[-20, -9, 29][nn], evalOp[-9, -20, 29][nn]]/9, 
       Inactive[Plus][evalOp[-28, 9, 19][nn], -evalOp[-28, 19, 9][nn], 
         evalOp[-19, -9, 28][nn], -evalOp[-9, -19, 28][nn]]/19, 
       Inactive[Plus][-evalOp[-28, 9, 19][nn], evalOp[-28, 19, 9][nn], 
         -evalOp[-19, -9, 28][nn], evalOp[-9, -19, 28][nn]]/9, 
       Inactive[Plus][evalOp[-27, 9, 18][nn], -evalOp[-27, 18, 9][nn], 
         evalOp[-18, -9, 27][nn], -evalOp[-9, -18, 27][nn]]/18, 
       Inactive[Plus][-evalOp[-27, 9, 18][nn], evalOp[-27, 18, 9][nn], 
         -evalOp[-18, -9, 27][nn], evalOp[-9, -18, 27][nn]]/9, 
       Inactive[Plus][evalOp[-26, 9, 17][nn], -evalOp[-26, 17, 9][nn], 
         evalOp[-17, -9, 26][nn], -evalOp[-9, -17, 26][nn]]/17, 
       Inactive[Plus][-evalOp[-26, 9, 17][nn], evalOp[-26, 17, 9][nn], 
         -evalOp[-17, -9, 26][nn], evalOp[-9, -17, 26][nn]]/9, 
       Inactive[Plus][evalOp[-25, 9, 16][nn], -evalOp[-25, 16, 9][nn], 
         evalOp[-16, -9, 25][nn], -evalOp[-9, -16, 25][nn]]/16, 
       Inactive[Plus][-evalOp[-25, 9, 16][nn], evalOp[-25, 16, 9][nn], 
         -evalOp[-16, -9, 25][nn], evalOp[-9, -16, 25][nn]]/9, 
       Inactive[Plus][evalOp[-24, 9, 15][nn], -evalOp[-24, 15, 9][nn], 
         evalOp[-15, -9, 24][nn], -evalOp[-9, -15, 24][nn]]/15, 
       Inactive[Plus][-evalOp[-24, 9, 15][nn], evalOp[-24, 15, 9][nn], 
         -evalOp[-15, -9, 24][nn], evalOp[-9, -15, 24][nn]]/9, 
       Inactive[Plus][evalOp[-23, 9, 14][nn], -evalOp[-23, 14, 9][nn], 
         evalOp[-14, -9, 23][nn], -evalOp[-9, -14, 23][nn]]/14, 
       Inactive[Plus][-evalOp[-23, 9, 14][nn], evalOp[-23, 14, 9][nn], 
         -evalOp[-14, -9, 23][nn], evalOp[-9, -14, 23][nn]]/9, 
       Inactive[Plus][evalOp[-22, 9, 13][nn], -evalOp[-22, 13, 9][nn], 
         evalOp[-13, -9, 22][nn], -evalOp[-9, -13, 22][nn]]/13, 
       Inactive[Plus][-evalOp[-22, 9, 13][nn], evalOp[-22, 13, 9][nn], 
         -evalOp[-13, -9, 22][nn], evalOp[-9, -13, 22][nn]]/9, 
       Inactive[Plus][evalOp[-21, 9, 12][nn], -evalOp[-21, 12, 9][nn], 
         evalOp[-12, -9, 21][nn], -evalOp[-9, -12, 21][nn]]/12, 
       Inactive[Plus][-evalOp[-21, 9, 12][nn], evalOp[-21, 12, 9][nn], 
         -evalOp[-12, -9, 21][nn], evalOp[-9, -12, 21][nn]]/9, 
       Inactive[Plus][evalOp[-20, 9, 11][nn], -evalOp[-20, 11, 9][nn], 
         evalOp[-11, -9, 20][nn], -evalOp[-9, -11, 20][nn]]/11, 
       Inactive[Plus][-evalOp[-20, 9, 11][nn], evalOp[-20, 11, 9][nn], 
         -evalOp[-11, -9, 20][nn], evalOp[-9, -11, 20][nn]]/9, 
       Inactive[Plus][evalOp[-19, 9, 10][nn], -evalOp[-19, 10, 9][nn], 
         evalOp[-10, -9, 19][nn], -evalOp[-9, -10, 19][nn]]/10, 
       Inactive[Plus][-evalOp[-19, 9, 10][nn], evalOp[-19, 10, 9][nn], 
         -evalOp[-10, -9, 19][nn], evalOp[-9, -10, 19][nn]]/9, 
       -evalOp[-9, -1, 10][nn], -evalOp[-9, 1, 8][nn], evalOp[-9, 8, 1][nn], 
       Inactive[Plus][evalOp[-28, 8, 20][nn], -evalOp[-28, 20, 8][nn], 
         evalOp[-20, -8, 28][nn], -evalOp[-8, -20, 28][nn]]/20, 
       Inactive[Plus][-evalOp[-28, 8, 20][nn], evalOp[-28, 20, 8][nn], 
         -evalOp[-20, -8, 28][nn], evalOp[-8, -20, 28][nn]]/8, 
       Inactive[Plus][evalOp[-27, 8, 19][nn], -evalOp[-27, 19, 8][nn], 
         evalOp[-19, -8, 27][nn], -evalOp[-8, -19, 27][nn]]/19, 
       Inactive[Plus][-evalOp[-27, 8, 19][nn], evalOp[-27, 19, 8][nn], 
         -evalOp[-19, -8, 27][nn], evalOp[-8, -19, 27][nn]]/8, 
       Inactive[Plus][evalOp[-26, 8, 18][nn], -evalOp[-26, 18, 8][nn], 
         evalOp[-18, -8, 26][nn], -evalOp[-8, -18, 26][nn]]/18, 
       Inactive[Plus][-evalOp[-26, 8, 18][nn], evalOp[-26, 18, 8][nn], 
         -evalOp[-18, -8, 26][nn], evalOp[-8, -18, 26][nn]]/8, 
       Inactive[Plus][evalOp[-25, 8, 17][nn], -evalOp[-25, 17, 8][nn], 
         evalOp[-17, -8, 25][nn], -evalOp[-8, -17, 25][nn]]/17, 
       Inactive[Plus][-evalOp[-25, 8, 17][nn], evalOp[-25, 17, 8][nn], 
         -evalOp[-17, -8, 25][nn], evalOp[-8, -17, 25][nn]]/8, 
       Inactive[Plus][evalOp[-24, 8, 16][nn], -evalOp[-24, 16, 8][nn], 
         evalOp[-16, -8, 24][nn], -evalOp[-8, -16, 24][nn]]/16, 
       Inactive[Plus][-evalOp[-24, 8, 16][nn], evalOp[-24, 16, 8][nn], 
         -evalOp[-16, -8, 24][nn], evalOp[-8, -16, 24][nn]]/8, 
       Inactive[Plus][evalOp[-23, 8, 15][nn], -evalOp[-23, 15, 8][nn], 
         evalOp[-15, -8, 23][nn], -evalOp[-8, -15, 23][nn]]/15, 
       Inactive[Plus][-evalOp[-23, 8, 15][nn], evalOp[-23, 15, 8][nn], 
         -evalOp[-15, -8, 23][nn], evalOp[-8, -15, 23][nn]]/8, 
       Inactive[Plus][evalOp[-22, 8, 14][nn], -evalOp[-22, 14, 8][nn], 
         evalOp[-14, -8, 22][nn], -evalOp[-8, -14, 22][nn]]/14, 
       Inactive[Plus][-evalOp[-22, 8, 14][nn], evalOp[-22, 14, 8][nn], 
         -evalOp[-14, -8, 22][nn], evalOp[-8, -14, 22][nn]]/8, 
       Inactive[Plus][evalOp[-21, 8, 13][nn], -evalOp[-21, 13, 8][nn], 
         evalOp[-13, -8, 21][nn], -evalOp[-8, -13, 21][nn]]/13, 
       Inactive[Plus][-evalOp[-21, 8, 13][nn], evalOp[-21, 13, 8][nn], 
         -evalOp[-13, -8, 21][nn], evalOp[-8, -13, 21][nn]]/8, 
       Inactive[Plus][evalOp[-20, 8, 12][nn], -evalOp[-20, 12, 8][nn], 
         evalOp[-12, -8, 20][nn], -evalOp[-8, -12, 20][nn]]/12, 
       Inactive[Plus][-evalOp[-20, 8, 12][nn], evalOp[-20, 12, 8][nn], 
         -evalOp[-12, -8, 20][nn], evalOp[-8, -12, 20][nn]]/8, 
       Inactive[Plus][evalOp[-19, 8, 11][nn], -evalOp[-19, 11, 8][nn], 
         evalOp[-11, -8, 19][nn], -evalOp[-8, -11, 19][nn]]/11, 
       Inactive[Plus][-evalOp[-19, 8, 11][nn], evalOp[-19, 11, 8][nn], 
         -evalOp[-11, -8, 19][nn], evalOp[-8, -11, 19][nn]]/8, 
       Inactive[Plus][evalOp[-18, 8, 10][nn], -evalOp[-18, 10, 8][nn], 
         evalOp[-10, -8, 18][nn], -evalOp[-8, -10, 18][nn]]/10, 
       Inactive[Plus][-evalOp[-18, 8, 10][nn], evalOp[-18, 10, 8][nn], 
         -evalOp[-10, -8, 18][nn], evalOp[-8, -10, 18][nn]]/8, 
       Inactive[Plus][evalOp[-17, 8, 9][nn], -evalOp[-17, 9, 8][nn], 
         evalOp[-9, -8, 17][nn], -evalOp[-8, -9, 17][nn]]/9, 
       Inactive[Plus][-evalOp[-17, 8, 9][nn], evalOp[-17, 9, 8][nn], 
         -evalOp[-9, -8, 17][nn], evalOp[-8, -9, 17][nn]]/8, 
       -evalOp[-8, -1, 9][nn], -evalOp[-8, 1, 7][nn], evalOp[-8, 7, 1][nn], 
       Inactive[Plus][evalOp[-27, 7, 20][nn], -evalOp[-27, 20, 7][nn], 
         evalOp[-20, -7, 27][nn], -evalOp[-7, -20, 27][nn]]/20, 
       Inactive[Plus][-evalOp[-27, 7, 20][nn], evalOp[-27, 20, 7][nn], 
         -evalOp[-20, -7, 27][nn], evalOp[-7, -20, 27][nn]]/7, 
       Inactive[Plus][evalOp[-26, 7, 19][nn], -evalOp[-26, 19, 7][nn], 
         evalOp[-19, -7, 26][nn], -evalOp[-7, -19, 26][nn]]/19, 
       Inactive[Plus][-evalOp[-26, 7, 19][nn], evalOp[-26, 19, 7][nn], 
         -evalOp[-19, -7, 26][nn], evalOp[-7, -19, 26][nn]]/7, 
       Inactive[Plus][evalOp[-25, 7, 18][nn], -evalOp[-25, 18, 7][nn], 
         evalOp[-18, -7, 25][nn], -evalOp[-7, -18, 25][nn]]/18, 
       Inactive[Plus][-evalOp[-25, 7, 18][nn], evalOp[-25, 18, 7][nn], 
         -evalOp[-18, -7, 25][nn], evalOp[-7, -18, 25][nn]]/7, 
       Inactive[Plus][evalOp[-24, 7, 17][nn], -evalOp[-24, 17, 7][nn], 
         evalOp[-17, -7, 24][nn], -evalOp[-7, -17, 24][nn]]/17, 
       Inactive[Plus][-evalOp[-24, 7, 17][nn], evalOp[-24, 17, 7][nn], 
         -evalOp[-17, -7, 24][nn], evalOp[-7, -17, 24][nn]]/7, 
       Inactive[Plus][evalOp[-23, 7, 16][nn], -evalOp[-23, 16, 7][nn], 
         evalOp[-16, -7, 23][nn], -evalOp[-7, -16, 23][nn]]/16, 
       Inactive[Plus][-evalOp[-23, 7, 16][nn], evalOp[-23, 16, 7][nn], 
         -evalOp[-16, -7, 23][nn], evalOp[-7, -16, 23][nn]]/7, 
       Inactive[Plus][evalOp[-22, 7, 15][nn], -evalOp[-22, 15, 7][nn], 
         evalOp[-15, -7, 22][nn], -evalOp[-7, -15, 22][nn]]/15, 
       Inactive[Plus][-evalOp[-22, 7, 15][nn], evalOp[-22, 15, 7][nn], 
         -evalOp[-15, -7, 22][nn], evalOp[-7, -15, 22][nn]]/7, 
       Inactive[Plus][evalOp[-21, 7, 14][nn], -evalOp[-21, 14, 7][nn], 
         evalOp[-14, -7, 21][nn], -evalOp[-7, -14, 21][nn]]/14, 
       Inactive[Plus][-evalOp[-21, 7, 14][nn], evalOp[-21, 14, 7][nn], 
         -evalOp[-14, -7, 21][nn], evalOp[-7, -14, 21][nn]]/7, 
       Inactive[Plus][evalOp[-20, 7, 13][nn], -evalOp[-20, 13, 7][nn], 
         evalOp[-13, -7, 20][nn], -evalOp[-7, -13, 20][nn]]/13, 
       Inactive[Plus][-evalOp[-20, 7, 13][nn], evalOp[-20, 13, 7][nn], 
         -evalOp[-13, -7, 20][nn], evalOp[-7, -13, 20][nn]]/7, 
       Inactive[Plus][evalOp[-19, 7, 12][nn], -evalOp[-19, 12, 7][nn], 
         evalOp[-12, -7, 19][nn], -evalOp[-7, -12, 19][nn]]/12, 
       Inactive[Plus][-evalOp[-19, 7, 12][nn], evalOp[-19, 12, 7][nn], 
         -evalOp[-12, -7, 19][nn], evalOp[-7, -12, 19][nn]]/7, 
       Inactive[Plus][evalOp[-18, 7, 11][nn], -evalOp[-18, 11, 7][nn], 
         evalOp[-11, -7, 18][nn], -evalOp[-7, -11, 18][nn]]/11, 
       Inactive[Plus][-evalOp[-18, 7, 11][nn], evalOp[-18, 11, 7][nn], 
         -evalOp[-11, -7, 18][nn], evalOp[-7, -11, 18][nn]]/7, 
       Inactive[Plus][evalOp[-17, 7, 10][nn], -evalOp[-17, 10, 7][nn], 
         evalOp[-10, -7, 17][nn], -evalOp[-7, -10, 17][nn]]/10, 
       Inactive[Plus][-evalOp[-17, 7, 10][nn], evalOp[-17, 10, 7][nn], 
         -evalOp[-10, -7, 17][nn], evalOp[-7, -10, 17][nn]]/7, 
       Inactive[Plus][evalOp[-16, 7, 9][nn], -evalOp[-16, 9, 7][nn], 
         evalOp[-9, -7, 16][nn], -evalOp[-7, -9, 16][nn]]/9, 
       Inactive[Plus][-evalOp[-16, 7, 9][nn], evalOp[-16, 9, 7][nn], 
         -evalOp[-9, -7, 16][nn], evalOp[-7, -9, 16][nn]]/7, 
       Inactive[Plus][evalOp[-15, 7, 8][nn], -evalOp[-15, 8, 7][nn], 
         evalOp[-8, -7, 15][nn], -evalOp[-7, -8, 15][nn]]/8, 
       Inactive[Plus][-evalOp[-15, 7, 8][nn], evalOp[-15, 8, 7][nn], 
         -evalOp[-8, -7, 15][nn], evalOp[-7, -8, 15][nn]]/7, 
       -evalOp[-7, -1, 8][nn], -evalOp[-7, 1, 6][nn], evalOp[-7, 6, 1][nn], 
       Inactive[Plus][evalOp[-26, 6, 20][nn], -evalOp[-26, 20, 6][nn], 
         evalOp[-20, -6, 26][nn], -evalOp[-6, -20, 26][nn]]/20, 
       Inactive[Plus][-evalOp[-26, 6, 20][nn], evalOp[-26, 20, 6][nn], 
         -evalOp[-20, -6, 26][nn], evalOp[-6, -20, 26][nn]]/6, 
       Inactive[Plus][evalOp[-25, 6, 19][nn], -evalOp[-25, 19, 6][nn], 
         evalOp[-19, -6, 25][nn], -evalOp[-6, -19, 25][nn]]/19, 
       Inactive[Plus][-evalOp[-25, 6, 19][nn], evalOp[-25, 19, 6][nn], 
         -evalOp[-19, -6, 25][nn], evalOp[-6, -19, 25][nn]]/6, 
       Inactive[Plus][evalOp[-24, 6, 18][nn], -evalOp[-24, 18, 6][nn], 
         evalOp[-18, -6, 24][nn], -evalOp[-6, -18, 24][nn]]/18, 
       Inactive[Plus][-evalOp[-24, 6, 18][nn], evalOp[-24, 18, 6][nn], 
         -evalOp[-18, -6, 24][nn], evalOp[-6, -18, 24][nn]]/6, 
       Inactive[Plus][evalOp[-23, 6, 17][nn], -evalOp[-23, 17, 6][nn], 
         evalOp[-17, -6, 23][nn], -evalOp[-6, -17, 23][nn]]/17, 
       Inactive[Plus][-evalOp[-23, 6, 17][nn], evalOp[-23, 17, 6][nn], 
         -evalOp[-17, -6, 23][nn], evalOp[-6, -17, 23][nn]]/6, 
       Inactive[Plus][evalOp[-22, 6, 16][nn], -evalOp[-22, 16, 6][nn], 
         evalOp[-16, -6, 22][nn], -evalOp[-6, -16, 22][nn]]/16, 
       Inactive[Plus][-evalOp[-22, 6, 16][nn], evalOp[-22, 16, 6][nn], 
         -evalOp[-16, -6, 22][nn], evalOp[-6, -16, 22][nn]]/6, 
       Inactive[Plus][evalOp[-21, 6, 15][nn], -evalOp[-21, 15, 6][nn], 
         evalOp[-15, -6, 21][nn], -evalOp[-6, -15, 21][nn]]/15, 
       Inactive[Plus][-evalOp[-21, 6, 15][nn], evalOp[-21, 15, 6][nn], 
         -evalOp[-15, -6, 21][nn], evalOp[-6, -15, 21][nn]]/6, 
       Inactive[Plus][evalOp[-20, 6, 14][nn], -evalOp[-20, 14, 6][nn], 
         evalOp[-14, -6, 20][nn], -evalOp[-6, -14, 20][nn]]/14, 
       Inactive[Plus][-evalOp[-20, 6, 14][nn], evalOp[-20, 14, 6][nn], 
         -evalOp[-14, -6, 20][nn], evalOp[-6, -14, 20][nn]]/6, 
       Inactive[Plus][evalOp[-19, 6, 13][nn], -evalOp[-19, 13, 6][nn], 
         evalOp[-13, -6, 19][nn], -evalOp[-6, -13, 19][nn]]/13, 
       Inactive[Plus][-evalOp[-19, 6, 13][nn], evalOp[-19, 13, 6][nn], 
         -evalOp[-13, -6, 19][nn], evalOp[-6, -13, 19][nn]]/6, 
       Inactive[Plus][evalOp[-18, 6, 12][nn], -evalOp[-18, 12, 6][nn], 
         evalOp[-12, -6, 18][nn], -evalOp[-6, -12, 18][nn]]/12, 
       Inactive[Plus][-evalOp[-18, 6, 12][nn], evalOp[-18, 12, 6][nn], 
         -evalOp[-12, -6, 18][nn], evalOp[-6, -12, 18][nn]]/6, 
       Inactive[Plus][evalOp[-17, 6, 11][nn], -evalOp[-17, 11, 6][nn], 
         evalOp[-11, -6, 17][nn], -evalOp[-6, -11, 17][nn]]/11, 
       Inactive[Plus][-evalOp[-17, 6, 11][nn], evalOp[-17, 11, 6][nn], 
         -evalOp[-11, -6, 17][nn], evalOp[-6, -11, 17][nn]]/6, 
       Inactive[Plus][evalOp[-16, 6, 10][nn], -evalOp[-16, 10, 6][nn], 
         evalOp[-10, -6, 16][nn], -evalOp[-6, -10, 16][nn]]/10, 
       Inactive[Plus][-evalOp[-16, 6, 10][nn], evalOp[-16, 10, 6][nn], 
         -evalOp[-10, -6, 16][nn], evalOp[-6, -10, 16][nn]]/6, 
       Inactive[Plus][evalOp[-15, 6, 9][nn], -evalOp[-15, 9, 6][nn], 
         evalOp[-9, -6, 15][nn], -evalOp[-6, -9, 15][nn]]/9, 
       Inactive[Plus][-evalOp[-15, 6, 9][nn], evalOp[-15, 9, 6][nn], 
         -evalOp[-9, -6, 15][nn], evalOp[-6, -9, 15][nn]]/6, 
       Inactive[Plus][evalOp[-14, 6, 8][nn], -evalOp[-14, 8, 6][nn], 
         evalOp[-8, -6, 14][nn], -evalOp[-6, -8, 14][nn]]/8, 
       Inactive[Plus][-evalOp[-14, 6, 8][nn], evalOp[-14, 8, 6][nn], 
         -evalOp[-8, -6, 14][nn], evalOp[-6, -8, 14][nn]]/6, 
       Inactive[Plus][evalOp[-13, 6, 7][nn], -evalOp[-13, 7, 6][nn], 
         evalOp[-7, -6, 13][nn], -evalOp[-6, -7, 13][nn]]/7, 
       Inactive[Plus][-evalOp[-13, 6, 7][nn], evalOp[-13, 7, 6][nn], 
         -evalOp[-7, -6, 13][nn], evalOp[-6, -7, 13][nn]]/6, 
       -evalOp[-6, -1, 7][nn], -evalOp[-6, 1, 5][nn], evalOp[-6, 5, 1][nn], 
       Inactive[Plus][evalOp[-25, 5, 20][nn], -evalOp[-25, 20, 5][nn], 
         evalOp[-20, -5, 25][nn], -evalOp[-5, -20, 25][nn]]/20, 
       Inactive[Plus][-evalOp[-25, 5, 20][nn], evalOp[-25, 20, 5][nn], 
         -evalOp[-20, -5, 25][nn], evalOp[-5, -20, 25][nn]]/5, 
       Inactive[Plus][evalOp[-24, 5, 19][nn], -evalOp[-24, 19, 5][nn], 
         evalOp[-19, -5, 24][nn], -evalOp[-5, -19, 24][nn]]/19, 
       Inactive[Plus][-evalOp[-24, 5, 19][nn], evalOp[-24, 19, 5][nn], 
         -evalOp[-19, -5, 24][nn], evalOp[-5, -19, 24][nn]]/5, 
       Inactive[Plus][evalOp[-23, 5, 18][nn], -evalOp[-23, 18, 5][nn], 
         evalOp[-18, -5, 23][nn], -evalOp[-5, -18, 23][nn]]/18, 
       Inactive[Plus][-evalOp[-23, 5, 18][nn], evalOp[-23, 18, 5][nn], 
         -evalOp[-18, -5, 23][nn], evalOp[-5, -18, 23][nn]]/5, 
       Inactive[Plus][evalOp[-22, 5, 17][nn], -evalOp[-22, 17, 5][nn], 
         evalOp[-17, -5, 22][nn], -evalOp[-5, -17, 22][nn]]/17, 
       Inactive[Plus][-evalOp[-22, 5, 17][nn], evalOp[-22, 17, 5][nn], 
         -evalOp[-17, -5, 22][nn], evalOp[-5, -17, 22][nn]]/5, 
       Inactive[Plus][evalOp[-21, 5, 16][nn], -evalOp[-21, 16, 5][nn], 
         evalOp[-16, -5, 21][nn], -evalOp[-5, -16, 21][nn]]/16, 
       Inactive[Plus][-evalOp[-21, 5, 16][nn], evalOp[-21, 16, 5][nn], 
         -evalOp[-16, -5, 21][nn], evalOp[-5, -16, 21][nn]]/5, 
       Inactive[Plus][evalOp[-20, 5, 15][nn], -evalOp[-20, 15, 5][nn], 
         evalOp[-15, -5, 20][nn], -evalOp[-5, -15, 20][nn]]/15, 
       Inactive[Plus][-evalOp[-20, 5, 15][nn], evalOp[-20, 15, 5][nn], 
         -evalOp[-15, -5, 20][nn], evalOp[-5, -15, 20][nn]]/5, 
       Inactive[Plus][evalOp[-19, 5, 14][nn], -evalOp[-19, 14, 5][nn], 
         evalOp[-14, -5, 19][nn], -evalOp[-5, -14, 19][nn]]/14, 
       Inactive[Plus][-evalOp[-19, 5, 14][nn], evalOp[-19, 14, 5][nn], 
         -evalOp[-14, -5, 19][nn], evalOp[-5, -14, 19][nn]]/5, 
       Inactive[Plus][evalOp[-18, 5, 13][nn], -evalOp[-18, 13, 5][nn], 
         evalOp[-13, -5, 18][nn], -evalOp[-5, -13, 18][nn]]/13, 
       Inactive[Plus][-evalOp[-18, 5, 13][nn], evalOp[-18, 13, 5][nn], 
         -evalOp[-13, -5, 18][nn], evalOp[-5, -13, 18][nn]]/5, 
       Inactive[Plus][evalOp[-17, 5, 12][nn], -evalOp[-17, 12, 5][nn], 
         evalOp[-12, -5, 17][nn], -evalOp[-5, -12, 17][nn]]/12, 
       Inactive[Plus][-evalOp[-17, 5, 12][nn], evalOp[-17, 12, 5][nn], 
         -evalOp[-12, -5, 17][nn], evalOp[-5, -12, 17][nn]]/5, 
       Inactive[Plus][evalOp[-16, 5, 11][nn], -evalOp[-16, 11, 5][nn], 
         evalOp[-11, -5, 16][nn], -evalOp[-5, -11, 16][nn]]/11, 
       Inactive[Plus][-evalOp[-16, 5, 11][nn], evalOp[-16, 11, 5][nn], 
         -evalOp[-11, -5, 16][nn], evalOp[-5, -11, 16][nn]]/5, 
       Inactive[Plus][evalOp[-15, 5, 10][nn], -evalOp[-15, 10, 5][nn], 
         evalOp[-10, -5, 15][nn], -evalOp[-5, -10, 15][nn]]/10, 
       Inactive[Plus][-evalOp[-15, 5, 10][nn], evalOp[-15, 10, 5][nn], 
         -evalOp[-10, -5, 15][nn], evalOp[-5, -10, 15][nn]]/5, 
       Inactive[Plus][evalOp[-14, 5, 9][nn], -evalOp[-14, 9, 5][nn], 
         evalOp[-9, -5, 14][nn], -evalOp[-5, -9, 14][nn]]/9, 
       Inactive[Plus][-evalOp[-14, 5, 9][nn], evalOp[-14, 9, 5][nn], 
         -evalOp[-9, -5, 14][nn], evalOp[-5, -9, 14][nn]]/5, 
       Inactive[Plus][evalOp[-13, 5, 8][nn], -evalOp[-13, 8, 5][nn], 
         evalOp[-8, -5, 13][nn], -evalOp[-5, -8, 13][nn]]/8, 
       Inactive[Plus][-evalOp[-13, 5, 8][nn], evalOp[-13, 8, 5][nn], 
         -evalOp[-8, -5, 13][nn], evalOp[-5, -8, 13][nn]]/5, 
       Inactive[Plus][evalOp[-12, 5, 7][nn], -evalOp[-12, 7, 5][nn], 
         evalOp[-7, -5, 12][nn], -evalOp[-5, -7, 12][nn]]/7, 
       Inactive[Plus][-evalOp[-12, 5, 7][nn], evalOp[-12, 7, 5][nn], 
         -evalOp[-7, -5, 12][nn], evalOp[-5, -7, 12][nn]]/5, 
       Inactive[Plus][evalOp[-11, 5, 6][nn], -evalOp[-11, 6, 5][nn], 
         evalOp[-6, -5, 11][nn], -evalOp[-5, -6, 11][nn]]/6, 
       Inactive[Plus][-evalOp[-11, 5, 6][nn], evalOp[-11, 6, 5][nn], 
         -evalOp[-6, -5, 11][nn], evalOp[-5, -6, 11][nn]]/5, 
       -evalOp[-5, -1, 6][nn], -evalOp[-5, 1, 4][nn], evalOp[-5, 4, 1][nn], 
       Inactive[Plus][evalOp[-24, 4, 20][nn], -evalOp[-24, 20, 4][nn], 
         evalOp[-20, -4, 24][nn], -evalOp[-4, -20, 24][nn]]/20, 
       Inactive[Plus][-evalOp[-24, 4, 20][nn], evalOp[-24, 20, 4][nn], 
         -evalOp[-20, -4, 24][nn], evalOp[-4, -20, 24][nn]]/4, 
       Inactive[Plus][evalOp[-23, 4, 19][nn], -evalOp[-23, 19, 4][nn], 
         evalOp[-19, -4, 23][nn], -evalOp[-4, -19, 23][nn]]/19, 
       Inactive[Plus][-evalOp[-23, 4, 19][nn], evalOp[-23, 19, 4][nn], 
         -evalOp[-19, -4, 23][nn], evalOp[-4, -19, 23][nn]]/4, 
       Inactive[Plus][evalOp[-22, 4, 18][nn], -evalOp[-22, 18, 4][nn], 
         evalOp[-18, -4, 22][nn], -evalOp[-4, -18, 22][nn]]/18, 
       Inactive[Plus][-evalOp[-22, 4, 18][nn], evalOp[-22, 18, 4][nn], 
         -evalOp[-18, -4, 22][nn], evalOp[-4, -18, 22][nn]]/4, 
       Inactive[Plus][evalOp[-21, 4, 17][nn], -evalOp[-21, 17, 4][nn], 
         evalOp[-17, -4, 21][nn], -evalOp[-4, -17, 21][nn]]/17, 
       Inactive[Plus][-evalOp[-21, 4, 17][nn], evalOp[-21, 17, 4][nn], 
         -evalOp[-17, -4, 21][nn], evalOp[-4, -17, 21][nn]]/4, 
       Inactive[Plus][evalOp[-20, 4, 16][nn], -evalOp[-20, 16, 4][nn], 
         evalOp[-16, -4, 20][nn], -evalOp[-4, -16, 20][nn]]/16, 
       Inactive[Plus][-evalOp[-20, 4, 16][nn], evalOp[-20, 16, 4][nn], 
         -evalOp[-16, -4, 20][nn], evalOp[-4, -16, 20][nn]]/4, 
       Inactive[Plus][evalOp[-19, 4, 15][nn], -evalOp[-19, 15, 4][nn], 
         evalOp[-15, -4, 19][nn], -evalOp[-4, -15, 19][nn]]/15, 
       Inactive[Plus][-evalOp[-19, 4, 15][nn], evalOp[-19, 15, 4][nn], 
         -evalOp[-15, -4, 19][nn], evalOp[-4, -15, 19][nn]]/4, 
       Inactive[Plus][evalOp[-18, 4, 14][nn], -evalOp[-18, 14, 4][nn], 
         evalOp[-14, -4, 18][nn], -evalOp[-4, -14, 18][nn]]/14, 
       Inactive[Plus][-evalOp[-18, 4, 14][nn], evalOp[-18, 14, 4][nn], 
         -evalOp[-14, -4, 18][nn], evalOp[-4, -14, 18][nn]]/4, 
       Inactive[Plus][evalOp[-17, 4, 13][nn], -evalOp[-17, 13, 4][nn], 
         evalOp[-13, -4, 17][nn], -evalOp[-4, -13, 17][nn]]/13, 
       Inactive[Plus][-evalOp[-17, 4, 13][nn], evalOp[-17, 13, 4][nn], 
         -evalOp[-13, -4, 17][nn], evalOp[-4, -13, 17][nn]]/4, 
       Inactive[Plus][evalOp[-16, 4, 12][nn], -evalOp[-16, 12, 4][nn], 
         evalOp[-12, -4, 16][nn], -evalOp[-4, -12, 16][nn]]/12, 
       Inactive[Plus][-evalOp[-16, 4, 12][nn], evalOp[-16, 12, 4][nn], 
         -evalOp[-12, -4, 16][nn], evalOp[-4, -12, 16][nn]]/4, 
       Inactive[Plus][evalOp[-15, 4, 11][nn], -evalOp[-15, 11, 4][nn], 
         evalOp[-11, -4, 15][nn], -evalOp[-4, -11, 15][nn]]/11, 
       Inactive[Plus][-evalOp[-15, 4, 11][nn], evalOp[-15, 11, 4][nn], 
         -evalOp[-11, -4, 15][nn], evalOp[-4, -11, 15][nn]]/4, 
       Inactive[Plus][evalOp[-14, 4, 10][nn], -evalOp[-14, 10, 4][nn], 
         evalOp[-10, -4, 14][nn], -evalOp[-4, -10, 14][nn]]/10, 
       Inactive[Plus][-evalOp[-14, 4, 10][nn], evalOp[-14, 10, 4][nn], 
         -evalOp[-10, -4, 14][nn], evalOp[-4, -10, 14][nn]]/4, 
       Inactive[Plus][evalOp[-13, 4, 9][nn], -evalOp[-13, 9, 4][nn], 
         evalOp[-9, -4, 13][nn], -evalOp[-4, -9, 13][nn]]/9, 
       Inactive[Plus][-evalOp[-13, 4, 9][nn], evalOp[-13, 9, 4][nn], 
         -evalOp[-9, -4, 13][nn], evalOp[-4, -9, 13][nn]]/4, 
       Inactive[Plus][evalOp[-12, 4, 8][nn], -evalOp[-12, 8, 4][nn], 
         evalOp[-8, -4, 12][nn], -evalOp[-4, -8, 12][nn]]/8, 
       Inactive[Plus][-evalOp[-12, 4, 8][nn], evalOp[-12, 8, 4][nn], 
         -evalOp[-8, -4, 12][nn], evalOp[-4, -8, 12][nn]]/4, 
       Inactive[Plus][evalOp[-11, 4, 7][nn], -evalOp[-11, 7, 4][nn], 
         evalOp[-7, -4, 11][nn], -evalOp[-4, -7, 11][nn]]/7, 
       Inactive[Plus][-evalOp[-11, 4, 7][nn], evalOp[-11, 7, 4][nn], 
         -evalOp[-7, -4, 11][nn], evalOp[-4, -7, 11][nn]]/4, 
       Inactive[Plus][evalOp[-10, 4, 6][nn], -evalOp[-10, 6, 4][nn], 
         evalOp[-6, -4, 10][nn], -evalOp[-4, -6, 10][nn]]/6, 
       Inactive[Plus][-evalOp[-10, 4, 6][nn], evalOp[-10, 6, 4][nn], 
         -evalOp[-6, -4, 10][nn], evalOp[-4, -6, 10][nn]]/4, 
       Inactive[Plus][evalOp[-9, 4, 5][nn], -evalOp[-9, 5, 4][nn], 
         evalOp[-5, -4, 9][nn], -evalOp[-4, -5, 9][nn]]/5, 
       Inactive[Plus][-evalOp[-9, 4, 5][nn], evalOp[-9, 5, 4][nn], 
         -evalOp[-5, -4, 9][nn], evalOp[-4, -5, 9][nn]]/4, 
       -evalOp[-4, -1, 5][nn], -evalOp[-4, 1, 3][nn], evalOp[-4, 3, 1][nn], 
       Inactive[Plus][evalOp[-23, 3, 20][nn], -evalOp[-23, 20, 3][nn], 
         evalOp[-20, -3, 23][nn], -evalOp[-3, -20, 23][nn]]/20, 
       Inactive[Plus][-evalOp[-23, 3, 20][nn], evalOp[-23, 20, 3][nn], 
         -evalOp[-20, -3, 23][nn], evalOp[-3, -20, 23][nn]]/3, 
       Inactive[Plus][evalOp[-22, 3, 19][nn], -evalOp[-22, 19, 3][nn], 
         evalOp[-19, -3, 22][nn], -evalOp[-3, -19, 22][nn]]/19, 
       Inactive[Plus][-evalOp[-22, 3, 19][nn], evalOp[-22, 19, 3][nn], 
         -evalOp[-19, -3, 22][nn], evalOp[-3, -19, 22][nn]]/3, 
       Inactive[Plus][evalOp[-21, 3, 18][nn], -evalOp[-21, 18, 3][nn], 
         evalOp[-18, -3, 21][nn], -evalOp[-3, -18, 21][nn]]/18, 
       Inactive[Plus][-evalOp[-21, 3, 18][nn], evalOp[-21, 18, 3][nn], 
         -evalOp[-18, -3, 21][nn], evalOp[-3, -18, 21][nn]]/3, 
       Inactive[Plus][evalOp[-20, 3, 17][nn], -evalOp[-20, 17, 3][nn], 
         evalOp[-17, -3, 20][nn], -evalOp[-3, -17, 20][nn]]/17, 
       Inactive[Plus][-evalOp[-20, 3, 17][nn], evalOp[-20, 17, 3][nn], 
         -evalOp[-17, -3, 20][nn], evalOp[-3, -17, 20][nn]]/3, 
       Inactive[Plus][evalOp[-19, 3, 16][nn], -evalOp[-19, 16, 3][nn], 
         evalOp[-16, -3, 19][nn], -evalOp[-3, -16, 19][nn]]/16, 
       Inactive[Plus][-evalOp[-19, 3, 16][nn], evalOp[-19, 16, 3][nn], 
         -evalOp[-16, -3, 19][nn], evalOp[-3, -16, 19][nn]]/3, 
       Inactive[Plus][evalOp[-18, 3, 15][nn], -evalOp[-18, 15, 3][nn], 
         evalOp[-15, -3, 18][nn], -evalOp[-3, -15, 18][nn]]/15, 
       Inactive[Plus][-evalOp[-18, 3, 15][nn], evalOp[-18, 15, 3][nn], 
         -evalOp[-15, -3, 18][nn], evalOp[-3, -15, 18][nn]]/3, 
       Inactive[Plus][evalOp[-17, 3, 14][nn], -evalOp[-17, 14, 3][nn], 
         evalOp[-14, -3, 17][nn], -evalOp[-3, -14, 17][nn]]/14, 
       Inactive[Plus][-evalOp[-17, 3, 14][nn], evalOp[-17, 14, 3][nn], 
         -evalOp[-14, -3, 17][nn], evalOp[-3, -14, 17][nn]]/3, 
       Inactive[Plus][evalOp[-16, 3, 13][nn], -evalOp[-16, 13, 3][nn], 
         evalOp[-13, -3, 16][nn], -evalOp[-3, -13, 16][nn]]/13, 
       Inactive[Plus][-evalOp[-16, 3, 13][nn], evalOp[-16, 13, 3][nn], 
         -evalOp[-13, -3, 16][nn], evalOp[-3, -13, 16][nn]]/3, 
       Inactive[Plus][evalOp[-15, 3, 12][nn], -evalOp[-15, 12, 3][nn], 
         evalOp[-12, -3, 15][nn], -evalOp[-3, -12, 15][nn]]/12, 
       Inactive[Plus][-evalOp[-15, 3, 12][nn], evalOp[-15, 12, 3][nn], 
         -evalOp[-12, -3, 15][nn], evalOp[-3, -12, 15][nn]]/3, 
       Inactive[Plus][evalOp[-14, 3, 11][nn], -evalOp[-14, 11, 3][nn], 
         evalOp[-11, -3, 14][nn], -evalOp[-3, -11, 14][nn]]/11, 
       Inactive[Plus][-evalOp[-14, 3, 11][nn], evalOp[-14, 11, 3][nn], 
         -evalOp[-11, -3, 14][nn], evalOp[-3, -11, 14][nn]]/3, 
       Inactive[Plus][evalOp[-13, 3, 10][nn], -evalOp[-13, 10, 3][nn], 
         evalOp[-10, -3, 13][nn], -evalOp[-3, -10, 13][nn]]/10, 
       Inactive[Plus][-evalOp[-13, 3, 10][nn], evalOp[-13, 10, 3][nn], 
         -evalOp[-10, -3, 13][nn], evalOp[-3, -10, 13][nn]]/3, 
       Inactive[Plus][evalOp[-12, 3, 9][nn], -evalOp[-12, 9, 3][nn], 
         evalOp[-9, -3, 12][nn], -evalOp[-3, -9, 12][nn]]/9, 
       Inactive[Plus][-evalOp[-12, 3, 9][nn], evalOp[-12, 9, 3][nn], 
         -evalOp[-9, -3, 12][nn], evalOp[-3, -9, 12][nn]]/3, 
       Inactive[Plus][evalOp[-11, 3, 8][nn], -evalOp[-11, 8, 3][nn], 
         evalOp[-8, -3, 11][nn], -evalOp[-3, -8, 11][nn]]/8, 
       Inactive[Plus][-evalOp[-11, 3, 8][nn], evalOp[-11, 8, 3][nn], 
         -evalOp[-8, -3, 11][nn], evalOp[-3, -8, 11][nn]]/3, 
       Inactive[Plus][evalOp[-10, 3, 7][nn], -evalOp[-10, 7, 3][nn], 
         evalOp[-7, -3, 10][nn], -evalOp[-3, -7, 10][nn]]/7, 
       Inactive[Plus][-evalOp[-10, 3, 7][nn], evalOp[-10, 7, 3][nn], 
         -evalOp[-7, -3, 10][nn], evalOp[-3, -7, 10][nn]]/3, 
       Inactive[Plus][evalOp[-9, 3, 6][nn], -evalOp[-9, 6, 3][nn], 
         evalOp[-6, -3, 9][nn], -evalOp[-3, -6, 9][nn]]/6, 
       Inactive[Plus][-evalOp[-9, 3, 6][nn], evalOp[-9, 6, 3][nn], 
         -evalOp[-6, -3, 9][nn], evalOp[-3, -6, 9][nn]]/3, 
       Inactive[Plus][evalOp[-8, 3, 5][nn], -evalOp[-8, 5, 3][nn], 
         evalOp[-5, -3, 8][nn], -evalOp[-3, -5, 8][nn]]/5, 
       Inactive[Plus][-evalOp[-8, 3, 5][nn], evalOp[-8, 5, 3][nn], 
         -evalOp[-5, -3, 8][nn], evalOp[-3, -5, 8][nn]]/3, 
       Inactive[Plus][evalOp[-7, 3, 4][nn], -evalOp[-7, 4, 3][nn], 
         evalOp[-4, -3, 7][nn], -evalOp[-3, -4, 7][nn]]/4, 
       Inactive[Plus][-evalOp[-7, 3, 4][nn], evalOp[-7, 4, 3][nn], 
         -evalOp[-4, -3, 7][nn], evalOp[-3, -4, 7][nn]]/3, 
       -evalOp[-3, -1, 4][nn], -evalOp[-3, 1, 2][nn], evalOp[-3, 2, 1][nn], 
       Inactive[Plus][evalOp[-22, 2, 20][nn], -evalOp[-22, 20, 2][nn], 
         evalOp[-20, -2, 22][nn], -evalOp[-2, -20, 22][nn]]/20, 
       Inactive[Plus][-evalOp[-22, 2, 20][nn], evalOp[-22, 20, 2][nn], 
         -evalOp[-20, -2, 22][nn], evalOp[-2, -20, 22][nn]]/2, 
       Inactive[Plus][evalOp[-21, 2, 19][nn], -evalOp[-21, 19, 2][nn], 
         evalOp[-19, -2, 21][nn], -evalOp[-2, -19, 21][nn]]/19, 
       Inactive[Plus][-evalOp[-21, 2, 19][nn], evalOp[-21, 19, 2][nn], 
         -evalOp[-19, -2, 21][nn], evalOp[-2, -19, 21][nn]]/2, 
       Inactive[Plus][evalOp[-20, 2, 18][nn], -evalOp[-20, 18, 2][nn], 
         evalOp[-18, -2, 20][nn], -evalOp[-2, -18, 20][nn]]/18, 
       Inactive[Plus][-evalOp[-20, 2, 18][nn], evalOp[-20, 18, 2][nn], 
         -evalOp[-18, -2, 20][nn], evalOp[-2, -18, 20][nn]]/2, 
       Inactive[Plus][evalOp[-19, 2, 17][nn], -evalOp[-19, 17, 2][nn], 
         evalOp[-17, -2, 19][nn], -evalOp[-2, -17, 19][nn]]/17, 
       Inactive[Plus][-evalOp[-19, 2, 17][nn], evalOp[-19, 17, 2][nn], 
         -evalOp[-17, -2, 19][nn], evalOp[-2, -17, 19][nn]]/2, 
       Inactive[Plus][evalOp[-18, 2, 16][nn], -evalOp[-18, 16, 2][nn], 
         evalOp[-16, -2, 18][nn], -evalOp[-2, -16, 18][nn]]/16, 
       Inactive[Plus][-evalOp[-18, 2, 16][nn], evalOp[-18, 16, 2][nn], 
         -evalOp[-16, -2, 18][nn], evalOp[-2, -16, 18][nn]]/2, 
       Inactive[Plus][evalOp[-17, 2, 15][nn], -evalOp[-17, 15, 2][nn], 
         evalOp[-15, -2, 17][nn], -evalOp[-2, -15, 17][nn]]/15, 
       Inactive[Plus][-evalOp[-17, 2, 15][nn], evalOp[-17, 15, 2][nn], 
         -evalOp[-15, -2, 17][nn], evalOp[-2, -15, 17][nn]]/2, 
       Inactive[Plus][evalOp[-16, 2, 14][nn], -evalOp[-16, 14, 2][nn], 
         evalOp[-14, -2, 16][nn], -evalOp[-2, -14, 16][nn]]/14, 
       Inactive[Plus][-evalOp[-16, 2, 14][nn], evalOp[-16, 14, 2][nn], 
         -evalOp[-14, -2, 16][nn], evalOp[-2, -14, 16][nn]]/2, 
       Inactive[Plus][evalOp[-15, 2, 13][nn], -evalOp[-15, 13, 2][nn], 
         evalOp[-13, -2, 15][nn], -evalOp[-2, -13, 15][nn]]/13, 
       Inactive[Plus][-evalOp[-15, 2, 13][nn], evalOp[-15, 13, 2][nn], 
         -evalOp[-13, -2, 15][nn], evalOp[-2, -13, 15][nn]]/2, 
       Inactive[Plus][evalOp[-14, 2, 12][nn], -evalOp[-14, 12, 2][nn], 
         evalOp[-12, -2, 14][nn], -evalOp[-2, -12, 14][nn]]/12, 
       Inactive[Plus][-evalOp[-14, 2, 12][nn], evalOp[-14, 12, 2][nn], 
         -evalOp[-12, -2, 14][nn], evalOp[-2, -12, 14][nn]]/2, 
       Inactive[Plus][evalOp[-13, 2, 11][nn], -evalOp[-13, 11, 2][nn], 
         evalOp[-11, -2, 13][nn], -evalOp[-2, -11, 13][nn]]/11, 
       Inactive[Plus][-evalOp[-13, 2, 11][nn], evalOp[-13, 11, 2][nn], 
         -evalOp[-11, -2, 13][nn], evalOp[-2, -11, 13][nn]]/2, 
       Inactive[Plus][evalOp[-12, 2, 10][nn], -evalOp[-12, 10, 2][nn], 
         evalOp[-10, -2, 12][nn], -evalOp[-2, -10, 12][nn]]/10, 
       Inactive[Plus][-evalOp[-12, 2, 10][nn], evalOp[-12, 10, 2][nn], 
         -evalOp[-10, -2, 12][nn], evalOp[-2, -10, 12][nn]]/2, 
       Inactive[Plus][evalOp[-11, 2, 9][nn], -evalOp[-11, 9, 2][nn], 
         evalOp[-9, -2, 11][nn], -evalOp[-2, -9, 11][nn]]/9, 
       Inactive[Plus][-evalOp[-11, 2, 9][nn], evalOp[-11, 9, 2][nn], 
         -evalOp[-9, -2, 11][nn], evalOp[-2, -9, 11][nn]]/2, 
       Inactive[Plus][evalOp[-10, 2, 8][nn], -evalOp[-10, 8, 2][nn], 
         evalOp[-8, -2, 10][nn], -evalOp[-2, -8, 10][nn]]/8, 
       Inactive[Plus][-evalOp[-10, 2, 8][nn], evalOp[-10, 8, 2][nn], 
         -evalOp[-8, -2, 10][nn], evalOp[-2, -8, 10][nn]]/2, 
       Inactive[Plus][evalOp[-9, 2, 7][nn], -evalOp[-9, 7, 2][nn], 
         evalOp[-7, -2, 9][nn], -evalOp[-2, -7, 9][nn]]/7, 
       Inactive[Plus][-evalOp[-9, 2, 7][nn], evalOp[-9, 7, 2][nn], 
         -evalOp[-7, -2, 9][nn], evalOp[-2, -7, 9][nn]]/2, 
       Inactive[Plus][evalOp[-8, 2, 6][nn], -evalOp[-8, 6, 2][nn], 
         evalOp[-6, -2, 8][nn], -evalOp[-2, -6, 8][nn]]/6, 
       Inactive[Plus][-evalOp[-8, 2, 6][nn], evalOp[-8, 6, 2][nn], 
         -evalOp[-6, -2, 8][nn], evalOp[-2, -6, 8][nn]]/2, 
       Inactive[Plus][evalOp[-7, 2, 5][nn], -evalOp[-7, 5, 2][nn], 
         evalOp[-5, -2, 7][nn], -evalOp[-2, -5, 7][nn]]/5, 
       Inactive[Plus][-evalOp[-7, 2, 5][nn], evalOp[-7, 5, 2][nn], 
         -evalOp[-5, -2, 7][nn], evalOp[-2, -5, 7][nn]]/2, 
       Inactive[Plus][evalOp[-6, 2, 4][nn], -evalOp[-6, 4, 2][nn], 
         evalOp[-4, -2, 6][nn], -evalOp[-2, -4, 6][nn]]/4, 
       Inactive[Plus][-evalOp[-6, 2, 4][nn], evalOp[-6, 4, 2][nn], 
         -evalOp[-4, -2, 6][nn], evalOp[-2, -4, 6][nn]]/2, 
       Inactive[Plus][evalOp[-5, 2, 3][nn], -evalOp[-5, 3, 2][nn], 
         evalOp[-3, -2, 5][nn], -evalOp[-2, -3, 5][nn]]/3, 
       Inactive[Plus][-evalOp[-5, 2, 3][nn], evalOp[-5, 3, 2][nn], 
         -evalOp[-3, -2, 5][nn], evalOp[-2, -3, 5][nn]]/2, 
       -evalOp[-2, -1, 3][nn], Inactive[Plus][evalOp[-21, 1, 20][nn], 
         -evalOp[-21, 20, 1][nn], evalOp[-20, -1, 21][nn], 
         -evalOp[-1, -20, 21][nn]]/20, evalOp[-1, -20, 21][nn], 
       Inactive[Plus][evalOp[-20, 1, 19][nn], -evalOp[-20, 19, 1][nn], 
         evalOp[-19, -1, 20][nn], -evalOp[-1, -19, 20][nn]]/19, 
       evalOp[-1, -19, 20][nn], Inactive[Plus][evalOp[-19, 1, 18][nn], 
         -evalOp[-19, 18, 1][nn], evalOp[-18, -1, 19][nn], 
         -evalOp[-1, -18, 19][nn]]/18, evalOp[-1, -18, 19][nn], 
       Inactive[Plus][evalOp[-18, 1, 17][nn], -evalOp[-18, 17, 1][nn], 
         evalOp[-17, -1, 18][nn], -evalOp[-1, -17, 18][nn]]/17, 
       evalOp[-1, -17, 18][nn], Inactive[Plus][evalOp[-17, 1, 16][nn], 
         -evalOp[-17, 16, 1][nn], evalOp[-16, -1, 17][nn], 
         -evalOp[-1, -16, 17][nn]]/16, evalOp[-1, -16, 17][nn], 
       Inactive[Plus][evalOp[-16, 1, 15][nn], -evalOp[-16, 15, 1][nn], 
         evalOp[-15, -1, 16][nn], -evalOp[-1, -15, 16][nn]]/15, 
       evalOp[-1, -15, 16][nn], Inactive[Plus][evalOp[-15, 1, 14][nn], 
         -evalOp[-15, 14, 1][nn], evalOp[-14, -1, 15][nn], 
         -evalOp[-1, -14, 15][nn]]/14, evalOp[-1, -14, 15][nn], 
       Inactive[Plus][evalOp[-14, 1, 13][nn], -evalOp[-14, 13, 1][nn], 
         evalOp[-13, -1, 14][nn], -evalOp[-1, -13, 14][nn]]/13, 
       evalOp[-1, -13, 14][nn], Inactive[Plus][evalOp[-13, 1, 12][nn], 
         -evalOp[-13, 12, 1][nn], evalOp[-12, -1, 13][nn], 
         -evalOp[-1, -12, 13][nn]]/12, evalOp[-1, -12, 13][nn], 
       Inactive[Plus][evalOp[-12, 1, 11][nn], -evalOp[-12, 11, 1][nn], 
         evalOp[-11, -1, 12][nn], -evalOp[-1, -11, 12][nn]]/11, 
       evalOp[-1, -11, 12][nn], Inactive[Plus][evalOp[-11, 1, 10][nn], 
         -evalOp[-11, 10, 1][nn], evalOp[-10, -1, 11][nn], 
         -evalOp[-1, -10, 11][nn]]/10, evalOp[-1, -10, 11][nn], 
       Inactive[Plus][evalOp[-10, 1, 9][nn], -evalOp[-10, 9, 1][nn], 
         evalOp[-9, -1, 10][nn], -evalOp[-1, -9, 10][nn]]/9, 
       evalOp[-1, -9, 10][nn], Inactive[Plus][evalOp[-9, 1, 8][nn], 
         -evalOp[-9, 8, 1][nn], evalOp[-8, -1, 9][nn], 
         -evalOp[-1, -8, 9][nn]]/8, evalOp[-1, -8, 9][nn], 
       Inactive[Plus][evalOp[-8, 1, 7][nn], -evalOp[-8, 7, 1][nn], 
         evalOp[-7, -1, 8][nn], -evalOp[-1, -7, 8][nn]]/7, 
       evalOp[-1, -7, 8][nn], Inactive[Plus][evalOp[-7, 1, 6][nn], 
         -evalOp[-7, 6, 1][nn], evalOp[-6, -1, 7][nn], 
         -evalOp[-1, -6, 7][nn]]/6, evalOp[-1, -6, 7][nn], 
       Inactive[Plus][evalOp[-6, 1, 5][nn], -evalOp[-6, 5, 1][nn], 
         evalOp[-5, -1, 6][nn], -evalOp[-1, -5, 6][nn]]/5, 
       evalOp[-1, -5, 6][nn], Inactive[Plus][evalOp[-5, 1, 4][nn], 
         -evalOp[-5, 4, 1][nn], evalOp[-4, -1, 5][nn], 
         -evalOp[-1, -4, 5][nn]]/4, evalOp[-1, -4, 5][nn], 
       Inactive[Plus][evalOp[-4, 1, 3][nn], -evalOp[-4, 3, 1][nn], 
         evalOp[-3, -1, 4][nn], -evalOp[-1, -3, 4][nn]]/3, 
       evalOp[-1, -3, 4][nn], Inactive[Plus][evalOp[-3, 1, 2][nn], 
         -evalOp[-3, 2, 1][nn], evalOp[-2, -1, 3][nn], 
         -evalOp[-1, -2, 3][nn]]/2, evalOp[-1, -2, 3][nn]])/(2*Sqrt[2])
 
$10factor = Sqrt[T]/(2*Sqrt[2])
 
$11 = (Sqrt[T]*Inactive[Plus][evalOp[-21, 1, 20][nn], 
       -evalOp[-21, 20, 1][nn], evalOp[-20, -1, 21][nn], 
       evalOp[-20, 1, 19][nn], -evalOp[-20, 19, 1][nn], 
       Inactive[Plus][evalOp[-39, 19, 20][nn], -evalOp[-39, 20, 19][nn], 
         evalOp[-20, -19, 39][nn], -evalOp[-19, -20, 39][nn]]/19, 
       Inactive[Plus][-evalOp[-39, 19, 20][nn], evalOp[-39, 20, 19][nn], 
         -evalOp[-20, -19, 39][nn], evalOp[-19, -20, 39][nn]]/20, 
       evalOp[-19, -1, 20][nn], evalOp[-19, 1, 18][nn], 
       -evalOp[-19, 18, 1][nn], Inactive[Plus][evalOp[-38, 18, 20][nn], 
         -evalOp[-38, 20, 18][nn], evalOp[-20, -18, 38][nn], 
         -evalOp[-18, -20, 38][nn]]/18, 
       Inactive[Plus][-evalOp[-38, 18, 20][nn], evalOp[-38, 20, 18][nn], 
         -evalOp[-20, -18, 38][nn], evalOp[-18, -20, 38][nn]]/20, 
       Inactive[Plus][evalOp[-37, 18, 19][nn], -evalOp[-37, 19, 18][nn], 
         evalOp[-19, -18, 37][nn], -evalOp[-18, -19, 37][nn]]/18, 
       Inactive[Plus][-evalOp[-37, 18, 19][nn], evalOp[-37, 19, 18][nn], 
         -evalOp[-19, -18, 37][nn], evalOp[-18, -19, 37][nn]]/19, 
       evalOp[-18, -1, 19][nn], evalOp[-18, 1, 17][nn], 
       -evalOp[-18, 17, 1][nn], Inactive[Plus][evalOp[-37, 17, 20][nn], 
         -evalOp[-37, 20, 17][nn], evalOp[-20, -17, 37][nn], 
         -evalOp[-17, -20, 37][nn]]/17, 
       Inactive[Plus][-evalOp[-37, 17, 20][nn], evalOp[-37, 20, 17][nn], 
         -evalOp[-20, -17, 37][nn], evalOp[-17, -20, 37][nn]]/20, 
       Inactive[Plus][evalOp[-36, 17, 19][nn], -evalOp[-36, 19, 17][nn], 
         evalOp[-19, -17, 36][nn], -evalOp[-17, -19, 36][nn]]/17, 
       Inactive[Plus][-evalOp[-36, 17, 19][nn], evalOp[-36, 19, 17][nn], 
         -evalOp[-19, -17, 36][nn], evalOp[-17, -19, 36][nn]]/19, 
       Inactive[Plus][evalOp[-35, 17, 18][nn], -evalOp[-35, 18, 17][nn], 
         evalOp[-18, -17, 35][nn], -evalOp[-17, -18, 35][nn]]/17, 
       Inactive[Plus][-evalOp[-35, 17, 18][nn], evalOp[-35, 18, 17][nn], 
         -evalOp[-18, -17, 35][nn], evalOp[-17, -18, 35][nn]]/18, 
       evalOp[-17, -1, 18][nn], evalOp[-17, 1, 16][nn], 
       -evalOp[-17, 16, 1][nn], Inactive[Plus][evalOp[-36, 16, 20][nn], 
         -evalOp[-36, 20, 16][nn], evalOp[-20, -16, 36][nn], 
         -evalOp[-16, -20, 36][nn]]/16, 
       Inactive[Plus][-evalOp[-36, 16, 20][nn], evalOp[-36, 20, 16][nn], 
         -evalOp[-20, -16, 36][nn], evalOp[-16, -20, 36][nn]]/20, 
       Inactive[Plus][evalOp[-35, 16, 19][nn], -evalOp[-35, 19, 16][nn], 
         evalOp[-19, -16, 35][nn], -evalOp[-16, -19, 35][nn]]/16, 
       Inactive[Plus][-evalOp[-35, 16, 19][nn], evalOp[-35, 19, 16][nn], 
         -evalOp[-19, -16, 35][nn], evalOp[-16, -19, 35][nn]]/19, 
       Inactive[Plus][evalOp[-34, 16, 18][nn], -evalOp[-34, 18, 16][nn], 
         evalOp[-18, -16, 34][nn], -evalOp[-16, -18, 34][nn]]/16, 
       Inactive[Plus][-evalOp[-34, 16, 18][nn], evalOp[-34, 18, 16][nn], 
         -evalOp[-18, -16, 34][nn], evalOp[-16, -18, 34][nn]]/18, 
       Inactive[Plus][evalOp[-33, 16, 17][nn], -evalOp[-33, 17, 16][nn], 
         evalOp[-17, -16, 33][nn], -evalOp[-16, -17, 33][nn]]/16, 
       Inactive[Plus][-evalOp[-33, 16, 17][nn], evalOp[-33, 17, 16][nn], 
         -evalOp[-17, -16, 33][nn], evalOp[-16, -17, 33][nn]]/17, 
       evalOp[-16, -1, 17][nn], evalOp[-16, 1, 15][nn], 
       -evalOp[-16, 15, 1][nn], Inactive[Plus][evalOp[-35, 15, 20][nn], 
         -evalOp[-35, 20, 15][nn], evalOp[-20, -15, 35][nn], 
         -evalOp[-15, -20, 35][nn]]/15, 
       Inactive[Plus][-evalOp[-35, 15, 20][nn], evalOp[-35, 20, 15][nn], 
         -evalOp[-20, -15, 35][nn], evalOp[-15, -20, 35][nn]]/20, 
       Inactive[Plus][evalOp[-34, 15, 19][nn], -evalOp[-34, 19, 15][nn], 
         evalOp[-19, -15, 34][nn], -evalOp[-15, -19, 34][nn]]/15, 
       Inactive[Plus][-evalOp[-34, 15, 19][nn], evalOp[-34, 19, 15][nn], 
         -evalOp[-19, -15, 34][nn], evalOp[-15, -19, 34][nn]]/19, 
       Inactive[Plus][evalOp[-33, 15, 18][nn], -evalOp[-33, 18, 15][nn], 
         evalOp[-18, -15, 33][nn], -evalOp[-15, -18, 33][nn]]/15, 
       Inactive[Plus][-evalOp[-33, 15, 18][nn], evalOp[-33, 18, 15][nn], 
         -evalOp[-18, -15, 33][nn], evalOp[-15, -18, 33][nn]]/18, 
       Inactive[Plus][evalOp[-32, 15, 17][nn], -evalOp[-32, 17, 15][nn], 
         evalOp[-17, -15, 32][nn], -evalOp[-15, -17, 32][nn]]/15, 
       Inactive[Plus][-evalOp[-32, 15, 17][nn], evalOp[-32, 17, 15][nn], 
         -evalOp[-17, -15, 32][nn], evalOp[-15, -17, 32][nn]]/17, 
       Inactive[Plus][evalOp[-31, 15, 16][nn], -evalOp[-31, 16, 15][nn], 
         evalOp[-16, -15, 31][nn], -evalOp[-15, -16, 31][nn]]/15, 
       Inactive[Plus][-evalOp[-31, 15, 16][nn], evalOp[-31, 16, 15][nn], 
         -evalOp[-16, -15, 31][nn], evalOp[-15, -16, 31][nn]]/16, 
       evalOp[-15, -1, 16][nn], evalOp[-15, 1, 14][nn], 
       -evalOp[-15, 14, 1][nn], Inactive[Plus][evalOp[-34, 14, 20][nn], 
         -evalOp[-34, 20, 14][nn], evalOp[-20, -14, 34][nn], 
         -evalOp[-14, -20, 34][nn]]/14, 
       Inactive[Plus][-evalOp[-34, 14, 20][nn], evalOp[-34, 20, 14][nn], 
         -evalOp[-20, -14, 34][nn], evalOp[-14, -20, 34][nn]]/20, 
       Inactive[Plus][evalOp[-33, 14, 19][nn], -evalOp[-33, 19, 14][nn], 
         evalOp[-19, -14, 33][nn], -evalOp[-14, -19, 33][nn]]/14, 
       Inactive[Plus][-evalOp[-33, 14, 19][nn], evalOp[-33, 19, 14][nn], 
         -evalOp[-19, -14, 33][nn], evalOp[-14, -19, 33][nn]]/19, 
       Inactive[Plus][evalOp[-32, 14, 18][nn], -evalOp[-32, 18, 14][nn], 
         evalOp[-18, -14, 32][nn], -evalOp[-14, -18, 32][nn]]/14, 
       Inactive[Plus][-evalOp[-32, 14, 18][nn], evalOp[-32, 18, 14][nn], 
         -evalOp[-18, -14, 32][nn], evalOp[-14, -18, 32][nn]]/18, 
       Inactive[Plus][evalOp[-31, 14, 17][nn], -evalOp[-31, 17, 14][nn], 
         evalOp[-17, -14, 31][nn], -evalOp[-14, -17, 31][nn]]/14, 
       Inactive[Plus][-evalOp[-31, 14, 17][nn], evalOp[-31, 17, 14][nn], 
         -evalOp[-17, -14, 31][nn], evalOp[-14, -17, 31][nn]]/17, 
       Inactive[Plus][evalOp[-30, 14, 16][nn], -evalOp[-30, 16, 14][nn], 
         evalOp[-16, -14, 30][nn], -evalOp[-14, -16, 30][nn]]/14, 
       Inactive[Plus][-evalOp[-30, 14, 16][nn], evalOp[-30, 16, 14][nn], 
         -evalOp[-16, -14, 30][nn], evalOp[-14, -16, 30][nn]]/16, 
       Inactive[Plus][evalOp[-29, 14, 15][nn], -evalOp[-29, 15, 14][nn], 
         evalOp[-15, -14, 29][nn], -evalOp[-14, -15, 29][nn]]/14, 
       Inactive[Plus][-evalOp[-29, 14, 15][nn], evalOp[-29, 15, 14][nn], 
         -evalOp[-15, -14, 29][nn], evalOp[-14, -15, 29][nn]]/15, 
       evalOp[-14, -1, 15][nn], evalOp[-14, 1, 13][nn], 
       -evalOp[-14, 13, 1][nn], Inactive[Plus][evalOp[-33, 13, 20][nn], 
         -evalOp[-33, 20, 13][nn], evalOp[-20, -13, 33][nn], 
         -evalOp[-13, -20, 33][nn]]/13, 
       Inactive[Plus][-evalOp[-33, 13, 20][nn], evalOp[-33, 20, 13][nn], 
         -evalOp[-20, -13, 33][nn], evalOp[-13, -20, 33][nn]]/20, 
       Inactive[Plus][evalOp[-32, 13, 19][nn], -evalOp[-32, 19, 13][nn], 
         evalOp[-19, -13, 32][nn], -evalOp[-13, -19, 32][nn]]/13, 
       Inactive[Plus][-evalOp[-32, 13, 19][nn], evalOp[-32, 19, 13][nn], 
         -evalOp[-19, -13, 32][nn], evalOp[-13, -19, 32][nn]]/19, 
       Inactive[Plus][evalOp[-31, 13, 18][nn], -evalOp[-31, 18, 13][nn], 
         evalOp[-18, -13, 31][nn], -evalOp[-13, -18, 31][nn]]/13, 
       Inactive[Plus][-evalOp[-31, 13, 18][nn], evalOp[-31, 18, 13][nn], 
         -evalOp[-18, -13, 31][nn], evalOp[-13, -18, 31][nn]]/18, 
       Inactive[Plus][evalOp[-30, 13, 17][nn], -evalOp[-30, 17, 13][nn], 
         evalOp[-17, -13, 30][nn], -evalOp[-13, -17, 30][nn]]/13, 
       Inactive[Plus][-evalOp[-30, 13, 17][nn], evalOp[-30, 17, 13][nn], 
         -evalOp[-17, -13, 30][nn], evalOp[-13, -17, 30][nn]]/17, 
       Inactive[Plus][evalOp[-29, 13, 16][nn], -evalOp[-29, 16, 13][nn], 
         evalOp[-16, -13, 29][nn], -evalOp[-13, -16, 29][nn]]/13, 
       Inactive[Plus][-evalOp[-29, 13, 16][nn], evalOp[-29, 16, 13][nn], 
         -evalOp[-16, -13, 29][nn], evalOp[-13, -16, 29][nn]]/16, 
       Inactive[Plus][evalOp[-28, 13, 15][nn], -evalOp[-28, 15, 13][nn], 
         evalOp[-15, -13, 28][nn], -evalOp[-13, -15, 28][nn]]/13, 
       Inactive[Plus][-evalOp[-28, 13, 15][nn], evalOp[-28, 15, 13][nn], 
         -evalOp[-15, -13, 28][nn], evalOp[-13, -15, 28][nn]]/15, 
       Inactive[Plus][evalOp[-27, 13, 14][nn], -evalOp[-27, 14, 13][nn], 
         evalOp[-14, -13, 27][nn], -evalOp[-13, -14, 27][nn]]/13, 
       Inactive[Plus][-evalOp[-27, 13, 14][nn], evalOp[-27, 14, 13][nn], 
         -evalOp[-14, -13, 27][nn], evalOp[-13, -14, 27][nn]]/14, 
       evalOp[-13, -1, 14][nn], evalOp[-13, 1, 12][nn], 
       -evalOp[-13, 12, 1][nn], Inactive[Plus][evalOp[-32, 12, 20][nn], 
         -evalOp[-32, 20, 12][nn], evalOp[-20, -12, 32][nn], 
         -evalOp[-12, -20, 32][nn]]/12, 
       Inactive[Plus][-evalOp[-32, 12, 20][nn], evalOp[-32, 20, 12][nn], 
         -evalOp[-20, -12, 32][nn], evalOp[-12, -20, 32][nn]]/20, 
       Inactive[Plus][evalOp[-31, 12, 19][nn], -evalOp[-31, 19, 12][nn], 
         evalOp[-19, -12, 31][nn], -evalOp[-12, -19, 31][nn]]/12, 
       Inactive[Plus][-evalOp[-31, 12, 19][nn], evalOp[-31, 19, 12][nn], 
         -evalOp[-19, -12, 31][nn], evalOp[-12, -19, 31][nn]]/19, 
       Inactive[Plus][evalOp[-30, 12, 18][nn], -evalOp[-30, 18, 12][nn], 
         evalOp[-18, -12, 30][nn], -evalOp[-12, -18, 30][nn]]/12, 
       Inactive[Plus][-evalOp[-30, 12, 18][nn], evalOp[-30, 18, 12][nn], 
         -evalOp[-18, -12, 30][nn], evalOp[-12, -18, 30][nn]]/18, 
       Inactive[Plus][evalOp[-29, 12, 17][nn], -evalOp[-29, 17, 12][nn], 
         evalOp[-17, -12, 29][nn], -evalOp[-12, -17, 29][nn]]/12, 
       Inactive[Plus][-evalOp[-29, 12, 17][nn], evalOp[-29, 17, 12][nn], 
         -evalOp[-17, -12, 29][nn], evalOp[-12, -17, 29][nn]]/17, 
       Inactive[Plus][evalOp[-28, 12, 16][nn], -evalOp[-28, 16, 12][nn], 
         evalOp[-16, -12, 28][nn], -evalOp[-12, -16, 28][nn]]/12, 
       Inactive[Plus][-evalOp[-28, 12, 16][nn], evalOp[-28, 16, 12][nn], 
         -evalOp[-16, -12, 28][nn], evalOp[-12, -16, 28][nn]]/16, 
       Inactive[Plus][evalOp[-27, 12, 15][nn], -evalOp[-27, 15, 12][nn], 
         evalOp[-15, -12, 27][nn], -evalOp[-12, -15, 27][nn]]/12, 
       Inactive[Plus][-evalOp[-27, 12, 15][nn], evalOp[-27, 15, 12][nn], 
         -evalOp[-15, -12, 27][nn], evalOp[-12, -15, 27][nn]]/15, 
       Inactive[Plus][evalOp[-26, 12, 14][nn], -evalOp[-26, 14, 12][nn], 
         evalOp[-14, -12, 26][nn], -evalOp[-12, -14, 26][nn]]/12, 
       Inactive[Plus][-evalOp[-26, 12, 14][nn], evalOp[-26, 14, 12][nn], 
         -evalOp[-14, -12, 26][nn], evalOp[-12, -14, 26][nn]]/14, 
       Inactive[Plus][evalOp[-25, 12, 13][nn], -evalOp[-25, 13, 12][nn], 
         evalOp[-13, -12, 25][nn], -evalOp[-12, -13, 25][nn]]/12, 
       Inactive[Plus][-evalOp[-25, 12, 13][nn], evalOp[-25, 13, 12][nn], 
         -evalOp[-13, -12, 25][nn], evalOp[-12, -13, 25][nn]]/13, 
       evalOp[-12, -1, 13][nn], evalOp[-12, 1, 11][nn], 
       -evalOp[-12, 11, 1][nn], Inactive[Plus][evalOp[-31, 11, 20][nn], 
         -evalOp[-31, 20, 11][nn], evalOp[-20, -11, 31][nn], 
         -evalOp[-11, -20, 31][nn]]/11, 
       Inactive[Plus][-evalOp[-31, 11, 20][nn], evalOp[-31, 20, 11][nn], 
         -evalOp[-20, -11, 31][nn], evalOp[-11, -20, 31][nn]]/20, 
       Inactive[Plus][evalOp[-30, 11, 19][nn], -evalOp[-30, 19, 11][nn], 
         evalOp[-19, -11, 30][nn], -evalOp[-11, -19, 30][nn]]/11, 
       Inactive[Plus][-evalOp[-30, 11, 19][nn], evalOp[-30, 19, 11][nn], 
         -evalOp[-19, -11, 30][nn], evalOp[-11, -19, 30][nn]]/19, 
       Inactive[Plus][evalOp[-29, 11, 18][nn], -evalOp[-29, 18, 11][nn], 
         evalOp[-18, -11, 29][nn], -evalOp[-11, -18, 29][nn]]/11, 
       Inactive[Plus][-evalOp[-29, 11, 18][nn], evalOp[-29, 18, 11][nn], 
         -evalOp[-18, -11, 29][nn], evalOp[-11, -18, 29][nn]]/18, 
       Inactive[Plus][evalOp[-28, 11, 17][nn], -evalOp[-28, 17, 11][nn], 
         evalOp[-17, -11, 28][nn], -evalOp[-11, -17, 28][nn]]/11, 
       Inactive[Plus][-evalOp[-28, 11, 17][nn], evalOp[-28, 17, 11][nn], 
         -evalOp[-17, -11, 28][nn], evalOp[-11, -17, 28][nn]]/17, 
       Inactive[Plus][evalOp[-27, 11, 16][nn], -evalOp[-27, 16, 11][nn], 
         evalOp[-16, -11, 27][nn], -evalOp[-11, -16, 27][nn]]/11, 
       Inactive[Plus][-evalOp[-27, 11, 16][nn], evalOp[-27, 16, 11][nn], 
         -evalOp[-16, -11, 27][nn], evalOp[-11, -16, 27][nn]]/16, 
       Inactive[Plus][evalOp[-26, 11, 15][nn], -evalOp[-26, 15, 11][nn], 
         evalOp[-15, -11, 26][nn], -evalOp[-11, -15, 26][nn]]/11, 
       Inactive[Plus][-evalOp[-26, 11, 15][nn], evalOp[-26, 15, 11][nn], 
         -evalOp[-15, -11, 26][nn], evalOp[-11, -15, 26][nn]]/15, 
       Inactive[Plus][evalOp[-25, 11, 14][nn], -evalOp[-25, 14, 11][nn], 
         evalOp[-14, -11, 25][nn], -evalOp[-11, -14, 25][nn]]/11, 
       Inactive[Plus][-evalOp[-25, 11, 14][nn], evalOp[-25, 14, 11][nn], 
         -evalOp[-14, -11, 25][nn], evalOp[-11, -14, 25][nn]]/14, 
       Inactive[Plus][evalOp[-24, 11, 13][nn], -evalOp[-24, 13, 11][nn], 
         evalOp[-13, -11, 24][nn], -evalOp[-11, -13, 24][nn]]/11, 
       Inactive[Plus][-evalOp[-24, 11, 13][nn], evalOp[-24, 13, 11][nn], 
         -evalOp[-13, -11, 24][nn], evalOp[-11, -13, 24][nn]]/13, 
       Inactive[Plus][evalOp[-23, 11, 12][nn], -evalOp[-23, 12, 11][nn], 
         evalOp[-12, -11, 23][nn], -evalOp[-11, -12, 23][nn]]/11, 
       Inactive[Plus][-evalOp[-23, 11, 12][nn], evalOp[-23, 12, 11][nn], 
         -evalOp[-12, -11, 23][nn], evalOp[-11, -12, 23][nn]]/12, 
       evalOp[-11, -1, 12][nn], evalOp[-11, 1, 10][nn], 
       -evalOp[-11, 10, 1][nn], Inactive[Plus][evalOp[-30, 10, 20][nn], 
         -evalOp[-30, 20, 10][nn], evalOp[-20, -10, 30][nn], 
         -evalOp[-10, -20, 30][nn]]/10, 
       Inactive[Plus][-evalOp[-30, 10, 20][nn], evalOp[-30, 20, 10][nn], 
         -evalOp[-20, -10, 30][nn], evalOp[-10, -20, 30][nn]]/20, 
       Inactive[Plus][evalOp[-29, 10, 19][nn], -evalOp[-29, 19, 10][nn], 
         evalOp[-19, -10, 29][nn], -evalOp[-10, -19, 29][nn]]/10, 
       Inactive[Plus][-evalOp[-29, 10, 19][nn], evalOp[-29, 19, 10][nn], 
         -evalOp[-19, -10, 29][nn], evalOp[-10, -19, 29][nn]]/19, 
       Inactive[Plus][evalOp[-28, 10, 18][nn], -evalOp[-28, 18, 10][nn], 
         evalOp[-18, -10, 28][nn], -evalOp[-10, -18, 28][nn]]/10, 
       Inactive[Plus][-evalOp[-28, 10, 18][nn], evalOp[-28, 18, 10][nn], 
         -evalOp[-18, -10, 28][nn], evalOp[-10, -18, 28][nn]]/18, 
       Inactive[Plus][evalOp[-27, 10, 17][nn], -evalOp[-27, 17, 10][nn], 
         evalOp[-17, -10, 27][nn], -evalOp[-10, -17, 27][nn]]/10, 
       Inactive[Plus][-evalOp[-27, 10, 17][nn], evalOp[-27, 17, 10][nn], 
         -evalOp[-17, -10, 27][nn], evalOp[-10, -17, 27][nn]]/17, 
       Inactive[Plus][evalOp[-26, 10, 16][nn], -evalOp[-26, 16, 10][nn], 
         evalOp[-16, -10, 26][nn], -evalOp[-10, -16, 26][nn]]/10, 
       Inactive[Plus][-evalOp[-26, 10, 16][nn], evalOp[-26, 16, 10][nn], 
         -evalOp[-16, -10, 26][nn], evalOp[-10, -16, 26][nn]]/16, 
       Inactive[Plus][evalOp[-25, 10, 15][nn], -evalOp[-25, 15, 10][nn], 
         evalOp[-15, -10, 25][nn], -evalOp[-10, -15, 25][nn]]/10, 
       Inactive[Plus][-evalOp[-25, 10, 15][nn], evalOp[-25, 15, 10][nn], 
         -evalOp[-15, -10, 25][nn], evalOp[-10, -15, 25][nn]]/15, 
       Inactive[Plus][evalOp[-24, 10, 14][nn], -evalOp[-24, 14, 10][nn], 
         evalOp[-14, -10, 24][nn], -evalOp[-10, -14, 24][nn]]/10, 
       Inactive[Plus][-evalOp[-24, 10, 14][nn], evalOp[-24, 14, 10][nn], 
         -evalOp[-14, -10, 24][nn], evalOp[-10, -14, 24][nn]]/14, 
       Inactive[Plus][evalOp[-23, 10, 13][nn], -evalOp[-23, 13, 10][nn], 
         evalOp[-13, -10, 23][nn], -evalOp[-10, -13, 23][nn]]/10, 
       Inactive[Plus][-evalOp[-23, 10, 13][nn], evalOp[-23, 13, 10][nn], 
         -evalOp[-13, -10, 23][nn], evalOp[-10, -13, 23][nn]]/13, 
       Inactive[Plus][evalOp[-22, 10, 12][nn], -evalOp[-22, 12, 10][nn], 
         evalOp[-12, -10, 22][nn], -evalOp[-10, -12, 22][nn]]/10, 
       Inactive[Plus][-evalOp[-22, 10, 12][nn], evalOp[-22, 12, 10][nn], 
         -evalOp[-12, -10, 22][nn], evalOp[-10, -12, 22][nn]]/12, 
       Inactive[Plus][evalOp[-21, 10, 11][nn], -evalOp[-21, 11, 10][nn], 
         evalOp[-11, -10, 21][nn], -evalOp[-10, -11, 21][nn]]/10, 
       Inactive[Plus][-evalOp[-21, 10, 11][nn], evalOp[-21, 11, 10][nn], 
         -evalOp[-11, -10, 21][nn], evalOp[-10, -11, 21][nn]]/11, 
       evalOp[-10, -1, 11][nn], evalOp[-10, 1, 9][nn], 
       -evalOp[-10, 9, 1][nn], Inactive[Plus][evalOp[-29, 9, 20][nn], 
         -evalOp[-29, 20, 9][nn], evalOp[-20, -9, 29][nn], 
         -evalOp[-9, -20, 29][nn]]/9, Inactive[Plus][-evalOp[-29, 9, 20][nn], 
         evalOp[-29, 20, 9][nn], -evalOp[-20, -9, 29][nn], 
         evalOp[-9, -20, 29][nn]]/20, Inactive[Plus][evalOp[-28, 9, 19][nn], 
         -evalOp[-28, 19, 9][nn], evalOp[-19, -9, 28][nn], 
         -evalOp[-9, -19, 28][nn]]/9, Inactive[Plus][-evalOp[-28, 9, 19][nn], 
         evalOp[-28, 19, 9][nn], -evalOp[-19, -9, 28][nn], 
         evalOp[-9, -19, 28][nn]]/19, Inactive[Plus][evalOp[-27, 9, 18][nn], 
         -evalOp[-27, 18, 9][nn], evalOp[-18, -9, 27][nn], 
         -evalOp[-9, -18, 27][nn]]/9, Inactive[Plus][-evalOp[-27, 9, 18][nn], 
         evalOp[-27, 18, 9][nn], -evalOp[-18, -9, 27][nn], 
         evalOp[-9, -18, 27][nn]]/18, Inactive[Plus][evalOp[-26, 9, 17][nn], 
         -evalOp[-26, 17, 9][nn], evalOp[-17, -9, 26][nn], 
         -evalOp[-9, -17, 26][nn]]/9, Inactive[Plus][-evalOp[-26, 9, 17][nn], 
         evalOp[-26, 17, 9][nn], -evalOp[-17, -9, 26][nn], 
         evalOp[-9, -17, 26][nn]]/17, Inactive[Plus][evalOp[-25, 9, 16][nn], 
         -evalOp[-25, 16, 9][nn], evalOp[-16, -9, 25][nn], 
         -evalOp[-9, -16, 25][nn]]/9, Inactive[Plus][-evalOp[-25, 9, 16][nn], 
         evalOp[-25, 16, 9][nn], -evalOp[-16, -9, 25][nn], 
         evalOp[-9, -16, 25][nn]]/16, Inactive[Plus][evalOp[-24, 9, 15][nn], 
         -evalOp[-24, 15, 9][nn], evalOp[-15, -9, 24][nn], 
         -evalOp[-9, -15, 24][nn]]/9, Inactive[Plus][-evalOp[-24, 9, 15][nn], 
         evalOp[-24, 15, 9][nn], -evalOp[-15, -9, 24][nn], 
         evalOp[-9, -15, 24][nn]]/15, Inactive[Plus][evalOp[-23, 9, 14][nn], 
         -evalOp[-23, 14, 9][nn], evalOp[-14, -9, 23][nn], 
         -evalOp[-9, -14, 23][nn]]/9, Inactive[Plus][-evalOp[-23, 9, 14][nn], 
         evalOp[-23, 14, 9][nn], -evalOp[-14, -9, 23][nn], 
         evalOp[-9, -14, 23][nn]]/14, Inactive[Plus][evalOp[-22, 9, 13][nn], 
         -evalOp[-22, 13, 9][nn], evalOp[-13, -9, 22][nn], 
         -evalOp[-9, -13, 22][nn]]/9, Inactive[Plus][-evalOp[-22, 9, 13][nn], 
         evalOp[-22, 13, 9][nn], -evalOp[-13, -9, 22][nn], 
         evalOp[-9, -13, 22][nn]]/13, Inactive[Plus][evalOp[-21, 9, 12][nn], 
         -evalOp[-21, 12, 9][nn], evalOp[-12, -9, 21][nn], 
         -evalOp[-9, -12, 21][nn]]/9, Inactive[Plus][-evalOp[-21, 9, 12][nn], 
         evalOp[-21, 12, 9][nn], -evalOp[-12, -9, 21][nn], 
         evalOp[-9, -12, 21][nn]]/12, Inactive[Plus][evalOp[-20, 9, 11][nn], 
         -evalOp[-20, 11, 9][nn], evalOp[-11, -9, 20][nn], 
         -evalOp[-9, -11, 20][nn]]/9, Inactive[Plus][-evalOp[-20, 9, 11][nn], 
         evalOp[-20, 11, 9][nn], -evalOp[-11, -9, 20][nn], 
         evalOp[-9, -11, 20][nn]]/11, Inactive[Plus][evalOp[-19, 9, 10][nn], 
         -evalOp[-19, 10, 9][nn], evalOp[-10, -9, 19][nn], 
         -evalOp[-9, -10, 19][nn]]/9, Inactive[Plus][-evalOp[-19, 9, 10][nn], 
         evalOp[-19, 10, 9][nn], -evalOp[-10, -9, 19][nn], 
         evalOp[-9, -10, 19][nn]]/10, evalOp[-9, -1, 10][nn], 
       evalOp[-9, 1, 8][nn], -evalOp[-9, 8, 1][nn], 
       Inactive[Plus][evalOp[-28, 8, 20][nn], -evalOp[-28, 20, 8][nn], 
         evalOp[-20, -8, 28][nn], -evalOp[-8, -20, 28][nn]]/8, 
       Inactive[Plus][-evalOp[-28, 8, 20][nn], evalOp[-28, 20, 8][nn], 
         -evalOp[-20, -8, 28][nn], evalOp[-8, -20, 28][nn]]/20, 
       Inactive[Plus][evalOp[-27, 8, 19][nn], -evalOp[-27, 19, 8][nn], 
         evalOp[-19, -8, 27][nn], -evalOp[-8, -19, 27][nn]]/8, 
       Inactive[Plus][-evalOp[-27, 8, 19][nn], evalOp[-27, 19, 8][nn], 
         -evalOp[-19, -8, 27][nn], evalOp[-8, -19, 27][nn]]/19, 
       Inactive[Plus][evalOp[-26, 8, 18][nn], -evalOp[-26, 18, 8][nn], 
         evalOp[-18, -8, 26][nn], -evalOp[-8, -18, 26][nn]]/8, 
       Inactive[Plus][-evalOp[-26, 8, 18][nn], evalOp[-26, 18, 8][nn], 
         -evalOp[-18, -8, 26][nn], evalOp[-8, -18, 26][nn]]/18, 
       Inactive[Plus][evalOp[-25, 8, 17][nn], -evalOp[-25, 17, 8][nn], 
         evalOp[-17, -8, 25][nn], -evalOp[-8, -17, 25][nn]]/8, 
       Inactive[Plus][-evalOp[-25, 8, 17][nn], evalOp[-25, 17, 8][nn], 
         -evalOp[-17, -8, 25][nn], evalOp[-8, -17, 25][nn]]/17, 
       Inactive[Plus][evalOp[-24, 8, 16][nn], -evalOp[-24, 16, 8][nn], 
         evalOp[-16, -8, 24][nn], -evalOp[-8, -16, 24][nn]]/8, 
       Inactive[Plus][-evalOp[-24, 8, 16][nn], evalOp[-24, 16, 8][nn], 
         -evalOp[-16, -8, 24][nn], evalOp[-8, -16, 24][nn]]/16, 
       Inactive[Plus][evalOp[-23, 8, 15][nn], -evalOp[-23, 15, 8][nn], 
         evalOp[-15, -8, 23][nn], -evalOp[-8, -15, 23][nn]]/8, 
       Inactive[Plus][-evalOp[-23, 8, 15][nn], evalOp[-23, 15, 8][nn], 
         -evalOp[-15, -8, 23][nn], evalOp[-8, -15, 23][nn]]/15, 
       Inactive[Plus][evalOp[-22, 8, 14][nn], -evalOp[-22, 14, 8][nn], 
         evalOp[-14, -8, 22][nn], -evalOp[-8, -14, 22][nn]]/8, 
       Inactive[Plus][-evalOp[-22, 8, 14][nn], evalOp[-22, 14, 8][nn], 
         -evalOp[-14, -8, 22][nn], evalOp[-8, -14, 22][nn]]/14, 
       Inactive[Plus][evalOp[-21, 8, 13][nn], -evalOp[-21, 13, 8][nn], 
         evalOp[-13, -8, 21][nn], -evalOp[-8, -13, 21][nn]]/8, 
       Inactive[Plus][-evalOp[-21, 8, 13][nn], evalOp[-21, 13, 8][nn], 
         -evalOp[-13, -8, 21][nn], evalOp[-8, -13, 21][nn]]/13, 
       Inactive[Plus][evalOp[-20, 8, 12][nn], -evalOp[-20, 12, 8][nn], 
         evalOp[-12, -8, 20][nn], -evalOp[-8, -12, 20][nn]]/8, 
       Inactive[Plus][-evalOp[-20, 8, 12][nn], evalOp[-20, 12, 8][nn], 
         -evalOp[-12, -8, 20][nn], evalOp[-8, -12, 20][nn]]/12, 
       Inactive[Plus][evalOp[-19, 8, 11][nn], -evalOp[-19, 11, 8][nn], 
         evalOp[-11, -8, 19][nn], -evalOp[-8, -11, 19][nn]]/8, 
       Inactive[Plus][-evalOp[-19, 8, 11][nn], evalOp[-19, 11, 8][nn], 
         -evalOp[-11, -8, 19][nn], evalOp[-8, -11, 19][nn]]/11, 
       Inactive[Plus][evalOp[-18, 8, 10][nn], -evalOp[-18, 10, 8][nn], 
         evalOp[-10, -8, 18][nn], -evalOp[-8, -10, 18][nn]]/8, 
       Inactive[Plus][-evalOp[-18, 8, 10][nn], evalOp[-18, 10, 8][nn], 
         -evalOp[-10, -8, 18][nn], evalOp[-8, -10, 18][nn]]/10, 
       Inactive[Plus][evalOp[-17, 8, 9][nn], -evalOp[-17, 9, 8][nn], 
         evalOp[-9, -8, 17][nn], -evalOp[-8, -9, 17][nn]]/8, 
       Inactive[Plus][-evalOp[-17, 8, 9][nn], evalOp[-17, 9, 8][nn], 
         -evalOp[-9, -8, 17][nn], evalOp[-8, -9, 17][nn]]/9, 
       evalOp[-8, -1, 9][nn], evalOp[-8, 1, 7][nn], -evalOp[-8, 7, 1][nn], 
       Inactive[Plus][evalOp[-27, 7, 20][nn], -evalOp[-27, 20, 7][nn], 
         evalOp[-20, -7, 27][nn], -evalOp[-7, -20, 27][nn]]/7, 
       Inactive[Plus][-evalOp[-27, 7, 20][nn], evalOp[-27, 20, 7][nn], 
         -evalOp[-20, -7, 27][nn], evalOp[-7, -20, 27][nn]]/20, 
       Inactive[Plus][evalOp[-26, 7, 19][nn], -evalOp[-26, 19, 7][nn], 
         evalOp[-19, -7, 26][nn], -evalOp[-7, -19, 26][nn]]/7, 
       Inactive[Plus][-evalOp[-26, 7, 19][nn], evalOp[-26, 19, 7][nn], 
         -evalOp[-19, -7, 26][nn], evalOp[-7, -19, 26][nn]]/19, 
       Inactive[Plus][evalOp[-25, 7, 18][nn], -evalOp[-25, 18, 7][nn], 
         evalOp[-18, -7, 25][nn], -evalOp[-7, -18, 25][nn]]/7, 
       Inactive[Plus][-evalOp[-25, 7, 18][nn], evalOp[-25, 18, 7][nn], 
         -evalOp[-18, -7, 25][nn], evalOp[-7, -18, 25][nn]]/18, 
       Inactive[Plus][evalOp[-24, 7, 17][nn], -evalOp[-24, 17, 7][nn], 
         evalOp[-17, -7, 24][nn], -evalOp[-7, -17, 24][nn]]/7, 
       Inactive[Plus][-evalOp[-24, 7, 17][nn], evalOp[-24, 17, 7][nn], 
         -evalOp[-17, -7, 24][nn], evalOp[-7, -17, 24][nn]]/17, 
       Inactive[Plus][evalOp[-23, 7, 16][nn], -evalOp[-23, 16, 7][nn], 
         evalOp[-16, -7, 23][nn], -evalOp[-7, -16, 23][nn]]/7, 
       Inactive[Plus][-evalOp[-23, 7, 16][nn], evalOp[-23, 16, 7][nn], 
         -evalOp[-16, -7, 23][nn], evalOp[-7, -16, 23][nn]]/16, 
       Inactive[Plus][evalOp[-22, 7, 15][nn], -evalOp[-22, 15, 7][nn], 
         evalOp[-15, -7, 22][nn], -evalOp[-7, -15, 22][nn]]/7, 
       Inactive[Plus][-evalOp[-22, 7, 15][nn], evalOp[-22, 15, 7][nn], 
         -evalOp[-15, -7, 22][nn], evalOp[-7, -15, 22][nn]]/15, 
       Inactive[Plus][evalOp[-21, 7, 14][nn], -evalOp[-21, 14, 7][nn], 
         evalOp[-14, -7, 21][nn], -evalOp[-7, -14, 21][nn]]/7, 
       Inactive[Plus][-evalOp[-21, 7, 14][nn], evalOp[-21, 14, 7][nn], 
         -evalOp[-14, -7, 21][nn], evalOp[-7, -14, 21][nn]]/14, 
       Inactive[Plus][evalOp[-20, 7, 13][nn], -evalOp[-20, 13, 7][nn], 
         evalOp[-13, -7, 20][nn], -evalOp[-7, -13, 20][nn]]/7, 
       Inactive[Plus][-evalOp[-20, 7, 13][nn], evalOp[-20, 13, 7][nn], 
         -evalOp[-13, -7, 20][nn], evalOp[-7, -13, 20][nn]]/13, 
       Inactive[Plus][evalOp[-19, 7, 12][nn], -evalOp[-19, 12, 7][nn], 
         evalOp[-12, -7, 19][nn], -evalOp[-7, -12, 19][nn]]/7, 
       Inactive[Plus][-evalOp[-19, 7, 12][nn], evalOp[-19, 12, 7][nn], 
         -evalOp[-12, -7, 19][nn], evalOp[-7, -12, 19][nn]]/12, 
       Inactive[Plus][evalOp[-18, 7, 11][nn], -evalOp[-18, 11, 7][nn], 
         evalOp[-11, -7, 18][nn], -evalOp[-7, -11, 18][nn]]/7, 
       Inactive[Plus][-evalOp[-18, 7, 11][nn], evalOp[-18, 11, 7][nn], 
         -evalOp[-11, -7, 18][nn], evalOp[-7, -11, 18][nn]]/11, 
       Inactive[Plus][evalOp[-17, 7, 10][nn], -evalOp[-17, 10, 7][nn], 
         evalOp[-10, -7, 17][nn], -evalOp[-7, -10, 17][nn]]/7, 
       Inactive[Plus][-evalOp[-17, 7, 10][nn], evalOp[-17, 10, 7][nn], 
         -evalOp[-10, -7, 17][nn], evalOp[-7, -10, 17][nn]]/10, 
       Inactive[Plus][evalOp[-16, 7, 9][nn], -evalOp[-16, 9, 7][nn], 
         evalOp[-9, -7, 16][nn], -evalOp[-7, -9, 16][nn]]/7, 
       Inactive[Plus][-evalOp[-16, 7, 9][nn], evalOp[-16, 9, 7][nn], 
         -evalOp[-9, -7, 16][nn], evalOp[-7, -9, 16][nn]]/9, 
       Inactive[Plus][evalOp[-15, 7, 8][nn], -evalOp[-15, 8, 7][nn], 
         evalOp[-8, -7, 15][nn], -evalOp[-7, -8, 15][nn]]/7, 
       Inactive[Plus][-evalOp[-15, 7, 8][nn], evalOp[-15, 8, 7][nn], 
         -evalOp[-8, -7, 15][nn], evalOp[-7, -8, 15][nn]]/8, 
       evalOp[-7, -1, 8][nn], evalOp[-7, 1, 6][nn], -evalOp[-7, 6, 1][nn], 
       Inactive[Plus][evalOp[-26, 6, 20][nn], -evalOp[-26, 20, 6][nn], 
         evalOp[-20, -6, 26][nn], -evalOp[-6, -20, 26][nn]]/6, 
       Inactive[Plus][-evalOp[-26, 6, 20][nn], evalOp[-26, 20, 6][nn], 
         -evalOp[-20, -6, 26][nn], evalOp[-6, -20, 26][nn]]/20, 
       Inactive[Plus][evalOp[-25, 6, 19][nn], -evalOp[-25, 19, 6][nn], 
         evalOp[-19, -6, 25][nn], -evalOp[-6, -19, 25][nn]]/6, 
       Inactive[Plus][-evalOp[-25, 6, 19][nn], evalOp[-25, 19, 6][nn], 
         -evalOp[-19, -6, 25][nn], evalOp[-6, -19, 25][nn]]/19, 
       Inactive[Plus][evalOp[-24, 6, 18][nn], -evalOp[-24, 18, 6][nn], 
         evalOp[-18, -6, 24][nn], -evalOp[-6, -18, 24][nn]]/6, 
       Inactive[Plus][-evalOp[-24, 6, 18][nn], evalOp[-24, 18, 6][nn], 
         -evalOp[-18, -6, 24][nn], evalOp[-6, -18, 24][nn]]/18, 
       Inactive[Plus][evalOp[-23, 6, 17][nn], -evalOp[-23, 17, 6][nn], 
         evalOp[-17, -6, 23][nn], -evalOp[-6, -17, 23][nn]]/6, 
       Inactive[Plus][-evalOp[-23, 6, 17][nn], evalOp[-23, 17, 6][nn], 
         -evalOp[-17, -6, 23][nn], evalOp[-6, -17, 23][nn]]/17, 
       Inactive[Plus][evalOp[-22, 6, 16][nn], -evalOp[-22, 16, 6][nn], 
         evalOp[-16, -6, 22][nn], -evalOp[-6, -16, 22][nn]]/6, 
       Inactive[Plus][-evalOp[-22, 6, 16][nn], evalOp[-22, 16, 6][nn], 
         -evalOp[-16, -6, 22][nn], evalOp[-6, -16, 22][nn]]/16, 
       Inactive[Plus][evalOp[-21, 6, 15][nn], -evalOp[-21, 15, 6][nn], 
         evalOp[-15, -6, 21][nn], -evalOp[-6, -15, 21][nn]]/6, 
       Inactive[Plus][-evalOp[-21, 6, 15][nn], evalOp[-21, 15, 6][nn], 
         -evalOp[-15, -6, 21][nn], evalOp[-6, -15, 21][nn]]/15, 
       Inactive[Plus][evalOp[-20, 6, 14][nn], -evalOp[-20, 14, 6][nn], 
         evalOp[-14, -6, 20][nn], -evalOp[-6, -14, 20][nn]]/6, 
       Inactive[Plus][-evalOp[-20, 6, 14][nn], evalOp[-20, 14, 6][nn], 
         -evalOp[-14, -6, 20][nn], evalOp[-6, -14, 20][nn]]/14, 
       Inactive[Plus][evalOp[-19, 6, 13][nn], -evalOp[-19, 13, 6][nn], 
         evalOp[-13, -6, 19][nn], -evalOp[-6, -13, 19][nn]]/6, 
       Inactive[Plus][-evalOp[-19, 6, 13][nn], evalOp[-19, 13, 6][nn], 
         -evalOp[-13, -6, 19][nn], evalOp[-6, -13, 19][nn]]/13, 
       Inactive[Plus][evalOp[-18, 6, 12][nn], -evalOp[-18, 12, 6][nn], 
         evalOp[-12, -6, 18][nn], -evalOp[-6, -12, 18][nn]]/6, 
       Inactive[Plus][-evalOp[-18, 6, 12][nn], evalOp[-18, 12, 6][nn], 
         -evalOp[-12, -6, 18][nn], evalOp[-6, -12, 18][nn]]/12, 
       Inactive[Plus][evalOp[-17, 6, 11][nn], -evalOp[-17, 11, 6][nn], 
         evalOp[-11, -6, 17][nn], -evalOp[-6, -11, 17][nn]]/6, 
       Inactive[Plus][-evalOp[-17, 6, 11][nn], evalOp[-17, 11, 6][nn], 
         -evalOp[-11, -6, 17][nn], evalOp[-6, -11, 17][nn]]/11, 
       Inactive[Plus][evalOp[-16, 6, 10][nn], -evalOp[-16, 10, 6][nn], 
         evalOp[-10, -6, 16][nn], -evalOp[-6, -10, 16][nn]]/6, 
       Inactive[Plus][-evalOp[-16, 6, 10][nn], evalOp[-16, 10, 6][nn], 
         -evalOp[-10, -6, 16][nn], evalOp[-6, -10, 16][nn]]/10, 
       Inactive[Plus][evalOp[-15, 6, 9][nn], -evalOp[-15, 9, 6][nn], 
         evalOp[-9, -6, 15][nn], -evalOp[-6, -9, 15][nn]]/6, 
       Inactive[Plus][-evalOp[-15, 6, 9][nn], evalOp[-15, 9, 6][nn], 
         -evalOp[-9, -6, 15][nn], evalOp[-6, -9, 15][nn]]/9, 
       Inactive[Plus][evalOp[-14, 6, 8][nn], -evalOp[-14, 8, 6][nn], 
         evalOp[-8, -6, 14][nn], -evalOp[-6, -8, 14][nn]]/6, 
       Inactive[Plus][-evalOp[-14, 6, 8][nn], evalOp[-14, 8, 6][nn], 
         -evalOp[-8, -6, 14][nn], evalOp[-6, -8, 14][nn]]/8, 
       Inactive[Plus][evalOp[-13, 6, 7][nn], -evalOp[-13, 7, 6][nn], 
         evalOp[-7, -6, 13][nn], -evalOp[-6, -7, 13][nn]]/6, 
       Inactive[Plus][-evalOp[-13, 6, 7][nn], evalOp[-13, 7, 6][nn], 
         -evalOp[-7, -6, 13][nn], evalOp[-6, -7, 13][nn]]/7, 
       evalOp[-6, -1, 7][nn], evalOp[-6, 1, 5][nn], -evalOp[-6, 5, 1][nn], 
       Inactive[Plus][evalOp[-25, 5, 20][nn], -evalOp[-25, 20, 5][nn], 
         evalOp[-20, -5, 25][nn], -evalOp[-5, -20, 25][nn]]/5, 
       Inactive[Plus][-evalOp[-25, 5, 20][nn], evalOp[-25, 20, 5][nn], 
         -evalOp[-20, -5, 25][nn], evalOp[-5, -20, 25][nn]]/20, 
       Inactive[Plus][evalOp[-24, 5, 19][nn], -evalOp[-24, 19, 5][nn], 
         evalOp[-19, -5, 24][nn], -evalOp[-5, -19, 24][nn]]/5, 
       Inactive[Plus][-evalOp[-24, 5, 19][nn], evalOp[-24, 19, 5][nn], 
         -evalOp[-19, -5, 24][nn], evalOp[-5, -19, 24][nn]]/19, 
       Inactive[Plus][evalOp[-23, 5, 18][nn], -evalOp[-23, 18, 5][nn], 
         evalOp[-18, -5, 23][nn], -evalOp[-5, -18, 23][nn]]/5, 
       Inactive[Plus][-evalOp[-23, 5, 18][nn], evalOp[-23, 18, 5][nn], 
         -evalOp[-18, -5, 23][nn], evalOp[-5, -18, 23][nn]]/18, 
       Inactive[Plus][evalOp[-22, 5, 17][nn], -evalOp[-22, 17, 5][nn], 
         evalOp[-17, -5, 22][nn], -evalOp[-5, -17, 22][nn]]/5, 
       Inactive[Plus][-evalOp[-22, 5, 17][nn], evalOp[-22, 17, 5][nn], 
         -evalOp[-17, -5, 22][nn], evalOp[-5, -17, 22][nn]]/17, 
       Inactive[Plus][evalOp[-21, 5, 16][nn], -evalOp[-21, 16, 5][nn], 
         evalOp[-16, -5, 21][nn], -evalOp[-5, -16, 21][nn]]/5, 
       Inactive[Plus][-evalOp[-21, 5, 16][nn], evalOp[-21, 16, 5][nn], 
         -evalOp[-16, -5, 21][nn], evalOp[-5, -16, 21][nn]]/16, 
       Inactive[Plus][evalOp[-20, 5, 15][nn], -evalOp[-20, 15, 5][nn], 
         evalOp[-15, -5, 20][nn], -evalOp[-5, -15, 20][nn]]/5, 
       Inactive[Plus][-evalOp[-20, 5, 15][nn], evalOp[-20, 15, 5][nn], 
         -evalOp[-15, -5, 20][nn], evalOp[-5, -15, 20][nn]]/15, 
       Inactive[Plus][evalOp[-19, 5, 14][nn], -evalOp[-19, 14, 5][nn], 
         evalOp[-14, -5, 19][nn], -evalOp[-5, -14, 19][nn]]/5, 
       Inactive[Plus][-evalOp[-19, 5, 14][nn], evalOp[-19, 14, 5][nn], 
         -evalOp[-14, -5, 19][nn], evalOp[-5, -14, 19][nn]]/14, 
       Inactive[Plus][evalOp[-18, 5, 13][nn], -evalOp[-18, 13, 5][nn], 
         evalOp[-13, -5, 18][nn], -evalOp[-5, -13, 18][nn]]/5, 
       Inactive[Plus][-evalOp[-18, 5, 13][nn], evalOp[-18, 13, 5][nn], 
         -evalOp[-13, -5, 18][nn], evalOp[-5, -13, 18][nn]]/13, 
       Inactive[Plus][evalOp[-17, 5, 12][nn], -evalOp[-17, 12, 5][nn], 
         evalOp[-12, -5, 17][nn], -evalOp[-5, -12, 17][nn]]/5, 
       Inactive[Plus][-evalOp[-17, 5, 12][nn], evalOp[-17, 12, 5][nn], 
         -evalOp[-12, -5, 17][nn], evalOp[-5, -12, 17][nn]]/12, 
       Inactive[Plus][evalOp[-16, 5, 11][nn], -evalOp[-16, 11, 5][nn], 
         evalOp[-11, -5, 16][nn], -evalOp[-5, -11, 16][nn]]/5, 
       Inactive[Plus][-evalOp[-16, 5, 11][nn], evalOp[-16, 11, 5][nn], 
         -evalOp[-11, -5, 16][nn], evalOp[-5, -11, 16][nn]]/11, 
       Inactive[Plus][evalOp[-15, 5, 10][nn], -evalOp[-15, 10, 5][nn], 
         evalOp[-10, -5, 15][nn], -evalOp[-5, -10, 15][nn]]/5, 
       Inactive[Plus][-evalOp[-15, 5, 10][nn], evalOp[-15, 10, 5][nn], 
         -evalOp[-10, -5, 15][nn], evalOp[-5, -10, 15][nn]]/10, 
       Inactive[Plus][evalOp[-14, 5, 9][nn], -evalOp[-14, 9, 5][nn], 
         evalOp[-9, -5, 14][nn], -evalOp[-5, -9, 14][nn]]/5, 
       Inactive[Plus][-evalOp[-14, 5, 9][nn], evalOp[-14, 9, 5][nn], 
         -evalOp[-9, -5, 14][nn], evalOp[-5, -9, 14][nn]]/9, 
       Inactive[Plus][evalOp[-13, 5, 8][nn], -evalOp[-13, 8, 5][nn], 
         evalOp[-8, -5, 13][nn], -evalOp[-5, -8, 13][nn]]/5, 
       Inactive[Plus][-evalOp[-13, 5, 8][nn], evalOp[-13, 8, 5][nn], 
         -evalOp[-8, -5, 13][nn], evalOp[-5, -8, 13][nn]]/8, 
       Inactive[Plus][evalOp[-12, 5, 7][nn], -evalOp[-12, 7, 5][nn], 
         evalOp[-7, -5, 12][nn], -evalOp[-5, -7, 12][nn]]/5, 
       Inactive[Plus][-evalOp[-12, 5, 7][nn], evalOp[-12, 7, 5][nn], 
         -evalOp[-7, -5, 12][nn], evalOp[-5, -7, 12][nn]]/7, 
       Inactive[Plus][evalOp[-11, 5, 6][nn], -evalOp[-11, 6, 5][nn], 
         evalOp[-6, -5, 11][nn], -evalOp[-5, -6, 11][nn]]/5, 
       Inactive[Plus][-evalOp[-11, 5, 6][nn], evalOp[-11, 6, 5][nn], 
         -evalOp[-6, -5, 11][nn], evalOp[-5, -6, 11][nn]]/6, 
       evalOp[-5, -1, 6][nn], evalOp[-5, 1, 4][nn], -evalOp[-5, 4, 1][nn], 
       Inactive[Plus][evalOp[-24, 4, 20][nn], -evalOp[-24, 20, 4][nn], 
         evalOp[-20, -4, 24][nn], -evalOp[-4, -20, 24][nn]]/4, 
       Inactive[Plus][-evalOp[-24, 4, 20][nn], evalOp[-24, 20, 4][nn], 
         -evalOp[-20, -4, 24][nn], evalOp[-4, -20, 24][nn]]/20, 
       Inactive[Plus][evalOp[-23, 4, 19][nn], -evalOp[-23, 19, 4][nn], 
         evalOp[-19, -4, 23][nn], -evalOp[-4, -19, 23][nn]]/4, 
       Inactive[Plus][-evalOp[-23, 4, 19][nn], evalOp[-23, 19, 4][nn], 
         -evalOp[-19, -4, 23][nn], evalOp[-4, -19, 23][nn]]/19, 
       Inactive[Plus][evalOp[-22, 4, 18][nn], -evalOp[-22, 18, 4][nn], 
         evalOp[-18, -4, 22][nn], -evalOp[-4, -18, 22][nn]]/4, 
       Inactive[Plus][-evalOp[-22, 4, 18][nn], evalOp[-22, 18, 4][nn], 
         -evalOp[-18, -4, 22][nn], evalOp[-4, -18, 22][nn]]/18, 
       Inactive[Plus][evalOp[-21, 4, 17][nn], -evalOp[-21, 17, 4][nn], 
         evalOp[-17, -4, 21][nn], -evalOp[-4, -17, 21][nn]]/4, 
       Inactive[Plus][-evalOp[-21, 4, 17][nn], evalOp[-21, 17, 4][nn], 
         -evalOp[-17, -4, 21][nn], evalOp[-4, -17, 21][nn]]/17, 
       Inactive[Plus][evalOp[-20, 4, 16][nn], -evalOp[-20, 16, 4][nn], 
         evalOp[-16, -4, 20][nn], -evalOp[-4, -16, 20][nn]]/4, 
       Inactive[Plus][-evalOp[-20, 4, 16][nn], evalOp[-20, 16, 4][nn], 
         -evalOp[-16, -4, 20][nn], evalOp[-4, -16, 20][nn]]/16, 
       Inactive[Plus][evalOp[-19, 4, 15][nn], -evalOp[-19, 15, 4][nn], 
         evalOp[-15, -4, 19][nn], -evalOp[-4, -15, 19][nn]]/4, 
       Inactive[Plus][-evalOp[-19, 4, 15][nn], evalOp[-19, 15, 4][nn], 
         -evalOp[-15, -4, 19][nn], evalOp[-4, -15, 19][nn]]/15, 
       Inactive[Plus][evalOp[-18, 4, 14][nn], -evalOp[-18, 14, 4][nn], 
         evalOp[-14, -4, 18][nn], -evalOp[-4, -14, 18][nn]]/4, 
       Inactive[Plus][-evalOp[-18, 4, 14][nn], evalOp[-18, 14, 4][nn], 
         -evalOp[-14, -4, 18][nn], evalOp[-4, -14, 18][nn]]/14, 
       Inactive[Plus][evalOp[-17, 4, 13][nn], -evalOp[-17, 13, 4][nn], 
         evalOp[-13, -4, 17][nn], -evalOp[-4, -13, 17][nn]]/4, 
       Inactive[Plus][-evalOp[-17, 4, 13][nn], evalOp[-17, 13, 4][nn], 
         -evalOp[-13, -4, 17][nn], evalOp[-4, -13, 17][nn]]/13, 
       Inactive[Plus][evalOp[-16, 4, 12][nn], -evalOp[-16, 12, 4][nn], 
         evalOp[-12, -4, 16][nn], -evalOp[-4, -12, 16][nn]]/4, 
       Inactive[Plus][-evalOp[-16, 4, 12][nn], evalOp[-16, 12, 4][nn], 
         -evalOp[-12, -4, 16][nn], evalOp[-4, -12, 16][nn]]/12, 
       Inactive[Plus][evalOp[-15, 4, 11][nn], -evalOp[-15, 11, 4][nn], 
         evalOp[-11, -4, 15][nn], -evalOp[-4, -11, 15][nn]]/4, 
       Inactive[Plus][-evalOp[-15, 4, 11][nn], evalOp[-15, 11, 4][nn], 
         -evalOp[-11, -4, 15][nn], evalOp[-4, -11, 15][nn]]/11, 
       Inactive[Plus][evalOp[-14, 4, 10][nn], -evalOp[-14, 10, 4][nn], 
         evalOp[-10, -4, 14][nn], -evalOp[-4, -10, 14][nn]]/4, 
       Inactive[Plus][-evalOp[-14, 4, 10][nn], evalOp[-14, 10, 4][nn], 
         -evalOp[-10, -4, 14][nn], evalOp[-4, -10, 14][nn]]/10, 
       Inactive[Plus][evalOp[-13, 4, 9][nn], -evalOp[-13, 9, 4][nn], 
         evalOp[-9, -4, 13][nn], -evalOp[-4, -9, 13][nn]]/4, 
       Inactive[Plus][-evalOp[-13, 4, 9][nn], evalOp[-13, 9, 4][nn], 
         -evalOp[-9, -4, 13][nn], evalOp[-4, -9, 13][nn]]/9, 
       Inactive[Plus][evalOp[-12, 4, 8][nn], -evalOp[-12, 8, 4][nn], 
         evalOp[-8, -4, 12][nn], -evalOp[-4, -8, 12][nn]]/4, 
       Inactive[Plus][-evalOp[-12, 4, 8][nn], evalOp[-12, 8, 4][nn], 
         -evalOp[-8, -4, 12][nn], evalOp[-4, -8, 12][nn]]/8, 
       Inactive[Plus][evalOp[-11, 4, 7][nn], -evalOp[-11, 7, 4][nn], 
         evalOp[-7, -4, 11][nn], -evalOp[-4, -7, 11][nn]]/4, 
       Inactive[Plus][-evalOp[-11, 4, 7][nn], evalOp[-11, 7, 4][nn], 
         -evalOp[-7, -4, 11][nn], evalOp[-4, -7, 11][nn]]/7, 
       Inactive[Plus][evalOp[-10, 4, 6][nn], -evalOp[-10, 6, 4][nn], 
         evalOp[-6, -4, 10][nn], -evalOp[-4, -6, 10][nn]]/4, 
       Inactive[Plus][-evalOp[-10, 4, 6][nn], evalOp[-10, 6, 4][nn], 
         -evalOp[-6, -4, 10][nn], evalOp[-4, -6, 10][nn]]/6, 
       Inactive[Plus][evalOp[-9, 4, 5][nn], -evalOp[-9, 5, 4][nn], 
         evalOp[-5, -4, 9][nn], -evalOp[-4, -5, 9][nn]]/4, 
       Inactive[Plus][-evalOp[-9, 4, 5][nn], evalOp[-9, 5, 4][nn], 
         -evalOp[-5, -4, 9][nn], evalOp[-4, -5, 9][nn]]/5, 
       evalOp[-4, -1, 5][nn], evalOp[-4, 1, 3][nn], -evalOp[-4, 3, 1][nn], 
       Inactive[Plus][evalOp[-23, 3, 20][nn], -evalOp[-23, 20, 3][nn], 
         evalOp[-20, -3, 23][nn], -evalOp[-3, -20, 23][nn]]/3, 
       Inactive[Plus][-evalOp[-23, 3, 20][nn], evalOp[-23, 20, 3][nn], 
         -evalOp[-20, -3, 23][nn], evalOp[-3, -20, 23][nn]]/20, 
       Inactive[Plus][evalOp[-22, 3, 19][nn], -evalOp[-22, 19, 3][nn], 
         evalOp[-19, -3, 22][nn], -evalOp[-3, -19, 22][nn]]/3, 
       Inactive[Plus][-evalOp[-22, 3, 19][nn], evalOp[-22, 19, 3][nn], 
         -evalOp[-19, -3, 22][nn], evalOp[-3, -19, 22][nn]]/19, 
       Inactive[Plus][evalOp[-21, 3, 18][nn], -evalOp[-21, 18, 3][nn], 
         evalOp[-18, -3, 21][nn], -evalOp[-3, -18, 21][nn]]/3, 
       Inactive[Plus][-evalOp[-21, 3, 18][nn], evalOp[-21, 18, 3][nn], 
         -evalOp[-18, -3, 21][nn], evalOp[-3, -18, 21][nn]]/18, 
       Inactive[Plus][evalOp[-20, 3, 17][nn], -evalOp[-20, 17, 3][nn], 
         evalOp[-17, -3, 20][nn], -evalOp[-3, -17, 20][nn]]/3, 
       Inactive[Plus][-evalOp[-20, 3, 17][nn], evalOp[-20, 17, 3][nn], 
         -evalOp[-17, -3, 20][nn], evalOp[-3, -17, 20][nn]]/17, 
       Inactive[Plus][evalOp[-19, 3, 16][nn], -evalOp[-19, 16, 3][nn], 
         evalOp[-16, -3, 19][nn], -evalOp[-3, -16, 19][nn]]/3, 
       Inactive[Plus][-evalOp[-19, 3, 16][nn], evalOp[-19, 16, 3][nn], 
         -evalOp[-16, -3, 19][nn], evalOp[-3, -16, 19][nn]]/16, 
       Inactive[Plus][evalOp[-18, 3, 15][nn], -evalOp[-18, 15, 3][nn], 
         evalOp[-15, -3, 18][nn], -evalOp[-3, -15, 18][nn]]/3, 
       Inactive[Plus][-evalOp[-18, 3, 15][nn], evalOp[-18, 15, 3][nn], 
         -evalOp[-15, -3, 18][nn], evalOp[-3, -15, 18][nn]]/15, 
       Inactive[Plus][evalOp[-17, 3, 14][nn], -evalOp[-17, 14, 3][nn], 
         evalOp[-14, -3, 17][nn], -evalOp[-3, -14, 17][nn]]/3, 
       Inactive[Plus][-evalOp[-17, 3, 14][nn], evalOp[-17, 14, 3][nn], 
         -evalOp[-14, -3, 17][nn], evalOp[-3, -14, 17][nn]]/14, 
       Inactive[Plus][evalOp[-16, 3, 13][nn], -evalOp[-16, 13, 3][nn], 
         evalOp[-13, -3, 16][nn], -evalOp[-3, -13, 16][nn]]/3, 
       Inactive[Plus][-evalOp[-16, 3, 13][nn], evalOp[-16, 13, 3][nn], 
         -evalOp[-13, -3, 16][nn], evalOp[-3, -13, 16][nn]]/13, 
       Inactive[Plus][evalOp[-15, 3, 12][nn], -evalOp[-15, 12, 3][nn], 
         evalOp[-12, -3, 15][nn], -evalOp[-3, -12, 15][nn]]/3, 
       Inactive[Plus][-evalOp[-15, 3, 12][nn], evalOp[-15, 12, 3][nn], 
         -evalOp[-12, -3, 15][nn], evalOp[-3, -12, 15][nn]]/12, 
       Inactive[Plus][evalOp[-14, 3, 11][nn], -evalOp[-14, 11, 3][nn], 
         evalOp[-11, -3, 14][nn], -evalOp[-3, -11, 14][nn]]/3, 
       Inactive[Plus][-evalOp[-14, 3, 11][nn], evalOp[-14, 11, 3][nn], 
         -evalOp[-11, -3, 14][nn], evalOp[-3, -11, 14][nn]]/11, 
       Inactive[Plus][evalOp[-13, 3, 10][nn], -evalOp[-13, 10, 3][nn], 
         evalOp[-10, -3, 13][nn], -evalOp[-3, -10, 13][nn]]/3, 
       Inactive[Plus][-evalOp[-13, 3, 10][nn], evalOp[-13, 10, 3][nn], 
         -evalOp[-10, -3, 13][nn], evalOp[-3, -10, 13][nn]]/10, 
       Inactive[Plus][evalOp[-12, 3, 9][nn], -evalOp[-12, 9, 3][nn], 
         evalOp[-9, -3, 12][nn], -evalOp[-3, -9, 12][nn]]/3, 
       Inactive[Plus][-evalOp[-12, 3, 9][nn], evalOp[-12, 9, 3][nn], 
         -evalOp[-9, -3, 12][nn], evalOp[-3, -9, 12][nn]]/9, 
       Inactive[Plus][evalOp[-11, 3, 8][nn], -evalOp[-11, 8, 3][nn], 
         evalOp[-8, -3, 11][nn], -evalOp[-3, -8, 11][nn]]/3, 
       Inactive[Plus][-evalOp[-11, 3, 8][nn], evalOp[-11, 8, 3][nn], 
         -evalOp[-8, -3, 11][nn], evalOp[-3, -8, 11][nn]]/8, 
       Inactive[Plus][evalOp[-10, 3, 7][nn], -evalOp[-10, 7, 3][nn], 
         evalOp[-7, -3, 10][nn], -evalOp[-3, -7, 10][nn]]/3, 
       Inactive[Plus][-evalOp[-10, 3, 7][nn], evalOp[-10, 7, 3][nn], 
         -evalOp[-7, -3, 10][nn], evalOp[-3, -7, 10][nn]]/7, 
       Inactive[Plus][evalOp[-9, 3, 6][nn], -evalOp[-9, 6, 3][nn], 
         evalOp[-6, -3, 9][nn], -evalOp[-3, -6, 9][nn]]/3, 
       Inactive[Plus][-evalOp[-9, 3, 6][nn], evalOp[-9, 6, 3][nn], 
         -evalOp[-6, -3, 9][nn], evalOp[-3, -6, 9][nn]]/6, 
       Inactive[Plus][evalOp[-8, 3, 5][nn], -evalOp[-8, 5, 3][nn], 
         evalOp[-5, -3, 8][nn], -evalOp[-3, -5, 8][nn]]/3, 
       Inactive[Plus][-evalOp[-8, 3, 5][nn], evalOp[-8, 5, 3][nn], 
         -evalOp[-5, -3, 8][nn], evalOp[-3, -5, 8][nn]]/5, 
       Inactive[Plus][evalOp[-7, 3, 4][nn], -evalOp[-7, 4, 3][nn], 
         evalOp[-4, -3, 7][nn], -evalOp[-3, -4, 7][nn]]/3, 
       Inactive[Plus][-evalOp[-7, 3, 4][nn], evalOp[-7, 4, 3][nn], 
         -evalOp[-4, -3, 7][nn], evalOp[-3, -4, 7][nn]]/4, 
       evalOp[-3, -1, 4][nn], evalOp[-3, 1, 2][nn], -evalOp[-3, 2, 1][nn], 
       Inactive[Plus][evalOp[-22, 2, 20][nn], -evalOp[-22, 20, 2][nn], 
         evalOp[-20, -2, 22][nn], -evalOp[-2, -20, 22][nn]]/2, 
       Inactive[Plus][-evalOp[-22, 2, 20][nn], evalOp[-22, 20, 2][nn], 
         -evalOp[-20, -2, 22][nn], evalOp[-2, -20, 22][nn]]/20, 
       Inactive[Plus][evalOp[-21, 2, 19][nn], -evalOp[-21, 19, 2][nn], 
         evalOp[-19, -2, 21][nn], -evalOp[-2, -19, 21][nn]]/2, 
       Inactive[Plus][-evalOp[-21, 2, 19][nn], evalOp[-21, 19, 2][nn], 
         -evalOp[-19, -2, 21][nn], evalOp[-2, -19, 21][nn]]/19, 
       Inactive[Plus][evalOp[-20, 2, 18][nn], -evalOp[-20, 18, 2][nn], 
         evalOp[-18, -2, 20][nn], -evalOp[-2, -18, 20][nn]]/2, 
       Inactive[Plus][-evalOp[-20, 2, 18][nn], evalOp[-20, 18, 2][nn], 
         -evalOp[-18, -2, 20][nn], evalOp[-2, -18, 20][nn]]/18, 
       Inactive[Plus][evalOp[-19, 2, 17][nn], -evalOp[-19, 17, 2][nn], 
         evalOp[-17, -2, 19][nn], -evalOp[-2, -17, 19][nn]]/2, 
       Inactive[Plus][-evalOp[-19, 2, 17][nn], evalOp[-19, 17, 2][nn], 
         -evalOp[-17, -2, 19][nn], evalOp[-2, -17, 19][nn]]/17, 
       Inactive[Plus][evalOp[-18, 2, 16][nn], -evalOp[-18, 16, 2][nn], 
         evalOp[-16, -2, 18][nn], -evalOp[-2, -16, 18][nn]]/2, 
       Inactive[Plus][-evalOp[-18, 2, 16][nn], evalOp[-18, 16, 2][nn], 
         -evalOp[-16, -2, 18][nn], evalOp[-2, -16, 18][nn]]/16, 
       Inactive[Plus][evalOp[-17, 2, 15][nn], -evalOp[-17, 15, 2][nn], 
         evalOp[-15, -2, 17][nn], -evalOp[-2, -15, 17][nn]]/2, 
       Inactive[Plus][-evalOp[-17, 2, 15][nn], evalOp[-17, 15, 2][nn], 
         -evalOp[-15, -2, 17][nn], evalOp[-2, -15, 17][nn]]/15, 
       Inactive[Plus][evalOp[-16, 2, 14][nn], -evalOp[-16, 14, 2][nn], 
         evalOp[-14, -2, 16][nn], -evalOp[-2, -14, 16][nn]]/2, 
       Inactive[Plus][-evalOp[-16, 2, 14][nn], evalOp[-16, 14, 2][nn], 
         -evalOp[-14, -2, 16][nn], evalOp[-2, -14, 16][nn]]/14, 
       Inactive[Plus][evalOp[-15, 2, 13][nn], -evalOp[-15, 13, 2][nn], 
         evalOp[-13, -2, 15][nn], -evalOp[-2, -13, 15][nn]]/2, 
       Inactive[Plus][-evalOp[-15, 2, 13][nn], evalOp[-15, 13, 2][nn], 
         -evalOp[-13, -2, 15][nn], evalOp[-2, -13, 15][nn]]/13, 
       Inactive[Plus][evalOp[-14, 2, 12][nn], -evalOp[-14, 12, 2][nn], 
         evalOp[-12, -2, 14][nn], -evalOp[-2, -12, 14][nn]]/2, 
       Inactive[Plus][-evalOp[-14, 2, 12][nn], evalOp[-14, 12, 2][nn], 
         -evalOp[-12, -2, 14][nn], evalOp[-2, -12, 14][nn]]/12, 
       Inactive[Plus][evalOp[-13, 2, 11][nn], -evalOp[-13, 11, 2][nn], 
         evalOp[-11, -2, 13][nn], -evalOp[-2, -11, 13][nn]]/2, 
       Inactive[Plus][-evalOp[-13, 2, 11][nn], evalOp[-13, 11, 2][nn], 
         -evalOp[-11, -2, 13][nn], evalOp[-2, -11, 13][nn]]/11, 
       Inactive[Plus][evalOp[-12, 2, 10][nn], -evalOp[-12, 10, 2][nn], 
         evalOp[-10, -2, 12][nn], -evalOp[-2, -10, 12][nn]]/2, 
       Inactive[Plus][-evalOp[-12, 2, 10][nn], evalOp[-12, 10, 2][nn], 
         -evalOp[-10, -2, 12][nn], evalOp[-2, -10, 12][nn]]/10, 
       Inactive[Plus][evalOp[-11, 2, 9][nn], -evalOp[-11, 9, 2][nn], 
         evalOp[-9, -2, 11][nn], -evalOp[-2, -9, 11][nn]]/2, 
       Inactive[Plus][-evalOp[-11, 2, 9][nn], evalOp[-11, 9, 2][nn], 
         -evalOp[-9, -2, 11][nn], evalOp[-2, -9, 11][nn]]/9, 
       Inactive[Plus][evalOp[-10, 2, 8][nn], -evalOp[-10, 8, 2][nn], 
         evalOp[-8, -2, 10][nn], -evalOp[-2, -8, 10][nn]]/2, 
       Inactive[Plus][-evalOp[-10, 2, 8][nn], evalOp[-10, 8, 2][nn], 
         -evalOp[-8, -2, 10][nn], evalOp[-2, -8, 10][nn]]/8, 
       Inactive[Plus][evalOp[-9, 2, 7][nn], -evalOp[-9, 7, 2][nn], 
         evalOp[-7, -2, 9][nn], -evalOp[-2, -7, 9][nn]]/2, 
       Inactive[Plus][-evalOp[-9, 2, 7][nn], evalOp[-9, 7, 2][nn], 
         -evalOp[-7, -2, 9][nn], evalOp[-2, -7, 9][nn]]/7, 
       Inactive[Plus][evalOp[-8, 2, 6][nn], -evalOp[-8, 6, 2][nn], 
         evalOp[-6, -2, 8][nn], -evalOp[-2, -6, 8][nn]]/2, 
       Inactive[Plus][-evalOp[-8, 2, 6][nn], evalOp[-8, 6, 2][nn], 
         -evalOp[-6, -2, 8][nn], evalOp[-2, -6, 8][nn]]/6, 
       Inactive[Plus][evalOp[-7, 2, 5][nn], -evalOp[-7, 5, 2][nn], 
         evalOp[-5, -2, 7][nn], -evalOp[-2, -5, 7][nn]]/2, 
       Inactive[Plus][-evalOp[-7, 2, 5][nn], evalOp[-7, 5, 2][nn], 
         -evalOp[-5, -2, 7][nn], evalOp[-2, -5, 7][nn]]/5, 
       Inactive[Plus][evalOp[-6, 2, 4][nn], -evalOp[-6, 4, 2][nn], 
         evalOp[-4, -2, 6][nn], -evalOp[-2, -4, 6][nn]]/2, 
       Inactive[Plus][-evalOp[-6, 2, 4][nn], evalOp[-6, 4, 2][nn], 
         -evalOp[-4, -2, 6][nn], evalOp[-2, -4, 6][nn]]/4, 
       Inactive[Plus][evalOp[-5, 2, 3][nn], -evalOp[-5, 3, 2][nn], 
         evalOp[-3, -2, 5][nn], -evalOp[-2, -3, 5][nn]]/2, 
       Inactive[Plus][-evalOp[-5, 2, 3][nn], evalOp[-5, 3, 2][nn], 
         -evalOp[-3, -2, 5][nn], evalOp[-2, -3, 5][nn]]/3, 
       evalOp[-2, -1, 3][nn], -evalOp[-1, -20, 21][nn], 
       Inactive[Plus][-evalOp[-21, 1, 20][nn], evalOp[-21, 20, 1][nn], 
         -evalOp[-20, -1, 21][nn], evalOp[-1, -20, 21][nn]]/20, 
       -evalOp[-1, -19, 20][nn], Inactive[Plus][-evalOp[-20, 1, 19][nn], 
         evalOp[-20, 19, 1][nn], -evalOp[-19, -1, 20][nn], 
         evalOp[-1, -19, 20][nn]]/19, -evalOp[-1, -18, 19][nn], 
       Inactive[Plus][-evalOp[-19, 1, 18][nn], evalOp[-19, 18, 1][nn], 
         -evalOp[-18, -1, 19][nn], evalOp[-1, -18, 19][nn]]/18, 
       -evalOp[-1, -17, 18][nn], Inactive[Plus][-evalOp[-18, 1, 17][nn], 
         evalOp[-18, 17, 1][nn], -evalOp[-17, -1, 18][nn], 
         evalOp[-1, -17, 18][nn]]/17, -evalOp[-1, -16, 17][nn], 
       Inactive[Plus][-evalOp[-17, 1, 16][nn], evalOp[-17, 16, 1][nn], 
         -evalOp[-16, -1, 17][nn], evalOp[-1, -16, 17][nn]]/16, 
       -evalOp[-1, -15, 16][nn], Inactive[Plus][-evalOp[-16, 1, 15][nn], 
         evalOp[-16, 15, 1][nn], -evalOp[-15, -1, 16][nn], 
         evalOp[-1, -15, 16][nn]]/15, -evalOp[-1, -14, 15][nn], 
       Inactive[Plus][-evalOp[-15, 1, 14][nn], evalOp[-15, 14, 1][nn], 
         -evalOp[-14, -1, 15][nn], evalOp[-1, -14, 15][nn]]/14, 
       -evalOp[-1, -13, 14][nn], Inactive[Plus][-evalOp[-14, 1, 13][nn], 
         evalOp[-14, 13, 1][nn], -evalOp[-13, -1, 14][nn], 
         evalOp[-1, -13, 14][nn]]/13, -evalOp[-1, -12, 13][nn], 
       Inactive[Plus][-evalOp[-13, 1, 12][nn], evalOp[-13, 12, 1][nn], 
         -evalOp[-12, -1, 13][nn], evalOp[-1, -12, 13][nn]]/12, 
       -evalOp[-1, -11, 12][nn], Inactive[Plus][-evalOp[-12, 1, 11][nn], 
         evalOp[-12, 11, 1][nn], -evalOp[-11, -1, 12][nn], 
         evalOp[-1, -11, 12][nn]]/11, -evalOp[-1, -10, 11][nn], 
       Inactive[Plus][-evalOp[-11, 1, 10][nn], evalOp[-11, 10, 1][nn], 
         -evalOp[-10, -1, 11][nn], evalOp[-1, -10, 11][nn]]/10, 
       -evalOp[-1, -9, 10][nn], Inactive[Plus][-evalOp[-10, 1, 9][nn], 
         evalOp[-10, 9, 1][nn], -evalOp[-9, -1, 10][nn], 
         evalOp[-1, -9, 10][nn]]/9, -evalOp[-1, -8, 9][nn], 
       Inactive[Plus][-evalOp[-9, 1, 8][nn], evalOp[-9, 8, 1][nn], 
         -evalOp[-8, -1, 9][nn], evalOp[-1, -8, 9][nn]]/8, 
       -evalOp[-1, -7, 8][nn], Inactive[Plus][-evalOp[-8, 1, 7][nn], 
         evalOp[-8, 7, 1][nn], -evalOp[-7, -1, 8][nn], evalOp[-1, -7, 8][nn]]/
        7, -evalOp[-1, -6, 7][nn], Inactive[Plus][-evalOp[-7, 1, 6][nn], 
         evalOp[-7, 6, 1][nn], -evalOp[-6, -1, 7][nn], evalOp[-1, -6, 7][nn]]/
        6, -evalOp[-1, -5, 6][nn], Inactive[Plus][-evalOp[-6, 1, 5][nn], 
         evalOp[-6, 5, 1][nn], -evalOp[-5, -1, 6][nn], evalOp[-1, -5, 6][nn]]/
        5, -evalOp[-1, -4, 5][nn], Inactive[Plus][-evalOp[-5, 1, 4][nn], 
         evalOp[-5, 4, 1][nn], -evalOp[-4, -1, 5][nn], evalOp[-1, -4, 5][nn]]/
        4, -evalOp[-1, -3, 4][nn], Inactive[Plus][-evalOp[-4, 1, 3][nn], 
         evalOp[-4, 3, 1][nn], -evalOp[-3, -1, 4][nn], evalOp[-1, -3, 4][nn]]/
        3, -evalOp[-1, -2, 3][nn], Inactive[Plus][-evalOp[-3, 1, 2][nn], 
         evalOp[-3, 2, 1][nn], -evalOp[-2, -1, 3][nn], evalOp[-1, -2, 3][nn]]/
        2])/(2*Sqrt[2])
 
$constant = {T, n, n1, n2}
 
$def["/Users/Tom/Mathematica/StringTheory/1008.2334.Anyons from Strings"] = {}
 
$defID := NBname["stub"]
 
NBname[type_String] := Module[{name = NotebookFileName[], 
      dir = FileNameDrop[NotebookFileName[], -1], 
      base = FileBaseName[NotebookFileName[]]}, Switch[type, "name", name, 
      "dir", dir, "base", base, "stub", FileNameJoin[{dir, base}]]]
 
$e[0] = Tensor[J, {0}, {Void}] -> Tensor[X, {Void}, {1}] . 
       Tensor[P, {Void}, {2}] - Tensor[X, {Void}, {2}] . 
       Tensor[P, {Void}, {1}]
 
$e[1] = Tensor[J, {1}, {Void}] -> 
     -Tensor[X, {Void}, {0}] . Tensor[P, {Void}, {2}] + 
      Tensor[X, {Void}, {2}] . Tensor[P, {Void}, {0}]
 
$e[2] = Tensor[J, {2}, {Void}] -> Tensor[X, {Void}, {0}] . 
       Tensor[P, {Void}, {1}] - Tensor[X, {Void}, {1}] . 
       Tensor[P, {Void}, {0}]
 
$e41All = {Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      (-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     -Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}] -> 
      Sqrt[2]*Tensor[Style["X", Italic], {"-"}, {Void}], 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      -((Tensor[X, {0}, {Void}] - Tensor[X, {1}, {Void}])/Sqrt[2]), 
     Tensor[X, {0}, {Void}] -> (Sqrt[2]*Tensor[X, {1}, {Void}] - 
        2*Tensor[Style["X", Italic], {"-"}, {Void}])/Sqrt[2], 
     Tensor[X, {1}, {Void}] -> (Sqrt[2]*Tensor[X, {0}, {Void}] + 
        2*Tensor[Style["X", Italic], {"-"}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      (-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     -Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}] -> 
      Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"-"}], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      -((Tensor[P, {Void}, {0}] - Tensor[P, {Void}, {1}])/Sqrt[2]), 
     Tensor[P, {Void}, {0}] -> (Sqrt[2]*Tensor[P, {Void}, {1}] - 
        2*Tensor[Style["P", Italic], {Void}, {"-"}])/Sqrt[2], 
     Tensor[P, {Void}, {1}] -> (Sqrt[2]*Tensor[P, {Void}, {0}] + 
        2*Tensor[Style["P", Italic], {Void}, {"-"}])/Sqrt[2], 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      (Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}] -> 
      Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}], 
     Tensor[X, {0}, {Void}] -> -((Sqrt[2]*Tensor[X, {1}, {Void}] - 
         2*Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2]), 
     Tensor[X, {1}, {Void}] -> -((Sqrt[2]*Tensor[X, {0}, {Void}] - 
         2*Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2]), 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}] -> 
      Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}], 
     Tensor[P, {Void}, {0}] -> -((Sqrt[2]*Tensor[P, {Void}, {1}] - 
         2*Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2]), 
     Tensor[P, {Void}, {1}] -> -((Sqrt[2]*Tensor[P, {Void}, {0}] - 
         2*Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2]), 
     Tensor[X, {0}, {Void}] -> (-Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
     -Tensor[Style["X", Italic], {"-"}, {Void}] + Tensor[Style["X", Italic], 
        {"+"}, {Void}] -> Sqrt[2]*Tensor[X, {0}, {Void}], 
     Tensor[X, {0}, {Void}] -> -((Tensor[Style["X", Italic], {"-"}, {Void}] - 
         Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2]), 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      (-2*Tensor[X, {0}, {Void}] + Sqrt[2]*Tensor[Style["X", Italic], {"+"}, 
          {Void}])/Sqrt[2], Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      (2*Tensor[X, {0}, {Void}] + Sqrt[2]*Tensor[Style["X", Italic], {"-"}, 
          {Void}])/Sqrt[2], Tensor[X, {1}, {Void}] -> 
      (Tensor[Style["X", Italic], {"-"}, {Void}] + Tensor[Style["X", Italic], 
         {"+"}, {Void}])/Sqrt[2], Tensor[Style["X", Italic], {"-"}, {Void}] + 
       Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      Sqrt[2]*Tensor[X, {1}, {Void}], Tensor[Style["X", Italic], {"-"}, 
       {Void}] -> -((-2*Tensor[X, {1}, {Void}] + 
         Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2]), 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      -((-2*Tensor[X, {1}, {Void}] + Sqrt[2]*Tensor[Style["X", Italic], 
           {"-"}, {Void}])/Sqrt[2]), Tensor[P, {Void}, {0}] -> 
      (-Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
     -Tensor[Style["P", Italic], {Void}, {"-"}] + Tensor[Style["P", Italic], 
        {Void}, {"+"}] -> Sqrt[2]*Tensor[P, {Void}, {0}], 
     Tensor[P, {Void}, {0}] -> -((Tensor[Style["P", Italic], {Void}, {"-"}] - 
         Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2]), 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      (-2*Tensor[P, {Void}, {0}] + Sqrt[2]*Tensor[Style["P", Italic], {Void}, 
          {"+"}])/Sqrt[2], Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (2*Tensor[P, {Void}, {0}] + Sqrt[2]*Tensor[Style["P", Italic], {Void}, 
          {"-"}])/Sqrt[2], Tensor[P, {Void}, {1}] -> 
      (Tensor[Style["P", Italic], {Void}, {"-"}] + Tensor[Style["P", Italic], 
         {Void}, {"+"}])/Sqrt[2], Tensor[Style["P", Italic], {Void}, {"-"}] + 
       Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      Sqrt[2]*Tensor[P, {Void}, {1}], Tensor[Style["P", Italic], {Void}, 
       {"-"}] -> -((-2*Tensor[P, {Void}, {1}] + 
         Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2]), 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      -((-2*Tensor[P, {Void}, {1}] + Sqrt[2]*Tensor[Style["P", Italic], 
           {Void}, {"-"}])/Sqrt[2]), Tensor[X, {2}, {Void}] -> 
      Tensor[Style["X", Italic], {}, {}], 
     Tensor[Style["X", Italic], {}, {}] -> Tensor[X, {2}, {Void}], 
     Tensor[P, {Void}, {2}] -> Tensor[Style["P", Italic], {}, {}], 
     Tensor[Style["P", Italic], {}, {}] -> Tensor[P, {Void}, {2}], 
     Tensor[Style["X", Italic], {Void}, {"-"}] -> Tensor[Style["X", Italic], 
       {"+"}, {Void}], Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      Tensor[Style["X", Italic], {Void}, {"-"}], 
     Tensor[Style["X", Italic], {Void}, {"+"}] -> Tensor[Style["X", Italic], 
       {"-"}, {Void}], Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      Tensor[Style["X", Italic], {Void}, {"+"}], Tensor[x, {}, {}] -> 
      Inactive[Integrate][Tensor[Style["X", Italic], {}, {}], \[Sigma]]/
       (2*Pi), Inactive[Integrate][Tensor[Style["X", Italic], {}, {}], 
       \[Sigma]] -> 2*Pi*Tensor[x, {}, {}], 
     Tensor[Style["X", Italic], {}, {}] -> 
      InverseFunction[Inactive[Integrate], 1, 2][2*Pi*Tensor[x, {}, {}], 
       \[Sigma]], \[Sigma] -> InverseFunction[Inactive[Integrate], 2, 2][
       Tensor[Style["X", Italic], {}, {}], 2*Pi*Tensor[x, {}, {}]], 
     Tensor[p, {}, {}] -> Inactive[Integrate][Tensor[Style["P", Italic], {}, 
         {}], \[Sigma]]/(2*Pi), Inactive[Integrate][
       Tensor[Style["P", Italic], {}, {}], \[Sigma]] -> 
      2*Pi*Tensor[p, {}, {}], Tensor[Style["P", Italic], {}, {}] -> 
      InverseFunction[Inactive[Integrate], 1, 2][2*Pi*Tensor[p, {}, {}], 
       \[Sigma]], \[Sigma] -> InverseFunction[Inactive[Integrate], 2, 2][
       Tensor[Style["P", Italic], {}, {}], 2*Pi*Tensor[p, {}, {}]], 
     Tensor[x, {"-"}, {Void}] -> Inactive[Integrate][
        Tensor[Style["X", Italic], {"-"}, {Void}], \[Sigma]]/(2*Pi), 
     Inactive[Integrate][Tensor[Style["X", Italic], {"-"}, {Void}], 
       \[Sigma]] -> 2*Pi*Tensor[x, {"-"}, {Void}], 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      InverseFunction[Inactive[Integrate], 1, 2][
       2*Pi*Tensor[x, {"-"}, {Void}], \[Sigma]], 
     \[Sigma] -> InverseFunction[Inactive[Integrate], 2, 2][
       Tensor[Style["X", Italic], {"-"}, {Void}], 
       2*Pi*Tensor[x, {"-"}, {Void}]], Tensor[p, {Void}, {"+"}] -> 
      Inactive[Integrate][Tensor[Style["P", Italic], {Void}, {"+"}], 
        \[Sigma]]/(2*Pi), Inactive[Integrate][Tensor[Style["P", Italic], 
        {Void}, {"+"}], \[Sigma]] -> 2*Pi*Tensor[p, {Void}, {"+"}], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      InverseFunction[Inactive[Integrate], 1, 2][
       2*Pi*Tensor[p, {Void}, {"+"}], \[Sigma]], 
     \[Sigma] -> InverseFunction[Inactive[Integrate], 2, 2][
       Tensor[Style["P", Italic], {Void}, {"+"}], 
       2*Pi*Tensor[p, {Void}, {"+"}]], 
     OverBar[Tensor[Style["X", Italic], {}, {}]] -> -Tensor[x, {}, {}] + 
       Tensor[Style["X", Italic], {}, {}], 
     -Tensor[x, {}, {}] + Tensor[Style["X", Italic], {}, {}] -> 
      OverBar[Tensor[Style["X", Italic], {}, {}]], 
     Tensor[Style["X", Italic], {}, {}] -> 
      OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}], 
     Tensor[x, {}, {}] -> -OverBar[Tensor[Style["X", Italic], {}, {}]] + 
       Tensor[Style["X", Italic], {}, {}], 
     OverBar[Tensor[Style["P", Italic], {}, {}]] -> -Tensor[p, {}, {}] + 
       Tensor[Style["P", Italic], {}, {}], 
     -Tensor[p, {}, {}] + Tensor[Style["P", Italic], {}, {}] -> 
      OverBar[Tensor[Style["P", Italic], {}, {}]], 
     Tensor[Style["P", Italic], {}, {}] -> 
      OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}], 
     Tensor[p, {}, {}] -> -OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       Tensor[Style["P", Italic], {}, {}], 
     OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] -> 
      -Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, {Void}], 
     -Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]], 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
       Tensor[x, {"-"}, {Void}], Tensor[x, {"-"}, {Void}] -> 
      -OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
       Tensor[Style["X", Italic], {"-"}, {Void}], 
     OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] -> 
      -Tensor[p, {Void}, {"+"}] + Tensor[Style["P", Italic], {Void}, {"+"}], 
     -Tensor[p, {Void}, {"+"}] + Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[p, {Void}, {"+"}], Tensor[p, {Void}, {"+"}] -> 
      -OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[Style["P", Italic], {Void}, {"+"}], 
     OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}] -> 
      Tensor[Style["X", Italic], {}, {}], 
     OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}] -> 
      Tensor[Style["P", Italic], {}, {}], 
     OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
       Tensor[x, {"-"}, {Void}] -> Tensor[Style["X", Italic], {"-"}, {Void}], 
     OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[p, {Void}, {"+"}] -> Tensor[Style["P", Italic], {Void}, {"+"}], 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> \[Tau], 
     \[Tau] -> Tensor[Style["X", Italic], {"+"}, {Void}], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> Tensor[p, {Void}, {"-"}], 
     Tensor[p, {Void}, {"-"}] -> Tensor[Style["P", Italic], {Void}, {"-"}], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
         tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
       (2*Tensor[p, {Void}, {"-"}]), 
     (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
         tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
       Tensor[p, {Void}, {"-"}] -> 2*Tensor[Style["P", Italic], {Void}, 
        {"+"}], Tensor[p, {Void}, {"-"}] -> 
      (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
         tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
       (2*Tensor[Style["P", Italic], {Void}, {"+"}]), 
     Tensor[P, {Void}, {\[Mu]}] -> 
      (-2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
          {"+"}] - T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], 
          \[Sigma]]*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
          \[Sigma]])/Tensor[P, {\[Mu]}, {Void}], 
     Tensor[P, {\[Mu]}, {Void}] -> 
      (-2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
          {"+"}] - T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], 
          \[Sigma]]*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
          \[Sigma]])/Tensor[P, {Void}, {\[Mu]}], 
     T -> -(Sqrt[-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
          2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
            {"+"}]]/(Sqrt[tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], 
           \[Sigma]]]*Sqrt[tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
           \[Sigma]]])), 
     T -> Sqrt[-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
         2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
           {"+"}]]/(Sqrt[tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], 
          \[Sigma]]]*Sqrt[tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
          \[Sigma]]]), Tensor[X, {Void}, {\[Mu]}] -> 
      InverseFunction[tuDDown["\[PartialD]"], 1, 2][
       (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
         2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
           {"+"}])/(T^2*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
          \[Sigma]]), \[Sigma]], 
     Solve[{Tensor[Style["P", Italic], {Void}, {"+"}] == 
        (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
          T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*
           tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]])/
         (2*Tensor[p, {Void}, {"-"}])}, {\[Sigma]}, Complexes, 
      MaxExtraConditions -> 0], tuDDown["\[PartialD]"][
       Tensor[X, {Void}, {\[Mu]}], \[Sigma]] -> 
      (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, {"+"}])/
       (T^2*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]]), 
     Tensor[X, {\[Mu]}, {Void}] -> InverseFunction[tuDDown["\[PartialD]"], 1, 
        2][(-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
         2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, 
           {"+"}])/(T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], 
          \[Sigma]]), \[Sigma]], tuDDown["\[PartialD]"][
       Tensor[X, {\[Mu]}, {Void}], \[Sigma]] -> 
      (-(Tensor[P, {Void}, {\[Mu]}]*Tensor[P, {\[Mu]}, {Void}]) - 
        2*Tensor[p, {Void}, {"-"}]*Tensor[Style["P", Italic], {Void}, {"+"}])/
       (T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]]), 
     tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] -> 0, 
     0 -> tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]], 
     Tensor[u, {}, {}] -> InverseFunction[tuDDown["\[PartialD]"], 1, 2][0, 
       \[Sigma]], \[Sigma] -> InverseFunction[tuDDown["\[PartialD]"], 2, 2][
       Tensor[u, {}, {}], 0], tuDDown["\[PartialD]"][Tensor[x, _, _], 
       \[Sigma]] -> 0, 0 -> tuDDown["\[PartialD]"][Tensor[x, _, _], 
       \[Sigma]], Tensor[x, _, _] -> InverseFunction[tuDDown["\[PartialD]"], 
        1, 2][0, \[Sigma]], \[Sigma] -> 
      InverseFunction[tuDDown["\[PartialD]"], 2, 2][Tensor[x, _, _], 0], 
     tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]] -> 0, 
     0 -> tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]], 
     Tensor[p, _, _] -> InverseFunction[tuDDown["\[PartialD]"], 1, 2][0, 
       \[Sigma]], \[Sigma] -> InverseFunction[tuDDown["\[PartialD]"], 2, 2][
       Tensor[p, _, _], 0], Inactive[Integrate][OverBar[a_], \[Sigma]] -> 0, 
     0 -> Inactive[Integrate][OverBar[a_], \[Sigma]], 
     OverBar[a_] -> InverseFunction[Inactive[Integrate], 1, 2][0, \[Sigma]], 
     \[Sigma] -> InverseFunction[Inactive[Integrate], 2, 2][OverBar[a_], 0], 
     tuDDown["\[PartialD]"][\[Tau], \[Sigma]] -> 0, 
     0 -> tuDDown["\[PartialD]"][\[Tau], \[Sigma]], 
     \[Tau] -> InverseFunction[tuDDown["\[PartialD]"], 1, 2][0, \[Sigma]], 
     \[Sigma] -> InverseFunction[tuDDown["\[PartialD]"], 2, 2][\[Tau], 0], 
     tuDDown["\[PartialD]"][\[Sigma], \[Tau]] -> 0, 
     0 -> tuDDown["\[PartialD]"][\[Sigma], \[Tau]], 
     \[Sigma] -> InverseFunction[tuDDown["\[PartialD]"], 1, 2][0, \[Tau]], 
     \[Tau] -> InverseFunction[tuDDown["\[PartialD]"], 2, 2][\[Sigma], 0], 
     Tensor[Style["X", Italic], {"-"}, {Void}]^(-1) -> 
      Sqrt[2]/(-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}]), 
     (-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])^(-1) -> 
      1/(Sqrt[2]*Tensor[Style["X", Italic], {"-"}, {Void}]), 
     Tensor[X, {0}, {Void}] -> Tensor[X, {1}, {Void}] - 
       Sqrt[2]*Tensor[Style["X", Italic], {"-"}, {Void}], 
     Tensor[X, {1}, {Void}] -> Tensor[X, {0}, {Void}] + 
       Sqrt[2]*Tensor[Style["X", Italic], {"-"}, {Void}], 
     Tensor[Style["P", Italic], {Void}, {"-"}]^(-1) -> 
      Sqrt[2]/(-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}]), 
     (-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])^(-1) -> 
      1/(Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"-"}]), 
     Tensor[P, {Void}, {0}] -> Tensor[P, {Void}, {1}] - 
       Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"-"}], 
     Tensor[P, {Void}, {1}] -> Tensor[P, {Void}, {0}] + 
       Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"-"}], 
     Tensor[Style["X", Italic], {"+"}, {Void}]^(-1) -> 
      Sqrt[2]/(Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}]), 
     (Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])^(-1) -> 
      1/(Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}]), 
     Tensor[X, {0}, {Void}] -> -Tensor[X, {1}, {Void}] + 
       Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}], 
     Tensor[X, {1}, {Void}] -> -Tensor[X, {0}, {Void}] + 
       Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}], 
     Tensor[Style["P", Italic], {Void}, {"+"}]^(-1) -> 
      Sqrt[2]/(Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}]), 
     (Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])^(-1) -> 
      1/(Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}]), 
     Tensor[P, {Void}, {0}] -> -Tensor[P, {Void}, {1}] + 
       Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}], 
     Tensor[P, {Void}, {1}] -> -Tensor[P, {Void}, {0}] + 
       Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}], 
     Tensor[X, {0}, {Void}]^(-1) -> 
      Sqrt[2]/(-Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}]), 
     (-Tensor[Style["X", Italic], {"-"}, {Void}] + Tensor[Style["X", Italic], 
         {"+"}, {Void}])^(-1) -> 1/(Sqrt[2]*Tensor[X, {0}, {Void}]), 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      -(Sqrt[2]*Tensor[X, {0}, {Void}]) + Tensor[Style["X", Italic], {"+"}, 
        {Void}], Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      Sqrt[2]*Tensor[X, {0}, {Void}] + Tensor[Style["X", Italic], {"-"}, 
        {Void}], Tensor[X, {1}, {Void}]^(-1) -> 
      Sqrt[2]/(Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}]), 
     (Tensor[Style["X", Italic], {"-"}, {Void}] + Tensor[Style["X", Italic], 
         {"+"}, {Void}])^(-1) -> 1/(Sqrt[2]*Tensor[X, {1}, {Void}]), 
     Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      Sqrt[2]*Tensor[X, {1}, {Void}] - Tensor[Style["X", Italic], {"+"}, 
        {Void}], Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      Sqrt[2]*Tensor[X, {1}, {Void}] - Tensor[Style["X", Italic], {"-"}, 
        {Void}], Tensor[P, {Void}, {0}]^(-1) -> 
      Sqrt[2]/(-Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}]), 
     (-Tensor[Style["P", Italic], {Void}, {"-"}] + Tensor[Style["P", Italic], 
         {Void}, {"+"}])^(-1) -> 1/(Sqrt[2]*Tensor[P, {Void}, {0}]), 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      -(Sqrt[2]*Tensor[P, {Void}, {0}]) + Tensor[Style["P", Italic], {Void}, 
        {"+"}], Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      Sqrt[2]*Tensor[P, {Void}, {0}] + Tensor[Style["P", Italic], {Void}, 
        {"-"}], Tensor[P, {Void}, {1}]^(-1) -> 
      Sqrt[2]/(Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}]), 
     (Tensor[Style["P", Italic], {Void}, {"-"}] + Tensor[Style["P", Italic], 
         {Void}, {"+"}])^(-1) -> 1/(Sqrt[2]*Tensor[P, {Void}, {1}]), 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      Sqrt[2]*Tensor[P, {Void}, {1}] - Tensor[Style["P", Italic], {Void}, 
        {"+"}], Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      Sqrt[2]*Tensor[P, {Void}, {1}] - Tensor[Style["P", Italic], {Void}, 
        {"-"}], Tensor[X, {2}, {Void}]^(-1) -> 
      Tensor[Style["X", Italic], {}, {}]^(-1), 
     Tensor[Style["X", Italic], {}, {}]^(-1) -> Tensor[X, {2}, {Void}]^(-1), 
     Tensor[P, {Void}, {2}]^(-1) -> Tensor[Style["P", Italic], {}, {}]^(-1), 
     Tensor[Style["P", Italic], {}, {}]^(-1) -> Tensor[P, {Void}, {2}]^(-1), 
     Tensor[Style["X", Italic], {Void}, {"-"}]^(-1) -> 
      Tensor[Style["X", Italic], {"+"}, {Void}]^(-1), 
     Tensor[Style["X", Italic], {"+"}, {Void}]^(-1) -> 
      Tensor[Style["X", Italic], {Void}, {"-"}]^(-1), 
     Tensor[Style["X", Italic], {Void}, {"+"}]^(-1) -> 
      Tensor[Style["X", Italic], {"-"}, {Void}]^(-1), 
     Tensor[Style["X", Italic], {"-"}, {Void}]^(-1) -> 
      Tensor[Style["X", Italic], {Void}, {"+"}]^(-1), 
     Tensor[x, {}, {}]^(-1) -> (2*Pi)/Inactive[Integrate][
        Tensor[Style["X", Italic], {}, {}], \[Sigma]], 
     Inactive[Integrate][Tensor[Style["X", Italic], {}, {}], \[Sigma]]^
       (-1) -> 1/(2*Pi*Tensor[x, {}, {}]), Tensor[p, {}, {}]^(-1) -> 
      (2*Pi)/Inactive[Integrate][Tensor[Style["P", Italic], {}, {}], 
        \[Sigma]], Inactive[Integrate][Tensor[Style["P", Italic], {}, {}], 
        \[Sigma]]^(-1) -> 1/(2*Pi*Tensor[p, {}, {}]), 
     Tensor[x, {"-"}, {Void}]^(-1) -> (2*Pi)/Inactive[Integrate][
        Tensor[Style["X", Italic], {"-"}, {Void}], \[Sigma]], 
     Inactive[Integrate][Tensor[Style["X", Italic], {"-"}, {Void}], \[Sigma]]^
       (-1) -> 1/(2*Pi*Tensor[x, {"-"}, {Void}]), 
     Tensor[p, {Void}, {"+"}]^(-1) -> (2*Pi)/Inactive[Integrate][
        Tensor[Style["P", Italic], {Void}, {"+"}], \[Sigma]], 
     Inactive[Integrate][Tensor[Style["P", Italic], {Void}, {"+"}], \[Sigma]]^
       (-1) -> 1/(2*Pi*Tensor[p, {Void}, {"+"}]), 
     OverBar[Tensor[Style["X", Italic], {}, {}]]^(-1) -> 
      (-Tensor[x, {}, {}] + Tensor[Style["X", Italic], {}, {}])^(-1), 
     (-Tensor[x, {}, {}] + Tensor[Style["X", Italic], {}, {}])^(-1) -> 
      OverBar[Tensor[Style["X", Italic], {}, {}]]^(-1), 
     OverBar[Tensor[Style["P", Italic], {}, {}]]^(-1) -> 
      (-Tensor[p, {}, {}] + Tensor[Style["P", Italic], {}, {}])^(-1), 
     (-Tensor[p, {}, {}] + Tensor[Style["P", Italic], {}, {}])^(-1) -> 
      OverBar[Tensor[Style["P", Italic], {}, {}]]^(-1), 
     OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]]^(-1) -> 
      (-Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, {Void}])^
       (-1), (-Tensor[x, {"-"}, {Void}] + Tensor[Style["X", Italic], {"-"}, 
         {Void}])^(-1) -> OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]]^
       (-1), OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]]^(-1) -> 
      (-Tensor[p, {Void}, {"+"}] + Tensor[Style["P", Italic], {Void}, {"+"}])^
       (-1), (-Tensor[p, {Void}, {"+"}] + Tensor[Style["P", Italic], {Void}, 
         {"+"}])^(-1) -> OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]]^
       (-1), Tensor[Style["X", Italic], {}, {}]^(-1) -> 
      (OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}])^(-1), 
     (OverBar[Tensor[Style["X", Italic], {}, {}]] + Tensor[x, {}, {}])^
       (-1) -> Tensor[Style["X", Italic], {}, {}]^(-1), 
     Tensor[Style["P", Italic], {}, {}]^(-1) -> 
      (OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}])^(-1), 
     (OverBar[Tensor[Style["P", Italic], {}, {}]] + Tensor[p, {}, {}])^
       (-1) -> Tensor[Style["P", Italic], {}, {}]^(-1), 
     Tensor[Style["X", Italic], {"-"}, {Void}]^(-1) -> 
      (OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
        Tensor[x, {"-"}, {Void}])^(-1), 
     (OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] + 
        Tensor[x, {"-"}, {Void}])^(-1) -> Tensor[Style["X", Italic], {"-"}, 
        {Void}]^(-1), Tensor[Style["P", Italic], {Void}, {"+"}]^(-1) -> 
      (OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
        Tensor[p, {Void}, {"+"}])^(-1), 
     (OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
        Tensor[p, {Void}, {"+"}])^(-1) -> Tensor[Style["P", Italic], {Void}, 
        {"+"}]^(-1), Tensor[Style["X", Italic], {"+"}, {Void}]^(-1) -> 
      \[Tau]^(-1), \[Tau]^(-1) -> Tensor[Style["X", Italic], {"+"}, {Void}]^
       (-1), Tensor[Style["P", Italic], {Void}, {"-"}]^(-1) -> 
      Tensor[p, {Void}, {"-"}]^(-1), Tensor[p, {Void}, {"-"}]^(-1) -> 
      Tensor[Style["P", Italic], {Void}, {"-"}]^(-1), 
     Tensor[Style["P", Italic], {Void}, {"+"}]^(-1) -> 
      (2*Tensor[p, {Void}, {"-"}])/(-(Tensor[P, {Void}, {\[Mu]}]*
          Tensor[P, {\[Mu]}, {Void}]) - T^2*tuDDown["\[PartialD]"][
          Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*tuDDown["\[PartialD]"][
          Tensor[X, {\[Mu]}, {Void}], \[Sigma]]), 
     Tensor[p, {Void}, {"-"}]/(-(Tensor[P, {Void}, {\[Mu]}]*
          Tensor[P, {\[Mu]}, {Void}]) - T^2*tuDDown["\[PartialD]"][
          Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*tuDDown["\[PartialD]"][
          Tensor[X, {\[Mu]}, {Void}], \[Sigma]]) -> 
      1/(2*Tensor[Style["P", Italic], {Void}, {"+"}]), 
     Solve[{Tensor[Style["P", Italic], {Void}, {"+"}]^(-1) == 
        (2*Tensor[p, {Void}, {"-"}])/(-(Tensor[P, {Void}, {\[Mu]}]*
            Tensor[P, {\[Mu]}, {Void}]) - T^2*tuDDown["\[PartialD]"][
            Tensor[X, {Void}, {\[Mu]}], \[Sigma]]*tuDDown["\[PartialD]"][
            Tensor[X, {\[Mu]}, {Void}], \[Sigma]])}, {\[Sigma]}, Complexes, 
      MaxExtraConditions -> 0], tuDDown["\[PartialD]"][Tensor[u, {}, {}], 
        \[Sigma]]^(-1) -> ComplexInfinity, ComplexInfinity -> 
      tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]]^(-1), 
     Solve[{tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]]^(-1) == 
        ComplexInfinity}, {Tensor[u, {}, {}]}, Complexes, 
      MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]]^(-1) == 
        ComplexInfinity}, {tuDDown["\[PartialD]"][Tensor[u, {}, {}], 
        \[Sigma]]}, Complexes, MaxExtraConditions -> 0], 
     tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]]^(-1) -> 
      ComplexInfinity, ComplexInfinity -> 
      tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]]^(-1), 
     Solve[{tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {Tensor[x, _, _]}, Complexes, 
      MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[x, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {tuDDown["\[PartialD]"][Tensor[x, _, _], 
        \[Sigma]]}, Complexes, MaxExtraConditions -> 0], 
     tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]]^(-1) -> 
      ComplexInfinity, ComplexInfinity -> 
      tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]]^(-1), 
     Solve[{tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {Tensor[p, _, _]}, Complexes, 
      MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][Tensor[p, _, _], \[Sigma]]^(-1) == 
        ComplexInfinity}, {tuDDown["\[PartialD]"][Tensor[p, _, _], 
        \[Sigma]]}, Complexes, MaxExtraConditions -> 0], 
     Inactive[Integrate][OverBar[a_], \[Sigma]]^(-1) -> ComplexInfinity, 
     ComplexInfinity -> Inactive[Integrate][OverBar[a_], \[Sigma]]^(-1), 
     Solve[{Inactive[Integrate][OverBar[a_], \[Sigma]]^(-1) == 
        ComplexInfinity}, {OverBar[a_]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{Inactive[Integrate][OverBar[a_], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{Inactive[Integrate][OverBar[a_], \[Sigma]]^(-1) == 
        ComplexInfinity}, {Inactive[Integrate][OverBar[a_], \[Sigma]]}, 
      Complexes, MaxExtraConditions -> 0], 
     tuDDown["\[PartialD]"][\[Tau], \[Sigma]]^(-1) -> ComplexInfinity, 
     ComplexInfinity -> tuDDown["\[PartialD]"][\[Tau], \[Sigma]]^(-1), 
     Solve[{tuDDown["\[PartialD]"][\[Tau], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Tau]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][\[Tau], \[Sigma]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][\[Tau], \[Sigma]]^(-1) == 
        ComplexInfinity}, {tuDDown["\[PartialD]"][\[Tau], \[Sigma]]}, 
      Complexes, MaxExtraConditions -> 0], 
     tuDDown["\[PartialD]"][\[Sigma], \[Tau]]^(-1) -> ComplexInfinity, 
     ComplexInfinity -> tuDDown["\[PartialD]"][\[Sigma], \[Tau]]^(-1), 
     Solve[{tuDDown["\[PartialD]"][\[Sigma], \[Tau]]^(-1) == 
        ComplexInfinity}, {\[Sigma]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][\[Sigma], \[Tau]]^(-1) == 
        ComplexInfinity}, {\[Tau]}, Complexes, MaxExtraConditions -> 0], 
     Solve[{tuDDown["\[PartialD]"][\[Sigma], \[Tau]]^(-1) == 
        ComplexInfinity}, {tuDDown["\[PartialD]"][\[Sigma], \[Tau]]}, 
      Complexes, MaxExtraConditions -> 0]}
 
$eom = {Tensor[P, {Void}, {\[Mu]}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
         \[Sigma]] - tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], 
        \[Tau]] -> 0, Tensor[P, {Void}, {\[Mu]}] . tuDDown["\[PartialD]"][
        Tensor[X, {\[Mu]}, {Void}], \[Sigma]] -> 0, 
     -(Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[P, {Void}, {\[Mu]}], 
          \[Sigma]]) + tuDDown["\[PartialD]"][Tensor[P, {Void}, {\[Mu]}], 
        \[Tau]] - Tensor[P, {Void}, {\[Mu]}]*tuDDown["\[PartialD]"][
         Tensor[u, {}, {}], \[Sigma]] - 
       T^2*(tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]]*
          tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] + 
         Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
           tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]], 
           \[Sigma]]) -> 0, Tensor[P, {\[Mu]}, {Void}] . 
        Tensor[P, {Void}, {\[Mu]}] + 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]] . 
         tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] -> 0}
 
$eom1 = {OverBar[Tensor[Style["P", Italic], {}, {}]]*Tensor[\[ScriptL], {}, 
         {}] + Tensor[p, {}, {}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] - 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
        \[Tau]] - tuDDown["\[PartialD]"][Tensor[x, {}, {}], \[Tau]] -> 0, 
     -1 + Tensor[p, {Void}, {"-"}]*Tensor[\[ScriptL], {}, {}] -> 0, 
     Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["P", Italic], {}, {}]], \[Sigma]] - 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["P", Italic], {}, {}]], 
        \[Tau]] + OverBar[Tensor[Style["P", Italic], {}, {}]]*
        tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] + 
       Tensor[p, {}, {}]*tuDDown["\[PartialD]"][Tensor[u, {}, {}], 
         \[Sigma]] + T^2*tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]]*
        tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] + 
       T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
          \[Sigma]], \[Sigma]] -> 0, Tensor[p, {Void}, {"-"}]*
       tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] -> 0, 
     tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] . OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
         \[Sigma]] . Tensor[p, {}, {}] + tuDDown["\[PartialD]"][
         OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]], \[Sigma]] . 
        Tensor[p, {Void}, {"-"}] -> 0, 
     OverBar[Tensor[Style["P", Italic], {}, {}]] . 
        OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       OverBar[Tensor[Style["P", Italic], {}, {}]] . Tensor[p, {}, {}] + 
       OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] . 
        Tensor[p, {Void}, {"-"}] + Tensor[p, {}, {}] . 
        OverBar[Tensor[Style["P", Italic], {}, {}]] + 
       Tensor[p, {}, {}] . Tensor[p, {}, {}] + Tensor[p, {Void}, {"-"}] . 
        OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] + 
       Tensor[p, {Void}, {"-"}] . Tensor[p, {Void}, {"+"}] + 
       Tensor[p, {Void}, {"+"}] . Tensor[p, {Void}, {"-"}] + 
       T^2*tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, 
            {}]], \[Sigma]] . tuDDown["\[PartialD]"][
          OverBar[Tensor[Style["X", Italic], {}, {}]], \[Sigma]] -> 0}
 
$eom2 = {Tensor[\[ScriptL], {}, {}]*Tensor[Style["P", Italic], {}, {}] + 
       Sqrt[2]*Tensor[\[ScriptL], {}, {}]*Tensor[Style["P", Italic], {Void}, 
         {"+"}] + Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         Tensor[Style["X", Italic], {}, {}], \[Sigma]] - 
       tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {}, {}], \[Tau]] + 
       Sqrt[2]*Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         Tensor[Style["X", Italic], {"+"}, {Void}], \[Sigma]] - 
       Sqrt[2]*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {"+"}, 
          {Void}], \[Tau]] -> 0, Tensor[P, {Void}, {\[Mu]}] . 
       tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] -> 0, 
     -(Tensor[Style["P", Italic], {}, {}]*tuDDown["\[PartialD]"][
          Tensor[u, {}, {}], \[Sigma]]) - Sqrt[2]*Tensor[Style["P", Italic], 
         {Void}, {"+"}]*tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] - 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[Style["P", Italic], 
          {}, {}], \[Sigma]] + tuDDown["\[PartialD]"][
        Tensor[Style["P", Italic], {}, {}], \[Tau]] - 
       Sqrt[2]*Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         Tensor[Style["P", Italic], {Void}, {"+"}], \[Sigma]] + 
       Sqrt[2]*tuDDown["\[PartialD]"][Tensor[Style["P", Italic], {Void}, 
          {"+"}], \[Tau]] - T^2*tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, 
          {}], \[Sigma]]*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], 
          {}, {}], \[Sigma]] - Sqrt[2]*T^2*tuDDown["\[PartialD]"][
         Tensor[\[ScriptL], {}, {}], \[Sigma]]*tuDDown["\[PartialD]"][
         Tensor[Style["X", Italic], {"+"}, {Void}], \[Sigma]] - 
       T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {}, {}], 
          \[Sigma]], \[Sigma]] - Sqrt[2]*T^2*Tensor[\[ScriptL], {}, {}]*
        tuDDown["\[PartialD]"][tuDDown["\[PartialD]"][
          Tensor[Style["X", Italic], {"+"}, {Void}], \[Sigma]], \[Sigma]] -> 
      0, Tensor[Style["P", Italic], {}, {}] . Tensor[Style["P", Italic], {}, 
         {}] + Tensor[Style["P", Italic], {Void}, {"-"}] . 
        Tensor[Style["P", Italic], {Void}, {"+"}] + 
       Tensor[Style["P", Italic], {Void}, {"+"}] . Tensor[Style["P", Italic], 
         {Void}, {"-"}] + T^2*tuDDown["\[PartialD]"][
          Tensor[Style["X", Italic], {}, {}], \[Sigma]] . 
         tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {}, {}], 
          \[Sigma]] + T^2*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], 
           {"-"}, {Void}], \[Sigma]] . tuDDown["\[PartialD]"][
          Tensor[Style["X", Italic], {"+"}, {Void}], \[Sigma]] + 
       T^2*tuDDown["\[PartialD]"][Tensor[Style["X", Italic], {"+"}, {Void}], 
          \[Sigma]] . tuDDown["\[PartialD]"][Tensor[Style["X", Italic], 
           {"-"}, {Void}], \[Sigma]] -> 0}
 
$eomExpand = {Tensor[P, {Void}, {0}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[P, {Void}, {1}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[P, {Void}, {2}]*Tensor[\[ScriptL], {}, {}] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[X, {0}, {Void}], 
         \[Sigma]] - tuDDown["\[PartialD]"][Tensor[X, {0}, {Void}], \[Tau]] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[X, {1}, {Void}], 
         \[Sigma]] - tuDDown["\[PartialD]"][Tensor[X, {1}, {Void}], \[Tau]] + 
       Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[X, {2}, {Void}], 
         \[Sigma]] - tuDDown["\[PartialD]"][Tensor[X, {2}, {Void}], 
        \[Tau]] -> 0, Tensor[P, {Void}, {\[Mu]}] . tuDDown["\[PartialD]"][
        Tensor[X, {\[Mu]}, {Void}], \[Sigma]] -> 0, 
     -(Tensor[u, {}, {}]*tuDDown["\[PartialD]"][Tensor[P, {Void}, {0}], 
          \[Sigma]]) + tuDDown["\[PartialD]"][Tensor[P, {Void}, {0}], 
        \[Tau]] - Tensor[u, {}, {}]*tuDDown["\[PartialD]"][
         Tensor[P, {Void}, {1}], \[Sigma]] + tuDDown["\[PartialD]"][
        Tensor[P, {Void}, {1}], \[Tau]] - Tensor[u, {}, {}]*
        tuDDown["\[PartialD]"][Tensor[P, {Void}, {2}], \[Sigma]] + 
       tuDDown["\[PartialD]"][Tensor[P, {Void}, {2}], \[Tau]] - 
       Tensor[P, {Void}, {0}]*tuDDown["\[PartialD]"][Tensor[u, {}, {}], 
         \[Sigma]] - Tensor[P, {Void}, {1}]*tuDDown["\[PartialD]"][
         Tensor[u, {}, {}], \[Sigma]] - Tensor[P, {Void}, {2}]*
        tuDDown["\[PartialD]"][Tensor[u, {}, {}], \[Sigma]] - 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {0}, {Void}], \[Sigma]]*
        tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] - 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {1}, {Void}], \[Sigma]]*
        tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] - 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {2}, {Void}], \[Sigma]]*
        tuDDown["\[PartialD]"][Tensor[\[ScriptL], {}, {}], \[Sigma]] - 
       T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][Tensor[X, {0}, {Void}], \[Sigma]], 
         \[Sigma]] - T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][Tensor[X, {1}, {Void}], \[Sigma]], 
         \[Sigma]] - T^2*Tensor[\[ScriptL], {}, {}]*tuDDown["\[PartialD]"][
         tuDDown["\[PartialD]"][Tensor[X, {2}, {Void}], \[Sigma]], 
         \[Sigma]] -> 0, Tensor[P, {0}, {Void}] . Tensor[P, {Void}, {0}] + 
       Tensor[P, {1}, {Void}] . Tensor[P, {Void}, {1}] + 
       Tensor[P, {2}, {Void}] . Tensor[P, {Void}, {2}] + 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {0}], \[Sigma]] . 
         tuDDown["\[PartialD]"][Tensor[X, {0}, {Void}], \[Sigma]] + 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {1}], \[Sigma]] . 
         tuDDown["\[PartialD]"][Tensor[X, {1}, {Void}], \[Sigma]] + 
       T^2*tuDDown["\[PartialD]"][Tensor[X, {Void}, {2}], \[Sigma]] . 
         tuDDown["\[PartialD]"][Tensor[X, {2}, {Void}], \[Sigma]] -> 0}
 
$g = {}
 
$lagrangianB = \[ScriptCapitalL] -> 
     tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Tau]] . 
       Tensor[P, {Void}, {\[Mu]}] - 
      tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] . 
        Tensor[P, {Void}, {\[Mu]}]*Tensor[u, {}, {}] - 
      ((Tensor[P, {Void}, {\[Mu]}] . Tensor[P, {\[Mu]}, {Void}] + 
         T^2*tuDDown["\[PartialD]"][Tensor[X, {\[Mu]}, {Void}], \[Sigma]] . 
           tuDDown["\[PartialD]"][Tensor[X, {Void}, {\[Mu]}], \[Sigma]])*
        Tensor[\[ScriptL], {}, {}])/2
 
$metric = {Tensor[X, {Void}, {0}] -> -Tensor[X, {0}, {Void}], 
      Tensor[X, {Void}, {1}] -> Tensor[X, {1}, {Void}], 
      Tensor[X, {Void}, {2}] -> Tensor[X, {2}, {Void}], 
      Tensor[P, {0}, {Void}] -> -Tensor[P, {Void}, {0}], 
      Tensor[P, {1}, {Void}] -> Tensor[P, {Void}, {1}], 
      Tensor[P, {2}, {Void}] -> Tensor[P, {Void}, {2}]}[
     Style["Minkowski metric relationships", RGBColor[0, 2/3, 0], 
      FontFamily -> "Helvetica"]]
 
$noOverBar = {OverBar[Tensor[Style["X", Italic], {}, {}]] -> 
      Tensor[iXbar, {}, {}], OverBar[Tensor[Style["P", Italic], {}, {}]] -> 
      Tensor[iPbar, {}, {}], OverBar[Tensor[Style["P", Italic], {Void}, 
        {"+"}]] -> Tensor[iPbar, {Void}, {"+"}], 
     OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] -> 
      Tensor[iXbar, {"-"}, {Void}]}
 
$order\[Mu]\[Mu] := {dd:(a_) . (b_) :> If[tuHasAllQ[{a, b}, \[Mu]] && 
        OrderedQ[{b, a}], Reverse[dd], dd], dd:(a_) . (b_) :> 
      If[tuHasAllQ[{a, b}, \[Mu]] && tuHasAnyQ[{b}, T[X, "d", {\[Mu]}]], 
       tuIndexSwapUpDown[\[Mu]][dd], dd], dd:(a_) . (b_) :> 
      If[tuHasAllQ[{a, b}, \[Mu]] && tuHasAnyQ[{b}, T[P, "u", {\[Mu]}]], 
       tuIndexSwapUpDown[\[Mu]][dd], dd]}
 
tuHasAllQ[exp_, items_] := And @@ ( !FreeQ[exp, #1] & ) /@ Flatten[{items}]
 
tuHasAllQ /: tuHasAllQ::usage = "tuHasAllQ[exp_,items_List] returns True if \
exp_ has (!FreeQ) all items in items_List. *18Jul2015*"
 
tuHasAnyQ[exp_, items_] := Or @@ ( !FreeQ[exp, #1] & ) /@ Flatten[{items}]
 
tuHasAnyQ /: tuHasAnyQ::usage = "tuHasAnyQ[exp_,items_List] returns True if \
exp_ has any item(FreeQ) in items_List. *18Jul2015*"
 
tuIndexSwapUpDown[index_][exp_] := Module[{tmp = exp, XXXX, YYYY}, 
     If[Head[index] =!= List, tmp = tuIndicesLower[index, XXXX][tmp]; 
        tmp = tuIndicesRaise[index, YYYY][tmp]; 
        tmp = tmp /. XXXX -> index /. YYYY -> index, 
       tmp = Fold[tuIndexSwapUpDown[#2][#1] & , exp, index]]; tmp]
 
tuIndexSwapUpDown /: tuIndexSwapUpDown::usage = "tuIndexSwapUpDown[index_][ex\
p_] swaps UpDn position of index_ in exp_. index_ may be List in which case \
the indices are Fold[]d over List. *22Oct2015*"
 
tuIndicesLower[from_, to_:{}][exp_] := 
    Module[{$ = exp, $s, $f = Flatten[{from}], $t = Flatten[{to}]}, 
     If[Length[$f] != Length[$t], $t = $f]; 
      $s = Thread[tuIndexLowerAll[$f, $t]]; Fold[#2[#1] & , $, $s]]
 
tuIndicesLower /: tuIndicesLower::usage = "tuIndicesLower[from_,to_:{}][exp_] \
lowers from_ indices to to_ indices. from_ and to_ may be lists of indices \
then the lowering is performed pairwise.  If to_ is omitted or not equal in \
Length then to_ = from_.  *29May2015*"
 
$s = n -> 2
 
tuIndexLowerAll[from_, to_][exp_] := Module[{upD, dnD, opD, subd, ipos, ip, 
      xexp, xfrom, xto, $Pattern}, opD = DerivOpsU; upD = List @@ opD; 
      dnD = List @@ DerivOpsD; subd = Thread[upD -> RemovePatterns[dnD]]; 
      subd = ((#1 /. a_ :> If[Head[a] === Symbol, a, Head[a]] & ) /@ 
          #1 & ) /@ subd; {xexp, xfrom, xto} = 
       (#1 //. Pattern -> $Pattern & ) /@ {exp, from, to}; 
      xexp = xexp //. t$:Tensor[A_, u_List, d_List] :> 
         tuIndexLower[xfrom, xto][t$]; 
      xexp = xexp //. (OP:opD)[a_, b_] :> (OP //. subd)[a, xto] /; 
          (b //. Pattern -> $Pattern) == xfrom; xexp //. $Pattern -> Pattern]
 
tuIndexLowerAll /: tuIndexLowerAll::usage = "tuIndexLowerAll[from_,to_][exp_] \
lowers one index from_ to to_ found in exp_.  Handles indices in DerivOpsD to \
DerivOpsU *20Jun2015*"
 
ip := Style["p", Italic]
 
DerivOpsU := Join[xPartialDu | xCovariantDu | xDu[_], tuDerivOpsU]
 
xPartialDu[field_, var_] := tuPartialDu[field, var]
 
tuPartialDu := tuDPartialu
 
tuPartialDu /: tuPartialDu::usage = "tuPartialDu[field_,var_] displays the \
PartialDu[field,var] \[Rule] \!\(\*SuperscriptBox[\(\[PartialD]\), \
\(var\)]\)field. "
 
tuDPartialu[a_, b_] := tuDUp["\[PartialD]"][a, b]
 
tuDerivOpsU := tuDPartialu | tuDCovariantu | tuDsu[_] | tuDUp[_]
 
tuDCovariantu[a_, b_] := tuDUp["\[Del]"][a, b]
 
tuDsu[s_][a_, b_] := tuDUp[s][a, b]
 
DerivOpsD := Join[xPartialD | xCovariantD | xD[_], tuDerivOpsD]
 
xPartialD[field_, var_] := tuPartialD[field, var]
 
tuPartialD := tuDPartial
 
tuPartialD /: tuPartialD::usage = "tuPartialD[field_,var_] displays the \
PartialD[field,var] \[Rule] \!\(\*SubscriptBox[\(\[PartialD]\), \
\(var\)]\)field. "
 
tuDPartial[a_, b_] := tuDDown["\[PartialD]"][a, b]
 
tuDerivOpsD := tuDPartial | tuDCovariant | tuDs[_] | tuDDown[_]
 
tuDCovariant[a_, b_] := tuDDown["\[Del]"][a, b]
 
tuDs[s_][a_, b_] := tuDDown[s][a, b]
 
RemovePatterns[exp_] := tuPatternRemove[exp]
 
tuPatternRemove[exp_] := Module[{tmp = exp, xPattern}, 
     tmp = tmp /. PatternTest -> xPatternTest /. xPatternTest[a_, b_] -> a; 
      tmp = tmp //. Pattern -> xPattern //. Blank -> xBlank //. 
        BlankSequence -> xBlankSequence; 
      tmp = tmp //. xPattern[a_, xBlank[] | xBlankSequence[]] -> a; 
      tmp = tmp /. xPattern -> Pattern]
 
tuPatternRemove /: tuPatternRemove::usage = "tuPatternRemove[exp_] removes \
Pattern[a_,Blank[]|BlankSequence[]]:>a in all of exp_ *24Nov2013"
 
Attributes[t$] = {Temporary}
 
tuIndexLower[var1_, var2_][A_Tensor] := Module[{Name$, u$, d$, $swap}, 
     {Name$, u$, d$} = List @@ A; {u$, d$} = If[MemberQ[u$, var1], 
        u$ = u$ //. var1 -> $swap; SwapVarFromAtoB[$swap, u$, d$], {u$, d$}]; 
      {d$, u$} = {d$, u$} //. $swap -> var2; Tensor[Name$, u$, d$]]
 
tuIndexLower /: tuIndexLower::usage = "tuIndexLower[var1_,var2_][A_Tensor] \
lowers index var1_ to var2_ in A_Tensor. eg: $exp/. \
tt:Tensor[\[Gamma],{ii:_},{_}]\[RuleDelayed]tuIndexLower[ii,ii][tt] \
*23Apr2015*"
 
Attributes[u$] = {Temporary}
 
Attributes[d$] = {Temporary}
 
SwapVarFromAtoB[var_, A_List, B_List] := 
    Module[{tmp, pos, xpos, i, len, xA = A, xB = B}, 
     If[Length[xA] == Length[xB], pos = Flatten[Position[xA, var, 1]]; 
        len = Length[pos]; If[len > 0, For[i = 1, i <= len, i++, 
           xpos = pos[[i]]; tmp = xB[[xpos]]; xB[[xpos]] = xA[[xpos]]; 
            xA[[xpos]] = tmp; ]; ]; ]; {xA, xB}]
 
tuIndicesRaise[from_, to_:{}][exp_] := 
    Module[{$ = exp, $s, $f = Flatten[{from}], $t = Flatten[{to}]}, 
     If[Length[$f] != Length[$t], $t = $f]; 
      $s = Thread[tuIndexRaiseAll[$f, $t]]; Fold[#2[#1] & , $, $s]]
 
tuIndicesRaise /: tuIndicesRaise::usage = "tuIndicesRaise[from_,to_:{}][exp_] \
raises from_ indices to to_ indices. from_ and to_ may be lists of indices \
then the raising is performed pairwise.  If to_ is omitted or not equal in \
Length then to_ = from_.  *29May2015*"
 
tuIndexRaiseAll[from_, to_][exp_] := Module[{upD, dnD, opD, subd, ipos, ip, 
      xexp, xfrom, xto, $Pattern}, opD = DerivOpsD; dnD = List @@ opD; 
      upD = List @@ DerivOpsU; subd = Thread[dnD -> RemovePatterns[upD]]; 
      subd = ((#1 /. a_ :> If[Head[a] === Symbol, a, Head[a]] & ) /@ 
          #1 & ) /@ subd; {xexp, xfrom, xto} = 
       (#1 //. Pattern -> $Pattern & ) /@ {exp, from, to}; 
      xexp = xexp //. t$:Tensor[A_, u_List, d_List] :> 
         tuIndexRaise[xfrom, xto][t$]; 
      xexp = xexp //. (OP:opD)[a_, b_] :> (OP /. subd)[a, xto] /; 
          (b //. Pattern -> $Pattern) == xfrom; xexp //. $Pattern -> Pattern]
 
tuIndexRaiseAll /: tuIndexRaiseAll::usage = "tuIndexRaiseAll[from_,to_][exp_] \
raises one index from_ to to_ found in exp_.  Handles indices in DerivOpsD to \
DerivOpsU *20Jun2015*"
 
tuIndexRaise[var1_, var2_][A_Tensor] := Module[{Name$, u$, d$, $swap}, 
     {Name$, u$, d$} = List @@ A; {d$, u$} = If[MemberQ[d$, var1], 
        d$ = d$ //. var1 -> $swap; SwapVarFromAtoB[$swap, d$, u$], {d$, u$}]; 
      {d$, u$} = {d$, u$} //. $swap -> var2; Tensor[Name$, u$, d$]]
 
tuIndexRaise /: tuIndexRaise::usage = "tuIndexRaise[var1_,var2_][A_Tensor] \
raises index var1_ to var2_ in A_Tensor. eg: $exp/. \
tt:Tensor[\[Gamma],{_},{ii:_}]\[RuleDelayed]tuIndexRaise[ii,ii][tt] \
*23Apr2015*"
 
$scalar = {T, \[Tau], \[Sigma], n, n1, n2, Tensor[p, _, _], Tensor[x, _, _], 
     factor\[Theta], Tensor[\[Delta], _, _]}
 
$scalarNon = {T, \[Tau], \[Sigma], Tensor[p, _, _], Tensor[x, _, _], 
     factor\[Theta]}
 
$sCombineSum = {xSum[a_, b_] . xSum[a1_, b1_] . xSum[a2_, b2_] :> 
      xSum[a, b] . (xSum[a1, b1] /. n -> n1) . (xSum[a2, b2] /. n -> n2), 
     ((c_:1)*xSum[a_, b_]) . ((c1_:1)*xSum[a1_, b1_]) :> 
      (c*xSum[a, b]) . (c1*xSum[a1, b1] /. n -> n1), 
     xSum[a_, b_, c_] . xSum[a1_, b1_] :> (xSum[a, b, c] /. n -> n2) . 
       xSum[a1, b1], xSum[a_, b_] . xSum[a1_, b1_, c1_] :> 
      xSum[a, b] . (xSum[a1, b1, c1] /. n -> n2)}
 
$sdX = tuDDown["\[PartialD]"][OverBar[Tensor[Style["X", Italic], {}, {}]], 
      \[Sigma]] -> xSum[(E^(I*n*\[Sigma])*(-Tensor[\[Alpha], {Void}, {n}] + 
         Tensor[OverTilde[\[Alpha]], {Void}, {n}]))/(Sqrt[2]*Sqrt[T]), 
      {n, -Infinity, Infinity}]
 
$sGroundZero = {Tensor[\[Alpha], {Void}, {0}] -> 0, 
     Tensor[OverTilde[\[Alpha]], {Void}, {0}] -> 0, xLimit[__] -> 0}
 
$sIntegral0 = {Inactive[Integrate][tuDDown["\[PartialD]"][_, \[Sigma]], 
       \[Sigma]] -> 0, Inactive[Integrate][tuDDown["\[PartialD]"][
        OverBar[A_], \[Tau]], \[Sigma]] -> 0, 
     Inactive[Integrate][OverBar[A_], \[Sigma]] -> 0, 
     Inactive[Integrate][1, \[Sigma]] -> 2*Pi, Tensor[\[ScriptL], {}, {}] -> 
      Tensor[p, {Void}, {"-"}]^(-1)}
 
$sJ = {Tensor[\[ScriptCapitalJ], {0}, {Void}] -> 
      (-2*Pi*Tensor[p, {Void}, {"-"}]*Tensor[x, {}, {}] - 
        2*Pi*Tensor[p, {Void}, {"+"}]*Tensor[x, {}, {}] + 
        2*Pi*Tensor[p, {}, {}]*(\[Tau] + Tensor[x, {"-"}, {Void}]) - 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {}, {}]] . 
          OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]], \[Sigma]] + 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {"-"}, 
            {Void}]] . OverBar[Tensor[Style["P", Italic], {}, {}]], 
         \[Sigma]])/(2*Sqrt[2]*Pi), Tensor[\[ScriptCapitalJ], {1}, {Void}] -> 
      (-2*Pi*Tensor[p, {Void}, {"-"}]*Tensor[x, {}, {}] + 
        2*Pi*Tensor[p, {Void}, {"+"}]*Tensor[x, {}, {}] + 
        2*Pi*Tensor[p, {}, {}]*(\[Tau] - Tensor[x, {"-"}, {Void}]) + 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {}, {}]] . 
          OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]], \[Sigma]] - 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {"-"}, 
            {Void}]] . OverBar[Tensor[Style["P", Italic], {}, {}]], 
         \[Sigma]])/(2*Sqrt[2]*Pi), Tensor[\[ScriptCapitalJ], {2}, {Void}] -> 
      -(\[Tau]*Tensor[p, {Void}, {"+"}]) + Tensor[p, {Void}, {"-"}]*
        Tensor[x, {"-"}, {Void}]}
 
$sJ0 = {Tensor[J, {0}, {Void}] -> Tensor[X, {Void}, {1}] . 
        Tensor[P, {Void}, {2}] - Tensor[X, {Void}, {2}] . 
        Tensor[P, {Void}, {1}], Tensor[J, {1}, {Void}] -> 
      -Tensor[X, {Void}, {0}] . Tensor[P, {Void}, {2}] + 
       Tensor[X, {Void}, {2}] . Tensor[P, {Void}, {0}], 
     Tensor[J, {2}, {Void}] -> Tensor[X, {Void}, {0}] . 
        Tensor[P, {Void}, {1}] - Tensor[X, {Void}, {1}] . 
        Tensor[P, {Void}, {0}]}
 
$sJ1 = {Tensor[\[ScriptCapitalJ], {}, {}] -> 
      -(\[Tau]*Tensor[p, {Void}, {"+"}]) + Tensor[p, {Void}, {"-"}]*
        Tensor[x, {"-"}, {Void}], Tensor[\[ScriptCapitalJ], {"+"}, {Void}] -> 
      Sqrt[2]*(\[Tau]*Tensor[p, {}, {}] - Tensor[p, {Void}, {"-"}]*
         Tensor[x, {}, {}]), Tensor[\[ScriptCapitalJ], {"-"}, {Void}] -> 
      (2*Pi*Tensor[p, {Void}, {"+"}]*Tensor[x, {}, {}] - 
        2*Pi*Tensor[p, {}, {}]*Tensor[x, {"-"}, {Void}] + 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {}, {}]] . 
          OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]], \[Sigma]] - 
        Inactive[Integrate][OverBar[Tensor[Style["X", Italic], {"-"}, 
            {Void}]] . OverBar[Tensor[Style["P", Italic], {}, {}]], 
         \[Sigma]])/(Sqrt[2]*Pi)}
 
$sP = OverBar[Tensor[Style["P", Italic], {}, {}]] -> 
     (Sqrt[T]*xSum[E^(I*n*\[Sigma])*(Tensor[\[Alpha], {Void}, {n}] + 
          Tensor[OverTilde[\[Alpha]], {Void}, {n}]), {n, -Infinity, 
         Infinity}])/Sqrt[2]
 
$sPartial0 = {tuDDown["\[PartialD]"][xx_, \[Sigma]] :> 
      0 /; MatchQ[xx, Alternatives @@ {Tensor[x, _, _], Tensor[p, _, _], 
          \[Tau], Tensor[\[Alpha], _, _], Tensor[OverTilde[\[Alpha]], _, _], 
          \[Zeta], Tensor[\[Theta], _, _], factor\[Theta]}], 
     tuDDown["\[PartialD]"][xx_, \[Tau]] :> 0 /; MatchQ[xx, \[Sigma]], 
     tuDDown["\[PartialD]"][\[Tau], \[Tau]] -> 1, 
     tuDDown["\[PartialD]"][\[Sigma], \[Sigma]] -> 1}
 
$SpinorsPath = "/Users/Tom/Library/Mathematica/Applications"
 
$spm = {Tensor[Style["X", Italic], {"-"}, {Void}] -> 
      (-Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"-"}] -> 
      (-Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2], 
     Tensor[Style["X", Italic], {"+"}, {Void}] -> 
      (Tensor[X, {0}, {Void}] + Tensor[X, {1}, {Void}])/Sqrt[2], 
     Tensor[Style["P", Italic], {Void}, {"+"}] -> 
      (Tensor[P, {Void}, {0}] + Tensor[P, {Void}, {1}])/Sqrt[2]}
 
$spmR = {Tensor[X, {0}, {Void}] -> 
      -(Tensor[Style["X", Italic], {"-"}, {Void}]/Sqrt[2]) + 
       Tensor[Style["X", Italic], {"+"}, {Void}]/Sqrt[2], 
     Tensor[X, {1}, {Void}] -> (Sqrt[2]*Tensor[Style["X", Italic], {"-"}, 
          {Void}] + Sqrt[2]*Tensor[Style["X", Italic], {"+"}, {Void}])/2, 
     Tensor[P, {Void}, {0}] -> -(Tensor[Style["P", Italic], {Void}, {"-"}]/
         Sqrt[2]) + Tensor[Style["P", Italic], {Void}, {"+"}]/Sqrt[2], 
     Tensor[P, {Void}, {1}] -> (Sqrt[2]*Tensor[Style["P", Italic], {Void}, 
          {"-"}] + Sqrt[2]*Tensor[Style["P", Italic], {Void}, {"+"}])/2, 
     Tensor[P, {Void}, {2}] -> Tensor[Style["P", Italic], {}, {}], 
     Tensor[P, {Void}, {0}] -> (-Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
     Tensor[P, {Void}, {1}] -> (Tensor[Style["P", Italic], {Void}, {"-"}] + 
        Tensor[Style["P", Italic], {Void}, {"+"}])/Sqrt[2], 
     Tensor[X, {2}, {Void}] -> Tensor[Style["X", Italic], {}, {}], 
     Tensor[X, {0}, {Void}] -> (-Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2], 
     Tensor[X, {1}, {Void}] -> (Tensor[Style["X", Italic], {"-"}, {Void}] + 
        Tensor[Style["X", Italic], {"+"}, {Void}])/Sqrt[2]}
 
$sPplus = OverBar[Tensor[Style["P", Italic], {Void}, {"+"}]] -> 
     -(Tensor[p, {}, {}]^2 + 2*Tensor[p, {Void}, {"-"}]*
         Tensor[p, {Void}, {"+"}] + Sqrt[2]*Sqrt[T]*Tensor[p, {}, {}]*
         xSum[E^(I*n*\[Sigma])*(Tensor[\[Alpha], {Void}, {n}] + 
            Tensor[OverTilde[\[Alpha]], {Void}, {n}]), {n, -Infinity, 
           Infinity}] + T*xSum[E^(I*(n + n1)*\[Sigma])*
           (Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, {n1}] + 
            Tensor[OverTilde[\[Alpha]], {Void}, {n}] . 
             Tensor[OverTilde[\[Alpha]], {Void}, {n1}]), 
          {n, -Infinity, Infinity}, {n1, -Infinity, Infinity}])/
      (2*Tensor[p, {Void}, {"-"}])
 
$squant = {Tensor[\[Alpha], {Void}, {n1_}] . Tensor[\[Alpha], {Void}, 
        {n2_}] :> T[\[Alpha], "d", {n2}] . T[\[Alpha], "d", {n1}] + 
        T[\[Delta], "dd", {n1, n2}] /; tuHasNoneQ[n1, -1] && 
        tuHasAnyQ[n2, -1], Tensor[OverTilde[\[Alpha]], {Void}, {n1_}] . 
       Tensor[OverTilde[\[Alpha]], {Void}, {n2_}] :> 
      T[OverTilde[\[Alpha]], "d", {n2}] . T[OverTilde[\[Alpha]], "d", {n1}] + 
        T[\[Delta], "dd", {n1, n2}] /; tuHasNoneQ[n1, -1] && 
        tuHasAnyQ[n2, -1], Tensor[\[Alpha], {Void}, {n1_}] . 
       Tensor[OverTilde[\[Alpha]], {Void}, {n2_}] -> 
      Tensor[OverTilde[\[Alpha]], {Void}, {n2}] . Tensor[\[Alpha], {Void}, 
        {n1}], Tensor[\[Theta], {Void}, {n1_}] . Tensor[\[Theta], {Void}, 
        {n2_}] :> -T[\[Theta], "d", {n2}] . T[\[Theta], "d", {n1}] + 
        T[\[Delta], "dd", {n1, n2}] /; tuHasNoneQ[n1, -1] && 
        tuHasAnyQ[n2, -1]}
 
tuHasNoneQ[exp_, items_] :=  !tuHasAnyQ[exp, items]
 
tuHasNoneQ /: tuHasNoneQ::usage = "tuHasNoneQ[exp_,items_List] returns True \
if exp_ has none(FreeQ) of the items in items_List. *18Jul2015*"
 
$sumBreakUp := {xSum[a_, {n1_, -Infinity, Infinity}] :> 
      xSum[a, {n1, 1, Infinity}] + (xSum[a, {-n1, 1, Infinity}] /. 
        n1 -> -n1), xSum[a_, {n1_, -Infinity, Infinity}, 
       {n2_, -Infinity, Infinity}] :> xSum[a, {n1, 1, Infinity}, 
        {n2, 1, Infinity}] + (xSum[a, {n1, 1, Infinity}, 
         {-n2, 1, Infinity}] /. n2 -> -n2) + 
       (xSum[a, {-n1, 1, Infinity}, {n2, 1, Infinity}] /. n1 -> -n1) + 
       (xSum[a, {-n1, 1, Infinity}, {-n2, 1, Infinity}] /. n1 -> -n1 /. 
        n2 -> -n2)}
 
$sumGather := {(s1_:1)*xSum[a_, c__] + (s2_:1)*xSum[b_, c__] -> 
      xSum[s1*a + s2*b, c], xSum[xSum[a_, c1__], c2__] -> xSum[a, c1, c2]}
 
$sXminus = OverBar[Tensor[Style["X", Italic], {"-"}, {Void}]] -> 
     ((I/2)*(Sqrt[2]*Tensor[p, {}, {}]*
         xSum[(E^(I*n*\[Sigma])*(-Tensor[\[Alpha], {Void}, {n}] + 
             Tensor[OverTilde[\[Alpha]], {Void}, {n}]))/n, 
          {n, -Infinity, Infinity}] + Sqrt[T]*
         xSum[(E^(I*n*\[Sigma] + I*n1*\[Sigma])*
            (-Tensor[\[Alpha], {Void}, {n}] . Tensor[\[Alpha], {Void}, 
                {n1}] + Tensor[\[Alpha], {Void}, {n}] . Tensor[OverTilde[
                \[Alpha]], {Void}, {n1}] - Tensor[OverTilde[\[Alpha]], {
                Void}, {n}] . Tensor[\[Alpha], {Void}, {n1}] + 
             Tensor[OverTilde[\[Alpha]], {Void}, {n}] . Tensor[OverTilde[
                \[Alpha]], {Void}, {n1}]))/n1, {n, -Infinity, Infinity}, 
          {n1, -Infinity, Infinity}]))/(Sqrt[T]*Tensor[p, {Void}, {"-"}])
 
$s\[ScriptL] = Tensor[\[ScriptL], {}, {}] -> Tensor[p, {Void}, {"-"}]^(-1)
 
$s\[Epsilon] := T[\[Epsilon], "uuu", {i_, j_, k_}] :> 
     LeviCivitaTensor[3][[i + 1,j + 1,k + 1]]
 
$tmp = xTable[{n -> nn, -evalOp[-21, 1, 20][nn] + evalOp[-21, 20, 1][nn] - 
       evalOp[-20, -1, 21][nn] - evalOp[-20, 1, 19][nn] + 
       evalOp[-20, 19, 1][nn] + (evalOp[-39, 19, 20][nn] - 
         evalOp[-39, 20, 19][nn] + evalOp[-20, -19, 39][nn] - 
         evalOp[-19, -20, 39][nn])/20 + (-evalOp[-39, 19, 20][nn] + 
         evalOp[-39, 20, 19][nn] - evalOp[-20, -19, 39][nn] + 
         evalOp[-19, -20, 39][nn])/19 - evalOp[-19, -1, 20][nn] - 
       evalOp[-19, 1, 18][nn] + evalOp[-19, 18, 1][nn] + 
       (evalOp[-38, 18, 20][nn] - evalOp[-38, 20, 18][nn] + 
         evalOp[-20, -18, 38][nn] - evalOp[-18, -20, 38][nn])/20 + 
       (-evalOp[-38, 18, 20][nn] + evalOp[-38, 20, 18][nn] - 
         evalOp[-20, -18, 38][nn] + evalOp[-18, -20, 38][nn])/18 + 
       (evalOp[-37, 18, 19][nn] - evalOp[-37, 19, 18][nn] + 
         evalOp[-19, -18, 37][nn] - evalOp[-18, -19, 37][nn])/19 + 
       (-evalOp[-37, 18, 19][nn] + evalOp[-37, 19, 18][nn] - 
         evalOp[-19, -18, 37][nn] + evalOp[-18, -19, 37][nn])/18 - 
       evalOp[-18, -1, 19][nn] - evalOp[-18, 1, 17][nn] + 
       evalOp[-18, 17, 1][nn] + (evalOp[-37, 17, 20][nn] - 
         evalOp[-37, 20, 17][nn] + evalOp[-20, -17, 37][nn] - 
         evalOp[-17, -20, 37][nn])/20 + (-evalOp[-37, 17, 20][nn] + 
         evalOp[-37, 20, 17][nn] - evalOp[-20, -17, 37][nn] + 
         evalOp[-17, -20, 37][nn])/17 + (evalOp[-36, 17, 19][nn] - 
         evalOp[-36, 19, 17][nn] + evalOp[-19, -17, 36][nn] - 
         evalOp[-17, -19, 36][nn])/19 + (-evalOp[-36, 17, 19][nn] + 
         evalOp[-36, 19, 17][nn] - evalOp[-19, -17, 36][nn] + 
         evalOp[-17, -19, 36][nn])/17 + (evalOp[-35, 17, 18][nn] - 
         evalOp[-35, 18, 17][nn] + evalOp[-18, -17, 35][nn] - 
         evalOp[-17, -18, 35][nn])/18 + (-evalOp[-35, 17, 18][nn] + 
         evalOp[-35, 18, 17][nn] - evalOp[-18, -17, 35][nn] + 
         evalOp[-17, -18, 35][nn])/17 - evalOp[-17, -1, 18][nn] - 
       evalOp[-17, 1, 16][nn] + evalOp[-17, 16, 1][nn] + 
       (evalOp[-36, 16, 20][nn] - evalOp[-36, 20, 16][nn] + 
         evalOp[-20, -16, 36][nn] - evalOp[-16, -20, 36][nn])/20 + 
       (-evalOp[-36, 16, 20][nn] + evalOp[-36, 20, 16][nn] - 
         evalOp[-20, -16, 36][nn] + evalOp[-16, -20, 36][nn])/16 + 
       (evalOp[-35, 16, 19][nn] - evalOp[-35, 19, 16][nn] + 
         evalOp[-19, -16, 35][nn] - evalOp[-16, -19, 35][nn])/19 + 
       (-evalOp[-35, 16, 19][nn] + evalOp[-35, 19, 16][nn] - 
         evalOp[-19, -16, 35][nn] + evalOp[-16, -19, 35][nn])/16 + 
       (evalOp[-34, 16, 18][nn] - evalOp[-34, 18, 16][nn] + 
         evalOp[-18, -16, 34][nn] - evalOp[-16, -18, 34][nn])/18 + 
       (-evalOp[-34, 16, 18][nn] + evalOp[-34, 18, 16][nn] - 
         evalOp[-18, -16, 34][nn] + evalOp[-16, -18, 34][nn])/16 + 
       (evalOp[-33, 16, 17][nn] - evalOp[-33, 17, 16][nn] + 
         evalOp[-17, -16, 33][nn] - evalOp[-16, -17, 33][nn])/17 + 
       (-evalOp[-33, 16, 17][nn] + evalOp[-33, 17, 16][nn] - 
         evalOp[-17, -16, 33][nn] + evalOp[-16, -17, 33][nn])/16 - 
       evalOp[-16, -1, 17][nn] - evalOp[-16, 1, 15][nn] + 
       evalOp[-16, 15, 1][nn] + (evalOp[-35, 15, 20][nn] - 
         evalOp[-35, 20, 15][nn] + evalOp[-20, -15, 35][nn] - 
         evalOp[-15, -20, 35][nn])/20 + (-evalOp[-35, 15, 20][nn] + 
         evalOp[-35, 20, 15][nn] - evalOp[-20, -15, 35][nn] + 
         evalOp[-15, -20, 35][nn])/15 + (evalOp[-34, 15, 19][nn] - 
         evalOp[-34, 19, 15][nn] + evalOp[-19, -15, 34][nn] - 
         evalOp[-15, -19, 34][nn])/19 + (-evalOp[-34, 15, 19][nn] + 
         evalOp[-34, 19, 15][nn] - evalOp[-19, -15, 34][nn] + 
         evalOp[-15, -19, 34][nn])/15 + (evalOp[-33, 15, 18][nn] - 
         evalOp[-33, 18, 15][nn] + evalOp[-18, -15, 33][nn] - 
         evalOp[-15, -18, 33][nn])/18 + (-evalOp[-33, 15, 18][nn] + 
         evalOp[-33, 18, 15][nn] - evalOp[-18, -15, 33][nn] + 
         evalOp[-15, -18, 33][nn])/15 + (evalOp[-32, 15, 17][nn] - 
         evalOp[-32, 17, 15][nn] + evalOp[-17, -15, 32][nn] - 
         evalOp[-15, -17, 32][nn])/17 + (-evalOp[-32, 15, 17][nn] + 
         evalOp[-32, 17, 15][nn] - evalOp[-17, -15, 32][nn] + 
         evalOp[-15, -17, 32][nn])/15 + (evalOp[-31, 15, 16][nn] - 
         evalOp[-31, 16, 15][nn] + evalOp[-16, -15, 31][nn] - 
         evalOp[-15, -16, 31][nn])/16 + (-evalOp[-31, 15, 16][nn] + 
         evalOp[-31, 16, 15][nn] - evalOp[-16, -15, 31][nn] + 
         evalOp[-15, -16, 31][nn])/15 - evalOp[-15, -1, 16][nn] - 
       evalOp[-15, 1, 14][nn] + evalOp[-15, 14, 1][nn] + 
       (evalOp[-34, 14, 20][nn] - evalOp[-34, 20, 14][nn] + 
         evalOp[-20, -14, 34][nn] - evalOp[-14, -20, 34][nn])/20 + 
       (-evalOp[-34, 14, 20][nn] + evalOp[-34, 20, 14][nn] - 
         evalOp[-20, -14, 34][nn] + evalOp[-14, -20, 34][nn])/14 + 
       (evalOp[-33, 14, 19][nn] - evalOp[-33, 19, 14][nn] + 
         evalOp[-19, -14, 33][nn] - evalOp[-14, -19, 33][nn])/19 + 
       (-evalOp[-33, 14, 19][nn] + evalOp[-33, 19, 14][nn] - 
         evalOp[-19, -14, 33][nn] + evalOp[-14, -19, 33][nn])/14 + 
       (evalOp[-32, 14, 18][nn] - evalOp[-32, 18, 14][nn] + 
         evalOp[-18, -14, 32][nn] - evalOp[-14, -18, 32][nn])/18 + 
       (-evalOp[-32, 14, 18][nn] + evalOp[-32, 18, 14][nn] - 
         evalOp[-18, -14, 32][nn] + evalOp[-14, -18, 32][nn])/14 + 
       (evalOp[-31, 14, 17][nn] - evalOp[-31, 17, 14][nn] + 
         evalOp[-17, -14, 31][nn] - evalOp[-14, -17, 31][nn])/17 + 
       (-evalOp[-31, 14, 17][nn] + evalOp[-31, 17, 14][nn] - 
         evalOp[-17, -14, 31][nn] + evalOp[-14, -17, 31][nn])/14 + 
       (evalOp[-30, 14, 16][nn] - evalOp[-30, 16, 14][nn] + 
         evalOp[-16, -14, 30][nn] - evalOp[-14, -16, 30][nn])/16 + 
       (-evalOp[-30, 14, 16][nn] + evalOp[-30, 16, 14][nn] - 
         evalOp[-16, -14, 30][nn] + evalOp[-14, -16, 30][nn])/14 + 
       (evalOp[-29, 14, 15][nn] - evalOp[-29, 15, 14][nn] + 
         evalOp[-15, -14, 29][nn] - evalOp[-14, -15, 29][nn])/15 + 
       (-evalOp[-29, 14, 15][nn] + evalOp[-29, 15, 14][nn] - 
         evalOp[-15, -14, 29][nn] + evalOp[-14, -15, 29][nn])/14 - 
       evalOp[-14, -1, 15][nn] - evalOp[-14, 1, 13][nn] + 
       evalOp[-14, 13, 1][nn] + (evalOp[-33, 13, 20][nn] - 
         evalOp[-33, 20, 13][nn] + evalOp[-20, -13, 33][nn] - 
         evalOp[-13, -20, 33][nn])/20 + (-evalOp[-33, 13, 20][nn] + 
         evalOp[-33, 20, 13][nn] - evalOp[-20, -13, 33][nn] + 
         evalOp[-13, -20, 33][nn])/13 + (evalOp[-32, 13, 19][nn] - 
         evalOp[-32, 19, 13][nn] + evalOp[-19, -13, 32][nn] - 
         evalOp[-13, -19, 32][nn])/19 + (-evalOp[-32, 13, 19][nn] + 
         evalOp[-32, 19, 13][nn] - evalOp[-19, -13, 32][nn] + 
         evalOp[-13, -19, 32][nn])/13 + (evalOp[-31, 13, 18][nn] - 
         evalOp[-31, 18, 13][nn] + evalOp[-18, -13, 31][nn] - 
         evalOp[-13, -18, 31][nn])/18 + (-evalOp[-31, 13, 18][nn] + 
         evalOp[-31, 18, 13][nn] - evalOp[-18, -13, 31][nn] + 
         evalOp[-13, -18, 31][nn])/13 + (evalOp[-30, 13, 17][nn] - 
         evalOp[-30, 17, 13][nn] + evalOp[-17, -13, 30][nn] - 
         evalOp[-13, -17, 30][nn])/17 + (-evalOp[-30, 13, 17][nn] + 
         evalOp[-30, 17, 13][nn] - evalOp[-17, -13, 30][nn] + 
         evalOp[-13, -17, 30][nn])/13 + (evalOp[-29, 13, 16][nn] - 
         evalOp[-29, 16, 13][nn] + evalOp[-16, -13, 29][nn] - 
         evalOp[-13, -16, 29][nn])/16 + (-evalOp[-29, 13, 16][nn] + 
         evalOp[-29, 16, 13][nn] - evalOp[-16, -13, 29][nn] + 
         evalOp[-13, -16, 29][nn])/13 + (evalOp[-28, 13, 15][nn] - 
         evalOp[-28, 15, 13][nn] + evalOp[-15, -13, 28][nn] - 
         evalOp[-13, -15, 28][nn])/15 + (-evalOp[-28, 13, 15][nn] + 
         evalOp[-28, 15, 13][nn] - evalOp[-15, -13, 28][nn] + 
         evalOp[-13, -15, 28][nn])/13 + (evalOp[-27, 13, 14][nn] - 
         evalOp[-27, 14, 13][nn] + evalOp[-14, -13, 27][nn] - 
         evalOp[-13, -14, 27][nn])/14 + (-evalOp[-27, 13, 14][nn] + 
         evalOp[-27, 14, 13][nn] - evalOp[-14, -13, 27][nn] + 
         evalOp[-13, -14, 27][nn])/13 - evalOp[-13, -1, 14][nn] - 
       evalOp[-13, 1, 12][nn] + evalOp[-13, 12, 1][nn] + 
       (evalOp[-32, 12, 20][nn] - evalOp[-32, 20, 12][nn] + 
         evalOp[-20, -12, 32][nn] - evalOp[-12, -20, 32][nn])/20 + 
       (-evalOp[-32, 12, 20][nn] + evalOp[-32, 20, 12][nn] - 
         evalOp[-20, -12, 32][nn] + evalOp[-12, -20, 32][nn])/12 + 
       (evalOp[-31, 12, 19][nn] - evalOp[-31, 19, 12][nn] + 
         evalOp[-19, -12, 31][nn] - evalOp[-12, -19, 31][nn])/19 + 
       (-evalOp[-31, 12, 19][nn] + evalOp[-31, 19, 12][nn] - 
         evalOp[-19, -12, 31][nn] + evalOp[-12, -19, 31][nn])/12 + 
       (evalOp[-30, 12, 18][nn] - evalOp[-30, 18, 12][nn] + 
         evalOp[-18, -12, 30][nn] - evalOp[-12, -18, 30][nn])/18 + 
       (-evalOp[-30, 12, 18][nn] + evalOp[-30, 18, 12][nn] - 
         evalOp[-18, -12, 30][nn] + evalOp[-12, -18, 30][nn])/12 + 
       (evalOp[-29, 12, 17][nn] - evalOp[-29, 17, 12][nn] + 
         evalOp[-17, -12, 29][nn] - evalOp[-12, -17, 29][nn])/17 + 
       (-evalOp[-29, 12, 17][nn] + evalOp[-29, 17, 12][nn] - 
         evalOp[-17, -12, 29][nn] + evalOp[-12, -17, 29][nn])/12 + 
       (evalOp[-28, 12, 16][nn] - evalOp[-28, 16, 12][nn] + 
         evalOp[-16, -12, 28][nn] - evalOp[-12, -16, 28][nn])/16 + 
       (-evalOp[-28, 12, 16][nn] + evalOp[-28, 16, 12][nn] - 
         evalOp[-16, -12, 28][nn] + evalOp[-12, -16, 28][nn])/12 + 
       (evalOp[-27, 12, 15][nn] - evalOp[-27, 15, 12][nn] + 
         evalOp[-15, -12, 27][nn] - evalOp[-12, -15, 27][nn])/15 + 
       (-evalOp[-27, 12, 15][nn] + evalOp[-27, 15, 12][nn] - 
         evalOp[-15, -12, 27][nn] + evalOp[-12, -15, 27][nn])/12 + 
       (evalOp[-26, 12, 14][nn] - evalOp[-26, 14, 12][nn] + 
         evalOp[-14, -12, 26][nn] - evalOp[-12, -14, 26][nn])/14 + 
       (-evalOp[-26, 12, 14][nn] + evalOp[-26, 14, 12][nn] - 
         evalOp[-14, -12, 26][nn] + evalOp[-12, -14, 26][nn])/12 + 
       (evalOp[-25, 12, 13][nn] - evalOp[-25, 13, 12][nn] + 
         evalOp[-13, -12, 25][nn] - evalOp[-12, -13, 25][nn])/13 + 
       (-evalOp[-25, 12, 13][nn] + evalOp[-25, 13, 12][nn] - 
         evalOp[-13, -12, 25][nn] + evalOp[-12, -13, 25][nn])/12 - 
       evalOp[-12, -1, 13][nn] - evalOp[-12, 1, 11][nn] + 
       evalOp[-12, 11, 1][nn] + (evalOp[-31, 11, 20][nn] - 
         evalOp[-31, 20, 11][nn] + evalOp[-20, -11, 31][nn] - 
         evalOp[-11, -20, 31][nn])/20 + (-evalOp[-31, 11, 20][nn] + 
         evalOp[-31, 20, 11][nn] - evalOp[-20, -11, 31][nn] + 
         evalOp[-11, -20, 31][nn])/11 + (evalOp[-30, 11, 19][nn] - 
         evalOp[-30, 19, 11][nn] + evalOp[-19, -11, 30][nn] - 
         evalOp[-11, -19, 30][nn])/19 + (-evalOp[-30, 11, 19][nn] + 
         evalOp[-30, 19, 11][nn] - evalOp[-19, -11, 30][nn] + 
         evalOp[-11, -19, 30][nn])/11 + (evalOp[-29, 11, 18][nn] - 
         evalOp[-29, 18, 11][nn] + evalOp[-18, -11, 29][nn] - 
         evalOp[-11, -18, 29][nn])/18 + (-evalOp[-29, 11, 18][nn] + 
         evalOp[-29, 18, 11][nn] - evalOp[-18, -11, 29][nn] + 
         evalOp[-11, -18, 29][nn])/11 + (evalOp[-28, 11, 17][nn] - 
         evalOp[-28, 17, 11][nn] + evalOp[-17, -11, 28][nn] - 
         evalOp[-11, -17, 28][nn])/17 + (-evalOp[-28, 11, 17][nn] + 
         evalOp[-28, 17, 11][nn] - evalOp[-17, -11, 28][nn] + 
         evalOp[-11, -17, 28][nn])/11 + (evalOp[-27, 11, 16][nn] - 
         evalOp[-27, 16, 11][nn] + evalOp[-16, -11, 27][nn] - 
         evalOp[-11, -16, 27][nn])/16 + (-evalOp[-27, 11, 16][nn] + 
         evalOp[-27, 16, 11][nn] - evalOp[-16, -11, 27][nn] + 
         evalOp[-11, -16, 27][nn])/11 + (evalOp[-26, 11, 15][nn] - 
         evalOp[-26, 15, 11][nn] + evalOp[-15, -11, 26][nn] - 
         evalOp[-11, -15, 26][nn])/15 + (-evalOp[-26, 11, 15][nn] + 
         evalOp[-26, 15, 11][nn] - evalOp[-15, -11, 26][nn] + 
         evalOp[-11, -15, 26][nn])/11 + (evalOp[-25, 11, 14][nn] - 
         evalOp[-25, 14, 11][nn] + evalOp[-14, -11, 25][nn] - 
         evalOp[-11, -14, 25][nn])/14 + (-evalOp[-25, 11, 14][nn] + 
         evalOp[-25, 14, 11][nn] - evalOp[-14, -11, 25][nn] + 
         evalOp[-11, -14, 25][nn])/11 + (evalOp[-24, 11, 13][nn] - 
         evalOp[-24, 13, 11][nn] + evalOp[-13, -11, 24][nn] - 
         evalOp[-11, -13, 24][nn])/13 + (-evalOp[-24, 11, 13][nn] + 
         evalOp[-24, 13, 11][nn] - evalOp[-13, -11, 24][nn] + 
         evalOp[-11, -13, 24][nn])/11 + (evalOp[-23, 11, 12][nn] - 
         evalOp[-23, 12, 11][nn] + evalOp[-12, -11, 23][nn] - 
         evalOp[-11, -12, 23][nn])/12 + (-evalOp[-23, 11, 12][nn] + 
         evalOp[-23, 12, 11][nn] - evalOp[-12, -11, 23][nn] + 
         evalOp[-11, -12, 23][nn])/11 - evalOp[-11, -1, 12][nn] - 
       evalOp[-11, 1, 10][nn] + evalOp[-11, 10, 1][nn] + 
       (evalOp[-30, 10, 20][nn] - evalOp[-30, 20, 10][nn] + 
         evalOp[-20, -10, 30][nn] - evalOp[-10, -20, 30][nn])/20 + 
       (-evalOp[-30, 10, 20][nn] + evalOp[-30, 20, 10][nn] - 
         evalOp[-20, -10, 30][nn] + evalOp[-10, -20, 30][nn])/10 + 
       (evalOp[-29, 10, 19][nn] - evalOp[-29, 19, 10][nn] + 
         evalOp[-19, -10, 29][nn] - evalOp[-10, -19, 29][nn])/19 + 
       (-evalOp[-29, 10, 19][nn] + evalOp[-29, 19, 10][nn] - 
         evalOp[-19, -10, 29][nn] + evalOp[-10, -19, 29][nn])/10 + 
       (evalOp[-28, 10, 18][nn] - evalOp[-28, 18, 10][nn] + 
         evalOp[-18, -10, 28][nn] - evalOp[-10, -18, 28][nn])/18 + 
       (-evalOp[-28, 10, 18][nn] + evalOp[-28, 18, 10][nn] - 
         evalOp[-18, -10, 28][nn] + evalOp[-10, -18, 28][nn])/10 + 
       (evalOp[-27, 10, 17][nn] - evalOp[-27, 17, 10][nn] + 
         evalOp[-17, -10, 27][nn] - evalOp[-10, -17, 27][nn])/17 + 
       (-evalOp[-27, 10, 17][nn] + evalOp[-27, 17, 10][nn] - 
         evalOp[-17, -10, 27][nn] + evalOp[-10, -17, 27][nn])/10 + 
       (evalOp[-26, 10, 16][nn] - evalOp[-26, 16, 10][nn] + 
         evalOp[-16, -10, 26][nn] - evalOp[-10, -16, 26][nn])/16 + 
       (-evalOp[-26, 10, 16][nn] + evalOp[-26, 16, 10][nn] - 
         evalOp[-16, -10, 26][nn] + evalOp[-10, -16, 26][nn])/10 + 
       (evalOp[-25, 10, 15][nn] - evalOp[-25, 15, 10][nn] + 
         evalOp[-15, -10, 25][nn] - evalOp[-10, -15, 25][nn])/15 + 
       (-evalOp[-25, 10, 15][nn] + evalOp[-25, 15, 10][nn] - 
         evalOp[-15, -10, 25][nn] + evalOp[-10, -15, 25][nn])/10 + 
       (evalOp[-24, 10, 14][nn] - evalOp[-24, 14, 10][nn] + 
         evalOp[-14, -10, 24][nn] - evalOp[-10, -14, 24][nn])/14 + 
       (-evalOp[-24, 10, 14][nn] + evalOp[-24, 14, 10][nn] - 
         evalOp[-14, -10, 24][nn] + evalOp[-10, -14, 24][nn])/10 + 
       (evalOp[-23, 10, 13][nn] - evalOp[-23, 13, 10][nn] + 
         evalOp[-13, -10, 23][nn] - evalOp[-10, -13, 23][nn])/13 + 
       (-evalOp[-23, 10, 13][nn] + evalOp[-23, 13, 10][nn] - 
         evalOp[-13, -10, 23][nn] + evalOp[-10, -13, 23][nn])/10 + 
       (evalOp[-22, 10, 12][nn] - evalOp[-22, 12, 10][nn] + 
         evalOp[-12, -10, 22][nn] - evalOp[-10, -12, 22][nn])/12 + 
       (-evalOp[-22, 10, 12][nn] + evalOp[-22, 12, 10][nn] - 
         evalOp[-12, -10, 22][nn] + evalOp[-10, -12, 22][nn])/10 + 
       (evalOp[-21, 10, 11][nn] - evalOp[-21, 11, 10][nn] + 
         evalOp[-11, -10, 21][nn] - evalOp[-10, -11, 21][nn])/11 + 
       (-evalOp[-21, 10, 11][nn] + evalOp[-21, 11, 10][nn] - 
         evalOp[-11, -10, 21][nn] + evalOp[-10, -11, 21][nn])/10 - 
       evalOp[-10, -1, 11][nn] - evalOp[-10, 1, 9][nn] + 
       evalOp[-10, 9, 1][nn] + (evalOp[-29, 9, 20][nn] - 
         evalOp[-29, 20, 9][nn] + evalOp[-20, -9, 29][nn] - 
         evalOp[-9, -20, 29][nn])/20 + (-evalOp[-29, 9, 20][nn] + 
         evalOp[-29, 20, 9][nn] - evalOp[-20, -9, 29][nn] + 
         evalOp[-9, -20, 29][nn])/9 + (evalOp[-28, 9, 19][nn] - 
         evalOp[-28, 19, 9][nn] + evalOp[-19, -9, 28][nn] - 
         evalOp[-9, -19, 28][nn])/19 + (-evalOp[-28, 9, 19][nn] + 
         evalOp[-28, 19, 9][nn] - evalOp[-19, -9, 28][nn] + 
         evalOp[-9, -19, 28][nn])/9 + (evalOp[-27, 9, 18][nn] - 
         evalOp[-27, 18, 9][nn] + evalOp[-18, -9, 27][nn] - 
         evalOp[-9, -18, 27][nn])/18 + (-evalOp[-27, 9, 18][nn] + 
         evalOp[-27, 18, 9][nn] - evalOp[-18, -9, 27][nn] + 
         evalOp[-9, -18, 27][nn])/9 + (evalOp[-26, 9, 17][nn] - 
         evalOp[-26, 17, 9][nn] + evalOp[-17, -9, 26][nn] - 
         evalOp[-9, -17, 26][nn])/17 + (-evalOp[-26, 9, 17][nn] + 
         evalOp[-26, 17, 9][nn] - evalOp[-17, -9, 26][nn] + 
         evalOp[-9, -17, 26][nn])/9 + (evalOp[-25, 9, 16][nn] - 
         evalOp[-25, 16, 9][nn] + evalOp[-16, -9, 25][nn] - 
         evalOp[-9, -16, 25][nn])/16 + (-evalOp[-25, 9, 16][nn] + 
         evalOp[-25, 16, 9][nn] - evalOp[-16, -9, 25][nn] + 
         evalOp[-9, -16, 25][nn])/9 + (evalOp[-24, 9, 15][nn] - 
         evalOp[-24, 15, 9][nn] + evalOp[-15, -9, 24][nn] - 
         evalOp[-9, -15, 24][nn])/15 + (-evalOp[-24, 9, 15][nn] + 
         evalOp[-24, 15, 9][nn] - evalOp[-15, -9, 24][nn] + 
         evalOp[-9, -15, 24][nn])/9 + (evalOp[-23, 9, 14][nn] - 
         evalOp[-23, 14, 9][nn] + evalOp[-14, -9, 23][nn] - 
         evalOp[-9, -14, 23][nn])/14 + (-evalOp[-23, 9, 14][nn] + 
         evalOp[-23, 14, 9][nn] - evalOp[-14, -9, 23][nn] + 
         evalOp[-9, -14, 23][nn])/9 + (evalOp[-22, 9, 13][nn] - 
         evalOp[-22, 13, 9][nn] + evalOp[-13, -9, 22][nn] - 
         evalOp[-9, -13, 22][nn])/13 + (-evalOp[-22, 9, 13][nn] + 
         evalOp[-22, 13, 9][nn] - evalOp[-13, -9, 22][nn] + 
         evalOp[-9, -13, 22][nn])/9 + (evalOp[-21, 9, 12][nn] - 
         evalOp[-21, 12, 9][nn] + evalOp[-12, -9, 21][nn] - 
         evalOp[-9, -12, 21][nn])/12 + (-evalOp[-21, 9, 12][nn] + 
         evalOp[-21, 12, 9][nn] - evalOp[-12, -9, 21][nn] + 
         evalOp[-9, -12, 21][nn])/9 + (evalOp[-20, 9, 11][nn] - 
         evalOp[-20, 11, 9][nn] + evalOp[-11, -9, 20][nn] - 
         evalOp[-9, -11, 20][nn])/11 + (-evalOp[-20, 9, 11][nn] + 
         evalOp[-20, 11, 9][nn] - evalOp[-11, -9, 20][nn] + 
         evalOp[-9, -11, 20][nn])/9 + (evalOp[-19, 9, 10][nn] - 
         evalOp[-19, 10, 9][nn] + evalOp[-10, -9, 19][nn] - 
         evalOp[-9, -10, 19][nn])/10 + (-evalOp[-19, 9, 10][nn] + 
         evalOp[-19, 10, 9][nn] - evalOp[-10, -9, 19][nn] + 
         evalOp[-9, -10, 19][nn])/9 - evalOp[-9, -1, 10][nn] - 
       evalOp[-9, 1, 8][nn] + evalOp[-9, 8, 1][nn] + 
       (evalOp[-28, 8, 20][nn] - evalOp[-28, 20, 8][nn] + 
         evalOp[-20, -8, 28][nn] - evalOp[-8, -20, 28][nn])/20 + 
       (-evalOp[-28, 8, 20][nn] + evalOp[-28, 20, 8][nn] - 
         evalOp[-20, -8, 28][nn] + evalOp[-8, -20, 28][nn])/8 + 
       (evalOp[-27, 8, 19][nn] - evalOp[-27, 19, 8][nn] + 
         evalOp[-19, -8, 27][nn] - evalOp[-8, -19, 27][nn])/19 + 
       (-evalOp[-27, 8, 19][nn] + evalOp[-27, 19, 8][nn] - 
         evalOp[-19, -8, 27][nn] + evalOp[-8, -19, 27][nn])/8 + 
       (evalOp[-26, 8, 18][nn] - evalOp[-26, 18, 8][nn] + 
         evalOp[-18, -8, 26][nn] - evalOp[-8, -18, 26][nn])/18 + 
       (-evalOp[-26, 8, 18][nn] + evalOp[-26, 18, 8][nn] - 
         evalOp[-18, -8, 26][nn] + evalOp[-8, -18, 26][nn])/8 + 
       (evalOp[-25, 8, 17][nn] - evalOp[-25, 17, 8][nn] + 
         evalOp[-17, -8, 25][nn] - evalOp[-8, -17, 25][nn])/17 + 
       (-evalOp[-25, 8, 17][nn] + evalOp[-25, 17, 8][nn] - 
         evalOp[-17, -8, 25][nn] + evalOp[-8, -17, 25][nn])/8 + 
       (evalOp[-24, 8, 16][nn] - evalOp[-24, 16, 8][nn] + 
         evalOp[-16, -8, 24][nn] - evalOp[-8, -16, 24][nn])/16 + 
       (-evalOp[-24, 8, 16][nn] + evalOp[-24, 16, 8][nn] - 
         evalOp[-16, -8, 24][nn] + evalOp[-8, -16, 24][nn])/8 + 
       (evalOp[-23, 8, 15][nn] - evalOp[-23, 15, 8][nn] + 
         evalOp[-15, -8, 23][nn] - evalOp[-8, -15, 23][nn])/15 + 
       (-evalOp[-23, 8, 15][nn] + evalOp[-23, 15, 8][nn] - 
         evalOp[-15, -8, 23][nn] + evalOp[-8, -15, 23][nn])/8 + 
       (evalOp[-22, 8, 14][nn] - evalOp[-22, 14, 8][nn] + 
         evalOp[-14, -8, 22][nn] - evalOp[-8, -14, 22][nn])/14 + 
       (-evalOp[-22, 8, 14][nn] + evalOp[-22, 14, 8][nn] - 
         evalOp[-14, -8, 22][nn] + evalOp[-8, -14, 22][nn])/8 + 
       (evalOp[-21, 8, 13][nn] - evalOp[-21, 13, 8][nn] + 
         evalOp[-13, -8, 21][nn] - evalOp[-8, -13, 21][nn])/13 + 
       (-evalOp[-21, 8, 13][nn] + evalOp[-21, 13, 8][nn] - 
         evalOp[-13, -8, 21][nn] + evalOp[-8, -13, 21][nn])/8 + 
       (evalOp[-20, 8, 12][nn] - evalOp[-20, 12, 8][nn] + 
         evalOp[-12, -8, 20][nn] - evalOp[-8, -12, 20][nn])/12 + 
       (-evalOp[-20, 8, 12][nn] + evalOp[-20, 12, 8][nn] - 
         evalOp[-12, -8, 20][nn] + evalOp[-8, -12, 20][nn])/8 + 
       (evalOp[-19, 8, 11][nn] - evalOp[-19, 11, 8][nn] + 
         evalOp[-11, -8, 19][nn] - evalOp[-8, -11, 19][nn])/11 + 
       (-evalOp[-19, 8, 11][nn] + evalOp[-19, 11, 8][nn] - 
         evalOp[-11, -8, 19][nn] + evalOp[-8, -11, 19][nn])/8 + 
       (evalOp[-18, 8, 10][nn] - evalOp[-18, 10, 8][nn] + 
         evalOp[-10, -8, 18][nn] - evalOp[-8, -10, 18][nn])/10 + 
       (-evalOp[-18, 8, 10][nn] + evalOp[-18, 10, 8][nn] - 
         evalOp[-10, -8, 18][nn] + evalOp[-8, -10, 18][nn])/8 + 
       (evalOp[-17, 8, 9][nn] - evalOp[-17, 9, 8][nn] + evalOp[-9, -8, 17][
          nn] - evalOp[-8, -9, 17][nn])/9 + (-evalOp[-17, 8, 9][nn] + 
         evalOp[-17, 9, 8][nn] - evalOp[-9, -8, 17][nn] + 
         evalOp[-8, -9, 17][nn])/8 - evalOp[-8, -1, 9][nn] - 
       evalOp[-8, 1, 7][nn] + evalOp[-8, 7, 1][nn] + 
       (evalOp[-27, 7, 20][nn] - evalOp[-27, 20, 7][nn] + 
         evalOp[-20, -7, 27][nn] - evalOp[-7, -20, 27][nn])/20 + 
       (-evalOp[-27, 7, 20][nn] + evalOp[-27, 20, 7][nn] - 
         evalOp[-20, -7, 27][nn] + evalOp[-7, -20, 27][nn])/7 + 
       (evalOp[-26, 7, 19][nn] - evalOp[-26, 19, 7][nn] + 
         evalOp[-19, -7, 26][nn] - evalOp[-7, -19, 26][nn])/19 + 
       (-evalOp[-26, 7, 19][nn] + evalOp[-26, 19, 7][nn] - 
         evalOp[-19, -7, 26][nn] + evalOp[-7, -19, 26][nn])/7 + 
       (evalOp[-25, 7, 18][nn] - evalOp[-25, 18, 7][nn] + 
         evalOp[-18, -7, 25][nn] - evalOp[-7, -18, 25][nn])/18 + 
       (-evalOp[-25, 7, 18][nn] + evalOp[-25, 18, 7][nn] - 
         evalOp[-18, -7, 25][nn] + evalOp[-7, -18, 25][nn])/7 + 
       (evalOp[-24, 7, 17][nn] - evalOp[-24, 17, 7][nn] + 
         evalOp[-17, -7, 24][nn] - evalOp[-7, -17, 24][nn])/17 + 
       (-evalOp[-24, 7, 17][nn] + evalOp[-24, 17, 7][nn] - 
         evalOp[-17, -7, 24][nn] + evalOp[-7, -17, 24][nn])/7 + 
       (evalOp[-23, 7, 16][nn] - evalOp[-23, 16, 7][nn] + 
         evalOp[-16, -7, 23][nn] - evalOp[-7, -16, 23][nn])/16 + 
       (-evalOp[-23, 7, 16][nn] + evalOp[-23, 16, 7][nn] - 
         evalOp[-16, -7, 23][nn] + evalOp[-7, -16, 23][nn])/7 + 
       (evalOp[-22, 7, 15][nn] - evalOp[-22, 15, 7][nn] + 
         evalOp[-15, -7, 22][nn] - evalOp[-7, -15, 22][nn])/15 + 
       (-evalOp[-22, 7, 15][nn] + evalOp[-22, 15, 7][nn] - 
         evalOp[-15, -7, 22][nn] + evalOp[-7, -15, 22][nn])/7 + 
       (evalOp[-21, 7, 14][nn] - evalOp[-21, 14, 7][nn] + 
         evalOp[-14, -7, 21][nn] - evalOp[-7, -14, 21][nn])/14 + 
       (-evalOp[-21, 7, 14][nn] + evalOp[-21, 14, 7][nn] - 
         evalOp[-14, -7, 21][nn] + evalOp[-7, -14, 21][nn])/7 + 
       (evalOp[-20, 7, 13][nn] - evalOp[-20, 13, 7][nn] + 
         evalOp[-13, -7, 20][nn] - evalOp[-7, -13, 20][nn])/13 + 
       (-evalOp[-20, 7, 13][nn] + evalOp[-20, 13, 7][nn] - 
         evalOp[-13, -7, 20][nn] + evalOp[-7, -13, 20][nn])/7 + 
       (evalOp[-19, 7, 12][nn] - evalOp[-19, 12, 7][nn] + 
         evalOp[-12, -7, 19][nn] - evalOp[-7, -12, 19][nn])/12 + 
       (-evalOp[-19, 7, 12][nn] + evalOp[-19, 12, 7][nn] - 
         evalOp[-12, -7, 19][nn] + evalOp[-7, -12, 19][nn])/7 + 
       (evalOp[-18, 7, 11][nn] - evalOp[-18, 11, 7][nn] + 
         evalOp[-11, -7, 18][nn] - evalOp[-7, -11, 18][nn])/11 + 
       (-evalOp[-18, 7, 11][nn] + evalOp[-18, 11, 7][nn] - 
         evalOp[-11, -7, 18][nn] + evalOp[-7, -11, 18][nn])/7 + 
       (evalOp[-17, 7, 10][nn] - evalOp[-17, 10, 7][nn] + 
         evalOp[-10, -7, 17][nn] - evalOp[-7, -10, 17][nn])/10 + 
       (-evalOp[-17, 7, 10][nn] + evalOp[-17, 10, 7][nn] - 
         evalOp[-10, -7, 17][nn] + evalOp[-7, -10, 17][nn])/7 + 
       (evalOp[-16, 7, 9][nn] - evalOp[-16, 9, 7][nn] + evalOp[-9, -7, 16][
          nn] - evalOp[-7, -9, 16][nn])/9 + (-evalOp[-16, 7, 9][nn] + 
         evalOp[-16, 9, 7][nn] - evalOp[-9, -7, 16][nn] + 
         evalOp[-7, -9, 16][nn])/7 + (evalOp[-15, 7, 8][nn] - 
         evalOp[-15, 8, 7][nn] + evalOp[-8, -7, 15][nn] - 
         evalOp[-7, -8, 15][nn])/8 + (-evalOp[-15, 7, 8][nn] + 
         evalOp[-15, 8, 7][nn] - evalOp[-8, -7, 15][nn] + 
         evalOp[-7, -8, 15][nn])/7 - evalOp[-7, -1, 8][nn] - 
       evalOp[-7, 1, 6][nn] + evalOp[-7, 6, 1][nn] + 
       (evalOp[-26, 6, 20][nn] - evalOp[-26, 20, 6][nn] + 
         evalOp[-20, -6, 26][nn] - evalOp[-6, -20, 26][nn])/20 + 
       (-evalOp[-26, 6, 20][nn] + evalOp[-26, 20, 6][nn] - 
         evalOp[-20, -6, 26][nn] + evalOp[-6, -20, 26][nn])/6 + 
       (evalOp[-25, 6, 19][nn] - evalOp[-25, 19, 6][nn] + 
         evalOp[-19, -6, 25][nn] - evalOp[-6, -19, 25][nn])/19 + 
       (-evalOp[-25, 6, 19][nn] + evalOp[-25, 19, 6][nn] - 
         evalOp[-19, -6, 25][nn] + evalOp[-6, -19, 25][nn])/6 + 
       (evalOp[-24, 6, 18][nn] - evalOp[-24, 18, 6][nn] + 
         evalOp[-18, -6, 24][nn] - evalOp[-6, -18, 24][nn])/18 + 
       (-evalOp[-24, 6, 18][nn] + evalOp[-24, 18, 6][nn] - 
         evalOp[-18, -6, 24][nn] + evalOp[-6, -18, 24][nn])/6 + 
       (evalOp[-23, 6, 17][nn] - evalOp[-23, 17, 6][nn] + 
         evalOp[-17, -6, 23][nn] - evalOp[-6, -17, 23][nn])/17 + 
       (-evalOp[-23, 6, 17][nn] + evalOp[-23, 17, 6][nn] - 
         evalOp[-17, -6, 23][nn] + evalOp[-6, -17, 23][nn])/6 + 
       (evalOp[-22, 6, 16][nn] - evalOp[-22, 16, 6][nn] + 
         evalOp[-16, -6, 22][nn] - evalOp[-6, -16, 22][nn])/16 + 
       (-evalOp[-22, 6, 16][nn] + evalOp[-22, 16, 6][nn] - 
         evalOp[-16, -6, 22][nn] + evalOp[-6, -16, 22][nn])/6 + 
       (evalOp[-21, 6, 15][nn] - evalOp[-21, 15, 6][nn] + 
         evalOp[-15, -6, 21][nn] - evalOp[-6, -15, 21][nn])/15 + 
       (-evalOp[-21, 6, 15][nn] + evalOp[-21, 15, 6][nn] - 
         evalOp[-15, -6, 21][nn] + evalOp[-6, -15, 21][nn])/6 + 
       (evalOp[-20, 6, 14][nn] - evalOp[-20, 14, 6][nn] + 
         evalOp[-14, -6, 20][nn] - evalOp[-6, -14, 20][nn])/14 + 
       (-evalOp[-20, 6, 14][nn] + evalOp[-20, 14, 6][nn] - 
         evalOp[-14, -6, 20][nn] + evalOp[-6, -14, 20][nn])/6 + 
       (evalOp[-19, 6, 13][nn] - evalOp[-19, 13, 6][nn] + 
         evalOp[-13, -6, 19][nn] - evalOp[-6, -13, 19][nn])/13 + 
       (-evalOp[-19, 6, 13][nn] + evalOp[-19, 13, 6][nn] - 
         evalOp[-13, -6, 19][nn] + evalOp[-6, -13, 19][nn])/6 + 
       (evalOp[-18, 6, 12][nn] - evalOp[-18, 12, 6][nn] + 
         evalOp[-12, -6, 18][nn] - evalOp[-6, -12, 18][nn])/12 + 
       (-evalOp[-18, 6, 12][nn] + evalOp[-18, 12, 6][nn] - 
         evalOp[-12, -6, 18][nn] + evalOp[-6, -12, 18][nn])/6 + 
       (evalOp[-17, 6, 11][nn] - evalOp[-17, 11, 6][nn] + 
         evalOp[-11, -6, 17][nn] - evalOp[-6, -11, 17][nn])/11 + 
       (-evalOp[-17, 6, 11][nn] + evalOp[-17, 11, 6][nn] - 
         evalOp[-11, -6, 17][nn] + evalOp[-6, -11, 17][nn])/6 + 
       (evalOp[-16, 6, 10][nn] - evalOp[-16, 10, 6][nn] + 
         evalOp[-10, -6, 16][nn] - evalOp[-6, -10, 16][nn])/10 + 
       (-evalOp[-16, 6, 10][nn] + evalOp[-16, 10, 6][nn] - 
         evalOp[-10, -6, 16][nn] + evalOp[-6, -10, 16][nn])/6 + 
       (evalOp[-15, 6, 9][nn] - evalOp[-15, 9, 6][nn] + evalOp[-9, -6, 15][
          nn] - evalOp[-6, -9, 15][nn])/9 + (-evalOp[-15, 6, 9][nn] + 
         evalOp[-15, 9, 6][nn] - evalOp[-9, -6, 15][nn] + 
         evalOp[-6, -9, 15][nn])/6 + (evalOp[-14, 6, 8][nn] - 
         evalOp[-14, 8, 6][nn] + evalOp[-8, -6, 14][nn] - 
         evalOp[-6, -8, 14][nn])/8 + (-evalOp[-14, 6, 8][nn] + 
         evalOp[-14, 8, 6][nn] - evalOp[-8, -6, 14][nn] + 
         evalOp[-6, -8, 14][nn])/6 + (evalOp[-13, 6, 7][nn] - 
         evalOp[-13, 7, 6][nn] + evalOp[-7, -6, 13][nn] - 
         evalOp[-6, -7, 13][nn])/7 + (-evalOp[-13, 6, 7][nn] + 
         evalOp[-13, 7, 6][nn] - evalOp[-7, -6, 13][nn] + 
         evalOp[-6, -7, 13][nn])/6 - evalOp[-6, -1, 7][nn] - 
       evalOp[-6, 1, 5][nn] + evalOp[-6, 5, 1][nn] + 
       (evalOp[-25, 5, 20][nn] - evalOp[-25, 20, 5][nn] + 
         evalOp[-20, -5, 25][nn] - evalOp[-5, -20, 25][nn])/20 + 
       (-evalOp[-25, 5, 20][nn] + evalOp[-25, 20, 5][nn] - 
         evalOp[-20, -5, 25][nn] + evalOp[-5, -20, 25][nn])/5 + 
       (evalOp[-24, 5, 19][nn] - evalOp[-24, 19, 5][nn] + 
         evalOp[-19, -5, 24][nn] - evalOp[-5, -19, 24][nn])/19 + 
       (-evalOp[-24, 5, 19][nn] + evalOp[-24, 19, 5][nn] - 
         evalOp[-19, -5, 24][nn] + evalOp[-5, -19, 24][nn])/5 + 
       (evalOp[-23, 5, 18][nn] - evalOp[-23, 18, 5][nn] + 
         evalOp[-18, -5, 23][nn] - evalOp[-5, -18, 23][nn])/18 + 
       (-evalOp[-23, 5, 18][nn] + evalOp[-23, 18, 5][nn] - 
         evalOp[-18, -5, 23][nn] + evalOp[-5, -18, 23][nn])/5 + 
       (evalOp[-22, 5, 17][nn] - evalOp[-22, 17, 5][nn] + 
         evalOp[-17, -5, 22][nn] - evalOp[-5, -17, 22][nn])/17 + 
       (-evalOp[-22, 5, 17][nn] + evalOp[-22, 17, 5][nn] - 
         evalOp[-17, -5, 22][nn] + evalOp[-5, -17, 22][nn])/5 + 
       (evalOp[-21, 5, 16][nn] - evalOp[-21, 16, 5][nn] + 
         evalOp[-16, -5, 21][nn] - evalOp[-5, -16, 21][nn])/16 + 
       (-evalOp[-21, 5, 16][nn] + evalOp[-21, 16, 5][nn] - 
         evalOp[-16, -5, 21][nn] + evalOp[-5, -16, 21][nn])/5 + 
       (evalOp[-20, 5, 15][nn] - evalOp[-20, 15, 5][nn] + 
         evalOp[-15, -5, 20][nn] - evalOp[-5, -15, 20][nn])/15 + 
       (-evalOp[-20, 5, 15][nn] + evalOp[-20, 15, 5][nn] - 
         evalOp[-15, -5, 20][nn] + evalOp[-5, -15, 20][nn])/5 + 
       (evalOp[-19, 5, 14][nn] - evalOp[-19, 14, 5][nn] + 
         evalOp[-14, -5, 19][nn] - evalOp[-5, -14, 19][nn])/14 + 
       (-evalOp[-19, 5, 14][nn] + evalOp[-19, 14, 5][nn] - 
         evalOp[-14, -5, 19][nn] + evalOp[-5, -14, 19][nn])/5 + 
       (evalOp[-18, 5, 13][nn] - evalOp[-18, 13, 5][nn] + 
         evalOp[-13, -5, 18][nn] - evalOp[-5, -13, 18][nn])/13 + 
       (-evalOp[-18, 5, 13][nn] + evalOp[-18, 13, 5][nn] - 
         evalOp[-13, -5, 18][nn] + evalOp[-5, -13, 18][nn])/5 + 
       (evalOp[-17, 5, 12][nn] - evalOp[-17, 12, 5][nn] + 
         evalOp[-12, -5, 17][nn] - evalOp[-5, -12, 17][nn])/12 + 
       (-evalOp[-17, 5, 12][nn] + evalOp[-17, 12, 5][nn] - 
         evalOp[-12, -5, 17][nn] + evalOp[-5, -12, 17][nn])/5 + 
       (evalOp[-16, 5, 11][nn] - evalOp[-16, 11, 5][nn] + 
         evalOp[-11, -5, 16][nn] - evalOp[-5, -11, 16][nn])/11 + 
       (-evalOp[-16, 5, 11][nn] + evalOp[-16, 11, 5][nn] - 
         evalOp[-11, -5, 16][nn] + evalOp[-5, -11, 16][nn])/5 + 
       (evalOp[-15, 5, 10][nn] - evalOp[-15, 10, 5][nn] + 
         evalOp[-10, -5, 15][nn] - evalOp[-5, -10, 15][nn])/10 + 
       (-evalOp[-15, 5, 10][nn] + evalOp[-15, 10, 5][nn] - 
         evalOp[-10, -5, 15][nn] + evalOp[-5, -10, 15][nn])/5 + 
       (evalOp[-14, 5, 9][nn] - evalOp[-14, 9, 5][nn] + evalOp[-9, -5, 14][
          nn] - evalOp[-5, -9, 14][nn])/9 + (-evalOp[-14, 5, 9][nn] + 
         evalOp[-14, 9, 5][nn] - evalOp[-9, -5, 14][nn] + 
         evalOp[-5, -9, 14][nn])/5 + (evalOp[-13, 5, 8][nn] - 
         evalOp[-13, 8, 5][nn] + evalOp[-8, -5, 13][nn] - 
         evalOp[-5, -8, 13][nn])/8 + (-evalOp[-13, 5, 8][nn] + 
         evalOp[-13, 8, 5][nn] - evalOp[-8, -5, 13][nn] + 
         evalOp[-5, -8, 13][nn])/5 + (evalOp[-12, 5, 7][nn] - 
         evalOp[-12, 7, 5][nn] + evalOp[-7, -5, 12][nn] - 
         evalOp[-5, -7, 12][nn])/7 + (-evalOp[-12, 5, 7][nn] + 
         evalOp[-12, 7, 5][nn] - evalOp[-7, -5, 12][nn] + 
         evalOp[-5, -7, 12][nn])/5 + (evalOp[-11, 5, 6][nn] - 
         evalOp[-11, 6, 5][nn] + evalOp[-6, -5, 11][nn] - 
         evalOp[-5, -6, 11][nn])/6 + (-evalOp[-11, 5, 6][nn] + 
         evalOp[-11, 6, 5][nn] - evalOp[-6, -5, 11][nn] + 
         evalOp[-5, -6, 11][nn])/5 - evalOp[-5, -1, 6][nn] - 
       evalOp[-5, 1, 4][nn] + evalOp[-5, 4, 1][nn] + 
       (evalOp[-24, 4, 20][nn] - evalOp[-24, 20, 4][nn] + 
         evalOp[-20, -4, 24][nn] - evalOp[-4, -20, 24][nn])/20 + 
       (-evalOp[-24, 4, 20][nn] + evalOp[-24, 20, 4][nn] - 
         evalOp[-20, -4, 24][nn] + evalOp[-4, -20, 24][nn])/4 + 
       (evalOp[-23, 4, 19][nn] - evalOp[-23, 19, 4][nn] + 
         evalOp[-19, -4, 23][nn] - evalOp[-4, -19, 23][nn])/19 + 
       (-evalOp[-23, 4, 19][nn] + evalOp[-23, 19, 4][nn] - 
         evalOp[-19, -4, 23][nn] + evalOp[-4, -19, 23][nn])/4 + 
       (evalOp[-22, 4, 18][nn] - evalOp[-22, 18, 4][nn] + 
         evalOp[-18, -4, 22][nn] - evalOp[-4, -18, 22][nn])/18 + 
       (-evalOp[-22, 4, 18][nn] + evalOp[-22, 18, 4][nn] - 
         evalOp[-18, -4, 22][nn] + evalOp[-4, -18, 22][nn])/4 + 
       (evalOp[-21, 4, 17][nn] - evalOp[-21, 17, 4][nn] + 
         evalOp[-17, -4, 21][nn] - evalOp[-4, -17, 21][nn])/17 + 
       (-evalOp[-21, 4, 17][nn] + evalOp[-21, 17, 4][nn] - 
         evalOp[-17, -4, 21][nn] + evalOp[-4, -17, 21][nn])/4 + 
       (evalOp[-20, 4, 16][nn] - evalOp[-20, 16, 4][nn] + 
         evalOp[-16, -4, 20][nn] - evalOp[-4, -16, 20][nn])/16 + 
       (-evalOp[-20, 4, 16][nn] + evalOp[-20, 16, 4][nn] - 
         evalOp[-16, -4, 20][nn] + evalOp[-4, -16, 20][nn])/4 + 
       (evalOp[-19, 4, 15][nn] - evalOp[-19, 15, 4][nn] + 
         evalOp[-15, -4, 19][nn] - evalOp[-4, -15, 19][nn])/15 + 
       (-evalOp[-19, 4, 15][nn] + evalOp[-19, 15, 4][nn] - 
         evalOp[-15, -4, 19][nn] + evalOp[-4, -15, 19][nn])/4 + 
       (evalOp[-18, 4, 14][nn] - evalOp[-18, 14, 4][nn] + 
         evalOp[-14, -4, 18][nn] - evalOp[-4, -14, 18][nn])/14 + 
       (-evalOp[-18, 4, 14][nn] + evalOp[-18, 14, 4][nn] - 
         evalOp[-14, -4, 18][nn] + evalOp[-4, -14, 18][nn])/4 + 
       (evalOp[-17, 4, 13][nn] - evalOp[-17, 13, 4][nn] + 
         evalOp[-13, -4, 17][nn] - evalOp[-4, -13, 17][nn])/13 + 
       (-evalOp[-17, 4, 13][nn] + evalOp[-17, 13, 4][nn] - 
         evalOp[-13, -4, 17][nn] + evalOp[-4, -13, 17][nn])/4 + 
       (evalOp[-16, 4, 12][nn] - evalOp[-16, 12, 4][nn] + 
         evalOp[-12, -4, 16][nn] - evalOp[-4, -12, 16][nn])/12 + 
       (-evalOp[-16, 4, 12][nn] + evalOp[-16, 12, 4][nn] - 
         evalOp[-12, -4, 16][nn] + evalOp[-4, -12, 16][nn])/4 + 
       (evalOp[-15, 4, 11][nn] - evalOp[-15, 11, 4][nn] + 
         evalOp[-11, -4, 15][nn] - evalOp[-4, -11, 15][nn])/11 + 
       (-evalOp[-15, 4, 11][nn] + evalOp[-15, 11, 4][nn] - 
         evalOp[-11, -4, 15][nn] + evalOp[-4, -11, 15][nn])/4 + 
       (evalOp[-14, 4, 10][nn] - evalOp[-14, 10, 4][nn] + 
         evalOp[-10, -4, 14][nn] - evalOp[-4, -10, 14][nn])/10 + 
       (-evalOp[-14, 4, 10][nn] + evalOp[-14, 10, 4][nn] - 
         evalOp[-10, -4, 14][nn] + evalOp[-4, -10, 14][nn])/4 + 
       (evalOp[-13, 4, 9][nn] - evalOp[-13, 9, 4][nn] + evalOp[-9, -4, 13][
          nn] - evalOp[-4, -9, 13][nn])/9 + (-evalOp[-13, 4, 9][nn] + 
         evalOp[-13, 9, 4][nn] - evalOp[-9, -4, 13][nn] + 
         evalOp[-4, -9, 13][nn])/4 + (evalOp[-12, 4, 8][nn] - 
         evalOp[-12, 8, 4][nn] + evalOp[-8, -4, 12][nn] - 
         evalOp[-4, -8, 12][nn])/8 + (-evalOp[-12, 4, 8][nn] + 
         evalOp[-12, 8, 4][nn] - evalOp[-8, -4, 12][nn] + 
         evalOp[-4, -8, 12][nn])/4 + (evalOp[-11, 4, 7][nn] - 
         evalOp[-11, 7, 4][nn] + evalOp[-7, -4, 11][nn] - 
         evalOp[-4, -7, 11][nn])/7 + (-evalOp[-11, 4, 7][nn] + 
         evalOp[-11, 7, 4][nn] - evalOp[-7, -4, 11][nn] + 
         evalOp[-4, -7, 11][nn])/4 + (evalOp[-10, 4, 6][nn] - 
         evalOp[-10, 6, 4][nn] + evalOp[-6, -4, 10][nn] - 
         evalOp[-4, -6, 10][nn])/6 + (-evalOp[-10, 4, 6][nn] + 
         evalOp[-10, 6, 4][nn] - evalOp[-6, -4, 10][nn] + 
         evalOp[-4, -6, 10][nn])/4 + (evalOp[-9, 4, 5][nn] - 
         evalOp[-9, 5, 4][nn] + evalOp[-5, -4, 9][nn] - 
         evalOp[-4, -5, 9][nn])/5 + (-evalOp[-9, 4, 5][nn] + 
         evalOp[-9, 5, 4][nn] - evalOp[-5, -4, 9][nn] + 
         evalOp[-4, -5, 9][nn])/4 - evalOp[-4, -1, 5][nn] - 
       evalOp[-4, 1, 3][nn] + evalOp[-4, 3, 1][nn] + 
       (evalOp[-23, 3, 20][nn] - evalOp[-23, 20, 3][nn] + 
         evalOp[-20, -3, 23][nn] - evalOp[-3, -20, 23][nn])/20 + 
       (-evalOp[-23, 3, 20][nn] + evalOp[-23, 20, 3][nn] - 
         evalOp[-20, -3, 23][nn] + evalOp[-3, -20, 23][nn])/3 + 
       (evalOp[-22, 3, 19][nn] - evalOp[-22, 19, 3][nn] + 
         evalOp[-19, -3, 22][nn] - evalOp[-3, -19, 22][nn])/19 + 
       (-evalOp[-22, 3, 19][nn] + evalOp[-22, 19, 3][nn] - 
         evalOp[-19, -3, 22][nn] + evalOp[-3, -19, 22][nn])/3 + 
       (evalOp[-21, 3, 18][nn] - evalOp[-21, 18, 3][nn] + 
         evalOp[-18, -3, 21][nn] - evalOp[-3, -18, 21][nn])/18 + 
       (-evalOp[-21, 3, 18][nn] + evalOp[-21, 18, 3][nn] - 
         evalOp[-18, -3, 21][nn] + evalOp[-3, -18, 21][nn])/3 + 
       (evalOp[-20, 3, 17][nn] - evalOp[-20, 17, 3][nn] + 
         evalOp[-17, -3, 20][nn] - evalOp[-3, -17, 20][nn])/17 + 
       (-evalOp[-20, 3, 17][nn] + evalOp[-20, 17, 3][nn] - 
         evalOp[-17, -3, 20][nn] + evalOp[-3, -17, 20][nn])/3 + 
       (evalOp[-19, 3, 16][nn] - evalOp[-19, 16, 3][nn] + 
         evalOp[-16, -3, 19][nn] - evalOp[-3, -16, 19][nn])/16 + 
       (-evalOp[-19, 3, 16][nn] + evalOp[-19, 16, 3][nn] - 
         evalOp[-16, -3, 19][nn] + evalOp[-3, -16, 19][nn])/3 + 
       (evalOp[-18, 3, 15][nn] - evalOp[-18, 15, 3][nn] + 
         evalOp[-15, -3, 18][nn] - evalOp[-3, -15, 18][nn])/15 + 
       (-evalOp[-18, 3, 15][nn] + evalOp[-18, 15, 3][nn] - 
         evalOp[-15, -3, 18][nn] + evalOp[-3, -15, 18][nn])/3 + 
       (evalOp[-17, 3, 14][nn] - evalOp[-17, 14, 3][nn] + 
         evalOp[-14, -3, 17][nn] - evalOp[-3, -14, 17][nn])/14 + 
       (-evalOp[-17, 3, 14][nn] + evalOp[-17, 14, 3][nn] - 
         evalOp[-14, -3, 17][nn] + evalOp[-3, -14, 17][nn])/3 + 
       (evalOp[-16, 3, 13][nn] - evalOp[-16, 13, 3][nn] + 
         evalOp[-13, -3, 16][nn] - evalOp[-3, -13, 16][nn])/13 + 
       (-evalOp[-16, 3, 13][nn] + evalOp[-16, 13, 3][nn] - 
         evalOp[-13, -3, 16][nn] + evalOp[-3, -13, 16][nn])/3 + 
       (evalOp[-15, 3, 12][nn] - evalOp[-15, 12, 3][nn] + 
         evalOp[-12, -3, 15][nn] - evalOp[-3, -12, 15][nn])/12 + 
       (-evalOp[-15, 3, 12][nn] + evalOp[-15, 12, 3][nn] - 
         evalOp[-12, -3, 15][nn] + evalOp[-3, -12, 15][nn])/3 + 
       (evalOp[-14, 3, 11][nn] - evalOp[-14, 11, 3][nn] + 
         evalOp[-11, -3, 14][nn] - evalOp[-3, -11, 14][nn])/11 + 
       (-evalOp[-14, 3, 11][nn] + evalOp[-14, 11, 3][nn] - 
         evalOp[-11, -3, 14][nn] + evalOp[-3, -11, 14][nn])/3 + 
       (evalOp[-13, 3, 10][nn] - evalOp[-13, 10, 3][nn] + 
         evalOp[-10, -3, 13][nn] - evalOp[-3, -10, 13][nn])/10 + 
       (-evalOp[-13, 3, 10][nn] + evalOp[-13, 10, 3][nn] - 
         evalOp[-10, -3, 13][nn] + evalOp[-3, -10, 13][nn])/3 + 
       (evalOp[-12, 3, 9][nn] - evalOp[-12, 9, 3][nn] + evalOp[-9, -3, 12][
          nn] - evalOp[-3, -9, 12][nn])/9 + (-evalOp[-12, 3, 9][nn] + 
         evalOp[-12, 9, 3][nn] - evalOp[-9, -3, 12][nn] + 
         evalOp[-3, -9, 12][nn])/3 + (evalOp[-11, 3, 8][nn] - 
         evalOp[-11, 8, 3][nn] + evalOp[-8, -3, 11][nn] - 
         evalOp[-3, -8, 11][nn])/8 + (-evalOp[-11, 3, 8][nn] + 
         evalOp[-11, 8, 3][nn] - evalOp[-8, -3, 11][nn] + 
         evalOp[-3, -8, 11][nn])/3 + (evalOp[-10, 3, 7][nn] - 
         evalOp[-10, 7, 3][nn] + evalOp[-7, -3, 10][nn] - 
         evalOp[-3, -7, 10][nn])/7 + (-evalOp[-10, 3, 7][nn] + 
         evalOp[-10, 7, 3][nn] - evalOp[-7, -3, 10][nn] + 
         evalOp[-3, -7, 10][nn])/3 + (evalOp[-9, 3, 6][nn] - 
         evalOp[-9, 6, 3][nn] + evalOp[-6, -3, 9][nn] - 
         evalOp[-3, -6, 9][nn])/6 + (-evalOp[-9, 3, 6][nn] + 
         evalOp[-9, 6, 3][nn] - evalOp[-6, -3, 9][nn] + 
         evalOp[-3, -6, 9][nn])/3 + (evalOp[-8, 3, 5][nn] - 
         evalOp[-8, 5, 3][nn] + evalOp[-5, -3, 8][nn] - 
         evalOp[-3, -5, 8][nn])/5 + (-evalOp[-8, 3, 5][nn] + 
         evalOp[-8, 5, 3][nn] - evalOp[-5, -3, 8][nn] + 
         evalOp[-3, -5, 8][nn])/3 + (evalOp[-7, 3, 4][nn] - 
         evalOp[-7, 4, 3][nn] + evalOp[-4, -3, 7][nn] - 
         evalOp[-3, -4, 7][nn])/4 + (-evalOp[-7, 3, 4][nn] + 
         evalOp[-7, 4, 3][nn] - evalOp[-4, -3, 7][nn] + 
         evalOp[-3, -4, 7][nn])/3 - evalOp[-3, -1, 4][nn] - 
       evalOp[-3, 1, 2][nn] + evalOp[-3, 2, 1][nn] + 
       (evalOp[-22, 2, 20][nn] - evalOp[-22, 20, 2][nn] + 
         evalOp[-20, -2, 22][nn] - evalOp[-2, -20, 22][nn])/20 + 
       (-evalOp[-22, 2, 20][nn] + evalOp[-22, 20, 2][nn] - 
         evalOp[-20, -2, 22][nn] + evalOp[-2, -20, 22][nn])/2 + 
       (evalOp[-21, 2, 19][nn] - evalOp[-21, 19, 2][nn] + 
         evalOp[-19, -2, 21][nn] - evalOp[-2, -19, 21][nn])/19 + 
       (-evalOp[-21, 2, 19][nn] + evalOp[-21, 19, 2][nn] - 
         evalOp[-19, -2, 21][nn] + evalOp[-2, -19, 21][nn])/2 + 
       (evalOp[-20, 2, 18][nn] - evalOp[-20, 18, 2][nn] + 
         evalOp[-18, -2, 20][nn] - evalOp[-2, -18, 20][nn])/18 + 
       (-evalOp[-20, 2, 18][nn] + evalOp[-20, 18, 2][nn] - 
         evalOp[-18, -2, 20][nn] + evalOp[-2, -18, 20][nn])/2 + 
       (evalOp[-19, 2, 17][nn] - evalOp[-19, 17, 2][nn] + 
         evalOp[-17, -2, 19][nn] - evalOp[-2, -17, 19][nn])/17 + 
       (-evalOp[-19, 2, 17][nn] + evalOp[-19, 17, 2][nn] - 
         evalOp[-17, -2, 19][nn] + evalOp[-2, -17, 19][nn])/2 + 
       (evalOp[-18, 2, 16][nn] - evalOp[-18, 16, 2][nn] + 
         evalOp[-16, -2, 18][nn] - evalOp[-2, -16, 18][nn])/16 + 
       (-evalOp[-18, 2, 16][nn] + evalOp[-18, 16, 2][nn] - 
         evalOp[-16, -2, 18][nn] + evalOp[-2, -16, 18][nn])/2 + 
       (evalOp[-17, 2, 15][nn] - evalOp[-17, 15, 2][nn] + 
         evalOp[-15, -2, 17][nn] - evalOp[-2, -15, 17][nn])/15 + 
       (-evalOp[-17, 2, 15][nn] + evalOp[-17, 15, 2][nn] - 
         evalOp[-15, -2, 17][nn] + evalOp[-2, -15, 17][nn])/2 + 
       (evalOp[-16, 2, 14][nn] - evalOp[-16, 14, 2][nn] + 
         evalOp[-14, -2, 16][nn] - evalOp[-2, -14, 16][nn])/14 + 
       (-evalOp[-16, 2, 14][nn] + evalOp[-16, 14, 2][nn] - 
         evalOp[-14, -2, 16][nn] + evalOp[-2, -14, 16][nn])/2 + 
       (evalOp[-15, 2, 13][nn] - evalOp[-15, 13, 2][nn] + 
         evalOp[-13, -2, 15][nn] - evalOp[-2, -13, 15][nn])/13 + 
       (-evalOp[-15, 2, 13][nn] + evalOp[-15, 13, 2][nn] - 
         evalOp[-13, -2, 15][nn] + evalOp[-2, -13, 15][nn])/2 + 
       (evalOp[-14, 2, 12][nn] - evalOp[-14, 12, 2][nn] + 
         evalOp[-12, -2, 14][nn] - evalOp[-2, -12, 14][nn])/12 + 
       (-evalOp[-14, 2, 12][nn] + evalOp[-14, 12, 2][nn] - 
         evalOp[-12, -2, 14][nn] + evalOp[-2, -12, 14][nn])/2 + 
       (evalOp[-13, 2, 11][nn] - evalOp[-13, 11, 2][nn] + 
         evalOp[-11, -2, 13][nn] - evalOp[-2, -11, 13][nn])/11 + 
       (-evalOp[-13, 2, 11][nn] + evalOp[-13, 11, 2][nn] - 
         evalOp[-11, -2, 13][nn] + evalOp[-2, -11, 13][nn])/2 + 
       (evalOp[-12, 2, 10][nn] - evalOp[-12, 10, 2][nn] + 
         evalOp[-10, -2, 12][nn] - evalOp[-2, -10, 12][nn])/10 + 
       (-evalOp[-12, 2, 10][nn] + evalOp[-12, 10, 2][nn] - 
         evalOp[-10, -2, 12][nn] + evalOp[-2, -10, 12][nn])/2 + 
       (evalOp[-11, 2, 9][nn] - evalOp[-11, 9, 2][nn] + evalOp[-9, -2, 11][
          nn] - evalOp[-2, -9, 11][nn])/9 + (-evalOp[-11, 2, 9][nn] + 
         evalOp[-11, 9, 2][nn] - evalOp[-9, -2, 11][nn] + 
         evalOp[-2, -9, 11][nn])/2 + (evalOp[-10, 2, 8][nn] - 
         evalOp[-10, 8, 2][nn] + evalOp[-8, -2, 10][nn] - 
         evalOp[-2, -8, 10][nn])/8 + (-evalOp[-10, 2, 8][nn] + 
         evalOp[-10, 8, 2][nn] - evalOp[-8, -2, 10][nn] + 
         evalOp[-2, -8, 10][nn])/2 + (evalOp[-9, 2, 7][nn] - 
         evalOp[-9, 7, 2][nn] + evalOp[-7, -2, 9][nn] - 
         evalOp[-2, -7, 9][nn])/7 + (-evalOp[-9, 2, 7][nn] + 
         evalOp[-9, 7, 2][nn] - evalOp[-7, -2, 9][nn] + 
         evalOp[-2, -7, 9][nn])/2 + (evalOp[-8, 2, 6][nn] - 
         evalOp[-8, 6, 2][nn] + evalOp[-6, -2, 8][nn] - 
         evalOp[-2, -6, 8][nn])/6 + (-evalOp[-8, 2, 6][nn] + 
         evalOp[-8, 6, 2][nn] - evalOp[-6, -2, 8][nn] + 
         evalOp[-2, -6, 8][nn])/2 + (evalOp[-7, 2, 5][nn] - 
         evalOp[-7, 5, 2][nn] + evalOp[-5, -2, 7][nn] - 
         evalOp[-2, -5, 7][nn])/5 + (-evalOp[-7, 2, 5][nn] + 
         evalOp[-7, 5, 2][nn] - evalOp[-5, -2, 7][nn] + 
         evalOp[-2, -5, 7][nn])/2 + (evalOp[-6, 2, 4][nn] - 
         evalOp[-6, 4, 2][nn] + evalOp[-4, -2, 6][nn] - 
         evalOp[-2, -4, 6][nn])/4 + (-evalOp[-6, 2, 4][nn] + 
         evalOp[-6, 4, 2][nn] - evalOp[-4, -2, 6][nn] + 
         evalOp[-2, -4, 6][nn])/2 + (evalOp[-5, 2, 3][nn] - 
         evalOp[-5, 3, 2][nn] + evalOp[-3, -2, 5][nn] - 
         evalOp[-2, -3, 5][nn])/3 + (-evalOp[-5, 2, 3][nn] + 
         evalOp[-5, 3, 2][nn] - evalOp[-3, -2, 5][nn] + 
         evalOp[-2, -3, 5][nn])/2 - evalOp[-2, -1, 3][nn] + 
       (evalOp[-21, 1, 20][nn] - evalOp[-21, 20, 1][nn] + 
         evalOp[-20, -1, 21][nn] - evalOp[-1, -20, 21][nn])/20 + 
       evalOp[-1, -20, 21][nn] + (evalOp[-20, 1, 19][nn] - 
         evalOp[-20, 19, 1][nn] + evalOp[-19, -1, 20][nn] - 
         evalOp[-1, -19, 20][nn])/19 + evalOp[-1, -19, 20][nn] + 
       (evalOp[-19, 1, 18][nn] - evalOp[-19, 18, 1][nn] + 
         evalOp[-18, -1, 19][nn] - evalOp[-1, -18, 19][nn])/18 + 
       evalOp[-1, -18, 19][nn] + (evalOp[-18, 1, 17][nn] - 
         evalOp[-18, 17, 1][nn] + evalOp[-17, -1, 18][nn] - 
         evalOp[-1, -17, 18][nn])/17 + evalOp[-1, -17, 18][nn] + 
       (evalOp[-17, 1, 16][nn] - evalOp[-17, 16, 1][nn] + 
         evalOp[-16, -1, 17][nn] - evalOp[-1, -16, 17][nn])/16 + 
       evalOp[-1, -16, 17][nn] + (evalOp[-16, 1, 15][nn] - 
         evalOp[-16, 15, 1][nn] + evalOp[-15, -1, 16][nn] - 
         evalOp[-1, -15, 16][nn])/15 + evalOp[-1, -15, 16][nn] + 
       (evalOp[-15, 1, 14][nn] - evalOp[-15, 14, 1][nn] + 
         evalOp[-14, -1, 15][nn] - evalOp[-1, -14, 15][nn])/14 + 
       evalOp[-1, -14, 15][nn] + (evalOp[-14, 1, 13][nn] - 
         evalOp[-14, 13, 1][nn] + evalOp[-13, -1, 14][nn] - 
         evalOp[-1, -13, 14][nn])/13 + evalOp[-1, -13, 14][nn] + 
       (evalOp[-13, 1, 12][nn] - evalOp[-13, 12, 1][nn] + 
         evalOp[-12, -1, 13][nn] - evalOp[-1, -12, 13][nn])/12 + 
       evalOp[-1, -12, 13][nn] + (evalOp[-12, 1, 11][nn] - 
         evalOp[-12, 11, 1][nn] + evalOp[-11, -1, 12][nn] - 
         evalOp[-1, -11, 12][nn])/11 + evalOp[-1, -11, 12][nn] + 
       (evalOp[-11, 1, 10][nn] - evalOp[-11, 10, 1][nn] + 
         evalOp[-10, -1, 11][nn] - evalOp[-1, -10, 11][nn])/10 + 
       evalOp[-1, -10, 11][nn] + (evalOp[-10, 1, 9][nn] - 
         evalOp[-10, 9, 1][nn] + evalOp[-9, -1, 10][nn] - 
         evalOp[-1, -9, 10][nn])/9 + evalOp[-1, -9, 10][nn] + 
       (evalOp[-9, 1, 8][nn] - evalOp[-9, 8, 1][nn] + evalOp[-8, -1, 9][nn] - 
         evalOp[-1, -8, 9][nn])/8 + evalOp[-1, -8, 9][nn] + 
       (evalOp[-8, 1, 7][nn] - evalOp[-8, 7, 1][nn] + evalOp[-7, -1, 8][nn] - 
         evalOp[-1, -7, 8][nn])/7 + evalOp[-1, -7, 8][nn] + 
       (evalOp[-7, 1, 6][nn] - evalOp[-7, 6, 1][nn] + evalOp[-6, -1, 7][nn] - 
         evalOp[-1, -6, 7][nn])/6 + evalOp[-1, -6, 7][nn] + 
       (evalOp[-6, 1, 5][nn] - evalOp[-6, 5, 1][nn] + evalOp[-5, -1, 6][nn] - 
         evalOp[-1, -5, 6][nn])/5 + evalOp[-1, -5, 6][nn] + 
       (evalOp[-5, 1, 4][nn] - evalOp[-5, 4, 1][nn] + evalOp[-4, -1, 5][nn] - 
         evalOp[-1, -4, 5][nn])/4 + evalOp[-1, -4, 5][nn] + 
       (evalOp[-4, 1, 3][nn] - evalOp[-4, 3, 1][nn] + evalOp[-3, -1, 4][nn] - 
         evalOp[-1, -3, 4][nn])/3 + evalOp[-1, -3, 4][nn] + 
       (evalOp[-3, 1, 2][nn] - evalOp[-3, 2, 1][nn] + evalOp[-2, -1, 3][nn] - 
         evalOp[-1, -2, 3][nn])/2 + evalOp[-1, -2, 3][nn], 
      evalOp[-21, 1, 20][nn] - evalOp[-21, 20, 1][nn] + 
       evalOp[-20, -1, 21][nn] + evalOp[-20, 1, 19][nn] - 
       evalOp[-20, 19, 1][nn] + (evalOp[-39, 19, 20][nn] - 
         evalOp[-39, 20, 19][nn] + evalOp[-20, -19, 39][nn] - 
         evalOp[-19, -20, 39][nn])/19 + (-evalOp[-39, 19, 20][nn] + 
         evalOp[-39, 20, 19][nn] - evalOp[-20, -19, 39][nn] + 
         evalOp[-19, -20, 39][nn])/20 + evalOp[-19, -1, 20][nn] + 
       evalOp[-19, 1, 18][nn] - evalOp[-19, 18, 1][nn] + 
       (evalOp[-38, 18, 20][nn] - evalOp[-38, 20, 18][nn] + 
         evalOp[-20, -18, 38][nn] - evalOp[-18, -20, 38][nn])/18 + 
       (-evalOp[-38, 18, 20][nn] + evalOp[-38, 20, 18][nn] - 
         evalOp[-20, -18, 38][nn] + evalOp[-18, -20, 38][nn])/20 + 
       (evalOp[-37, 18, 19][nn] - evalOp[-37, 19, 18][nn] + 
         evalOp[-19, -18, 37][nn] - evalOp[-18, -19, 37][nn])/18 + 
       (-evalOp[-37, 18, 19][nn] + evalOp[-37, 19, 18][nn] - 
         evalOp[-19, -18, 37][nn] + evalOp[-18, -19, 37][nn])/19 + 
       evalOp[-18, -1, 19][nn] + evalOp[-18, 1, 17][nn] - 
       evalOp[-18, 17, 1][nn] + (evalOp[-37, 17, 20][nn] - 
         evalOp[-37, 20, 17][nn] + evalOp[-20, -17, 37][nn] - 
         evalOp[-17, -20, 37][nn])/17 + (-evalOp[-37, 17, 20][nn] + 
         evalOp[-37, 20, 17][nn] - evalOp[-20, -17, 37][nn] + 
         evalOp[-17, -20, 37][nn])/20 + (evalOp[-36, 17, 19][nn] - 
         evalOp[-36, 19, 17][nn] + evalOp[-19, -17, 36][nn] - 
         evalOp[-17, -19, 36][nn])/17 + (-evalOp[-36, 17, 19][nn] + 
         evalOp[-36, 19, 17][nn] - evalOp[-19, -17, 36][nn] + 
         evalOp[-17, -19, 36][nn])/19 + (evalOp[-35, 17, 18][nn] - 
         evalOp[-35, 18, 17][nn] + evalOp[-18, -17, 35][nn] - 
         evalOp[-17, -18, 35][nn])/17 + (-evalOp[-35, 17, 18][nn] + 
         evalOp[-35, 18, 17][nn] - evalOp[-18, -17, 35][nn] + 
         evalOp[-17, -18, 35][nn])/18 + evalOp[-17, -1, 18][nn] + 
       evalOp[-17, 1, 16][nn] - evalOp[-17, 16, 1][nn] + 
       (evalOp[-36, 16, 20][nn] - evalOp[-36, 20, 16][nn] + 
         evalOp[-20, -16, 36][nn] - evalOp[-16, -20, 36][nn])/16 + 
       (-evalOp[-36, 16, 20][nn] + evalOp[-36, 20, 16][nn] - 
         evalOp[-20, -16, 36][nn] + evalOp[-16, -20, 36][nn])/20 + 
       (evalOp[-35, 16, 19][nn] - evalOp[-35, 19, 16][nn] + 
         evalOp[-19, -16, 35][nn] - evalOp[-16, -19, 35][nn])/16 + 
       (-evalOp[-35, 16, 19][nn] + evalOp[-35, 19, 16][nn] - 
         evalOp[-19, -16, 35][nn] + evalOp[-16, -19, 35][nn])/19 + 
       (evalOp[-34, 16, 18][nn] - evalOp[-34, 18, 16][nn] + 
         evalOp[-18, -16, 34][nn] - evalOp[-16, -18, 34][nn])/16 + 
       (-evalOp[-34, 16, 18][nn] + evalOp[-34, 18, 16][nn] - 
         evalOp[-18, -16, 34][nn] + evalOp[-16, -18, 34][nn])/18 + 
       (evalOp[-33, 16, 17][nn] - evalOp[-33, 17, 16][nn] + 
         evalOp[-17, -16, 33][nn] - evalOp[-16, -17, 33][nn])/16 + 
       (-evalOp[-33, 16, 17][nn] + evalOp[-33, 17, 16][nn] - 
         evalOp[-17, -16, 33][nn] + evalOp[-16, -17, 33][nn])/17 + 
       evalOp[-16, -1, 17][nn] + evalOp[-16, 1, 15][nn] - 
       evalOp[-16, 15, 1][nn] + (evalOp[-35, 15, 20][nn] - 
         evalOp[-35, 20, 15][nn] + evalOp[-20, -15, 35][nn] - 
         evalOp[-15, -20, 35][nn])/15 + (-evalOp[-35, 15, 20][nn] + 
         evalOp[-35, 20, 15][nn] - evalOp[-20, -15, 35][nn] + 
         evalOp[-15, -20, 35][nn])/20 + (evalOp[-34, 15, 19][nn] - 
         evalOp[-34, 19, 15][nn] + evalOp[-19, -15, 34][nn] - 
         evalOp[-15, -19, 34][nn])/15 + (-evalOp[-34, 15, 19][nn] + 
         evalOp[-34, 19, 15][nn] - evalOp[-19, -15, 34][nn] + 
         evalOp[-15, -19, 34][nn])/19 + (evalOp[-33, 15, 18][nn] - 
         evalOp[-33, 18, 15][nn] + evalOp[-18, -15, 33][nn] - 
         evalOp[-15, -18, 33][nn])/15 + (-evalOp[-33, 15, 18][nn] + 
         evalOp[-33, 18, 15][nn] - evalOp[-18, -15, 33][nn] + 
         evalOp[-15, -18, 33][nn])/18 + (evalOp[-32, 15, 17][nn] - 
         evalOp[-32, 17, 15][nn] + evalOp[-17, -15, 32][nn] - 
         evalOp[-15, -17, 32][nn])/15 + (-evalOp[-32, 15, 17][nn] + 
         evalOp[-32, 17, 15][nn] - evalOp[-17, -15, 32][nn] + 
         evalOp[-15, -17, 32][nn])/17 + (evalOp[-31, 15, 16][nn] - 
         evalOp[-31, 16, 15][nn] + evalOp[-16, -15, 31][nn] - 
         evalOp[-15, -16, 31][nn])/15 + (-evalOp[-31, 15, 16][nn] + 
         evalOp[-31, 16, 15][nn] - evalOp[-16, -15, 31][nn] + 
         evalOp[-15, -16, 31][nn])/16 + evalOp[-15, -1, 16][nn] + 
       evalOp[-15, 1, 14][nn] - evalOp[-15, 14, 1][nn] + 
       (evalOp[-34, 14, 20][nn] - evalOp[-34, 20, 14][nn] + 
         evalOp[-20, -14, 34][nn] - evalOp[-14, -20, 34][nn])/14 + 
       (-evalOp[-34, 14, 20][nn] + evalOp[-34, 20, 14][nn] - 
         evalOp[-20, -14, 34][nn] + evalOp[-14, -20, 34][nn])/20 + 
       (evalOp[-33, 14, 19][nn] - evalOp[-33, 19, 14][nn] + 
         evalOp[-19, -14, 33][nn] - evalOp[-14, -19, 33][nn])/14 + 
       (-evalOp[-33, 14, 19][nn] + evalOp[-33, 19, 14][nn] - 
         evalOp[-19, -14, 33][nn] + evalOp[-14, -19, 33][nn])/19 + 
       (evalOp[-32, 14, 18][nn] - evalOp[-32, 18, 14][nn] + 
         evalOp[-18, -14, 32][nn] - evalOp[-14, -18, 32][nn])/14 + 
       (-evalOp[-32, 14, 18][nn] + evalOp[-32, 18, 14][nn] - 
         evalOp[-18, -14, 32][nn] + evalOp[-14, -18, 32][nn])/18 + 
       (evalOp[-31, 14, 17][nn] - evalOp[-31, 17, 14][nn] + 
         evalOp[-17, -14, 31][nn] - evalOp[-14, -17, 31][nn])/14 + 
       (-evalOp[-31, 14, 17][nn] + evalOp[-31, 17, 14][nn] - 
         evalOp[-17, -14, 31][nn] + evalOp[-14, -17, 31][nn])/17 + 
       (evalOp[-30, 14, 16][nn] - evalOp[-30, 16, 14][nn] + 
         evalOp[-16, -14, 30][nn] - evalOp[-14, -16, 30][nn])/14 + 
       (-evalOp[-30, 14, 16][nn] + evalOp[-30, 16, 14][nn] - 
         evalOp[-16, -14, 30][nn] + evalOp[-14, -16, 30][nn])/16 + 
       (evalOp[-29, 14, 15][nn] - evalOp[-29, 15, 14][nn] + 
         evalOp[-15, -14, 29][nn] - evalOp[-14, -15, 29][nn])/14 + 
       (-evalOp[-29, 14, 15][nn] + evalOp[-29, 15, 14][nn] - 
         evalOp[-15, -14, 29][nn] + evalOp[-14, -15, 29][nn])/15 + 
       evalOp[-14, -1, 15][nn] + evalOp[-14, 1, 13][nn] - 
       evalOp[-14, 13, 1][nn] + (evalOp[-33, 13, 20][nn] - 
         evalOp[-33, 20, 13][nn] + evalOp[-20, -13, 33][nn] - 
         evalOp[-13, -20, 33][nn])/13 + (-evalOp[-33, 13, 20][nn] + 
         evalOp[-33, 20, 13][nn] - evalOp[-20, -13, 33][nn] + 
         evalOp[-13, -20, 33][nn])/20 + (evalOp[-32, 13, 19][nn] - 
         evalOp[-32, 19, 13][nn] + evalOp[-19, -13, 32][nn] - 
         evalOp[-13, -19, 32][nn])/13 + (-evalOp[-32, 13, 19][nn] + 
         evalOp[-32, 19, 13][nn] - evalOp[-19, -13, 32][nn] + 
         evalOp[-13, -19, 32][nn])/19 + (evalOp[-31, 13, 18][nn] - 
         evalOp[-31, 18, 13][nn] + evalOp[-18, -13, 31][nn] - 
         evalOp[-13, -18, 31][nn])/13 + (-evalOp[-31, 13, 18][nn] + 
         evalOp[-31, 18, 13][nn] - evalOp[-18, -13, 31][nn] + 
         evalOp[-13, -18, 31][nn])/18 + (evalOp[-30, 13, 17][nn] - 
         evalOp[-30, 17, 13][nn] + evalOp[-17, -13, 30][nn] - 
         evalOp[-13, -17, 30][nn])/13 + (-evalOp[-30, 13, 17][nn] + 
         evalOp[-30, 17, 13][nn] - evalOp[-17, -13, 30][nn] + 
         evalOp[-13, -17, 30][nn])/17 + (evalOp[-29, 13, 16][nn] - 
         evalOp[-29, 16, 13][nn] + evalOp[-16, -13, 29][nn] - 
         evalOp[-13, -16, 29][nn])/13 + (-evalOp[-29, 13, 16][nn] + 
         evalOp[-29, 16, 13][nn] - evalOp[-16, -13, 29][nn] + 
         evalOp[-13, -16, 29][nn])/16 + (evalOp[-28, 13, 15][nn] - 
         evalOp[-28, 15, 13][nn] + evalOp[-15, -13, 28][nn] - 
         evalOp[-13, -15, 28][nn])/13 + (-evalOp[-28, 13, 15][nn] + 
         evalOp[-28, 15, 13][nn] - evalOp[-15, -13, 28][nn] + 
         evalOp[-13, -15, 28][nn])/15 + (evalOp[-27, 13, 14][nn] - 
         evalOp[-27, 14, 13][nn] + evalOp[-14, -13, 27][nn] - 
         evalOp[-13, -14, 27][nn])/13 + (-evalOp[-27, 13, 14][nn] + 
         evalOp[-27, 14, 13][nn] - evalOp[-14, -13, 27][nn] + 
         evalOp[-13, -14, 27][nn])/14 + evalOp[-13, -1, 14][nn] + 
       evalOp[-13, 1, 12][nn] - evalOp[-13, 12, 1][nn] + 
       (evalOp[-32, 12, 20][nn] - evalOp[-32, 20, 12][nn] + 
         evalOp[-20, -12, 32][nn] - evalOp[-12, -20, 32][nn])/12 + 
       (-evalOp[-32, 12, 20][nn] + evalOp[-32, 20, 12][nn] - 
         evalOp[-20, -12, 32][nn] + evalOp[-12, -20, 32][nn])/20 + 
       (evalOp[-31, 12, 19][nn] - evalOp[-31, 19, 12][nn] + 
         evalOp[-19, -12, 31][nn] - evalOp[-12, -19, 31][nn])/12 + 
       (-evalOp[-31, 12, 19][nn] + evalOp[-31, 19, 12][nn] - 
         evalOp[-19, -12, 31][nn] + evalOp[-12, -19, 31][nn])/19 + 
       (evalOp[-30, 12, 18][nn] - evalOp[-30, 18, 12][nn] + 
         evalOp[-18, -12, 30][nn] - evalOp[-12, -18, 30][nn])/12 + 
       (-evalOp[-30, 12, 18][nn] + evalOp[-30, 18, 12][nn] - 
         evalOp[-18, -12, 30][nn] + evalOp[-12, -18, 30][nn])/18 + 
       (evalOp[-29, 12, 17][nn] - evalOp[-29, 17, 12][nn] + 
         evalOp[-17, -12, 29][nn] - evalOp[-12, -17, 29][nn])/12 + 
       (-evalOp[-29, 12, 17][nn] + evalOp[-29, 17, 12][nn] - 
         evalOp[-17, -12, 29][nn] + evalOp[-12, -17, 29][nn])/17 + 
       (evalOp[-28, 12, 16][nn] - evalOp[-28, 16, 12][nn] + 
         evalOp[-16, -12, 28][nn] - evalOp[-12, -16, 28][nn])/12 + 
       (-evalOp[-28, 12, 16][nn] + evalOp[-28, 16, 12][nn] - 
         evalOp[-16, -12, 28][nn] + evalOp[-12, -16, 28][nn])/16 + 
       (evalOp[-27, 12, 15][nn] - evalOp[-27, 15, 12][nn] + 
         evalOp[-15, -12, 27][nn] - evalOp[-12, -15, 27][nn])/12 + 
       (-evalOp[-27, 12, 15][nn] + evalOp[-27, 15, 12][nn] - 
         evalOp[-15, -12, 27][nn] + evalOp[-12, -15, 27][nn])/15 + 
       (evalOp[-26, 12, 14][nn] - evalOp[-26, 14, 12][nn] + 
         evalOp[-14, -12, 26][nn] - evalOp[-12, -14, 26][nn])/12 + 
       (-evalOp[-26, 12, 14][nn] + evalOp[-26, 14, 12][nn] - 
         evalOp[-14, -12, 26][nn] + evalOp[-12, -14, 26][nn])/14 + 
       (evalOp[-25, 12, 13][nn] - evalOp[-25, 13, 12][nn] + 
         evalOp[-13, -12, 25][nn] - evalOp[-12, -13, 25][nn])/12 + 
       (-evalOp[-25, 12, 13][nn] + evalOp[-25, 13, 12][nn] - 
         evalOp[-13, -12, 25][nn] + evalOp[-12, -13, 25][nn])/13 + 
       evalOp[-12, -1, 13][nn] + evalOp[-12, 1, 11][nn] - 
       evalOp[-12, 11, 1][nn] + (evalOp[-31, 11, 20][nn] - 
         evalOp[-31, 20, 11][nn] + evalOp[-20, -11, 31][nn] - 
         evalOp[-11, -20, 31][nn])/11 + (-evalOp[-31, 11, 20][nn] + 
         evalOp[-31, 20, 11][nn] - evalOp[-20, -11, 31][nn] + 
         evalOp[-11, -20, 31][nn])/20 + (evalOp[-30, 11, 19][nn] - 
         evalOp[-30, 19, 11][nn] + evalOp[-19, -11, 30][nn] - 
         evalOp[-11, -19, 30][nn])/11 + (-evalOp[-30, 11, 19][nn] + 
         evalOp[-30, 19, 11][nn] - evalOp[-19, -11, 30][nn] + 
         evalOp[-11, -19, 30][nn])/19 + (evalOp[-29, 11, 18][nn] - 
         evalOp[-29, 18, 11][nn] + evalOp[-18, -11, 29][nn] - 
         evalOp[-11, -18, 29][nn])/11 + (-evalOp[-29, 11, 18][nn] + 
         evalOp[-29, 18, 11][nn] - evalOp[-18, -11, 29][nn] + 
         evalOp[-11, -18, 29][nn])/18 + (evalOp[-28, 11, 17][nn] - 
         evalOp[-28, 17, 11][nn] + evalOp[-17, -11, 28][nn] - 
         evalOp[-11, -17, 28][nn])/11 + (-evalOp[-28, 11, 17][nn] + 
         evalOp[-28, 17, 11][nn] - evalOp[-17, -11, 28][nn] + 
         evalOp[-11, -17, 28][nn])/17 + (evalOp[-27, 11, 16][nn] - 
         evalOp[-27, 16, 11][nn] + evalOp[-16, -11, 27][nn] - 
         evalOp[-11, -16, 27][nn])/11 + (-evalOp[-27, 11, 16][nn] + 
         evalOp[-27, 16, 11][nn] - evalOp[-16, -11, 27][nn] + 
         evalOp[-11, -16, 27][nn])/16 + (evalOp[-26, 11, 15][nn] - 
         evalOp[-26, 15, 11][nn] + evalOp[-15, -11, 26][nn] - 
         evalOp[-11, -15, 26][nn])/11 + (-evalOp[-26, 11, 15][nn] + 
         evalOp[-26, 15, 11][nn] - evalOp[-15, -11, 26][nn] + 
         evalOp[-11, -15, 26][nn])/15 + (evalOp[-25, 11, 14][nn] - 
         evalOp[-25, 14, 11][nn] + evalOp[-14, -11, 25][nn] - 
         evalOp[-11, -14, 25][nn])/11 + (-evalOp[-25, 11, 14][nn] + 
         evalOp[-25, 14, 11][nn] - evalOp[-14, -11, 25][nn] + 
         evalOp[-11, -14, 25][nn])/14 + (evalOp[-24, 11, 13][nn] - 
         evalOp[-24, 13, 11][nn] + evalOp[-13, -11, 24][nn] - 
         evalOp[-11, -13, 24][nn])/11 + (-evalOp[-24, 11, 13][nn] + 
         evalOp[-24, 13, 11][nn] - evalOp[-13, -11, 24][nn] + 
         evalOp[-11, -13, 24][nn])/13 + (evalOp[-23, 11, 12][nn] - 
         evalOp[-23, 12, 11][nn] + evalOp[-12, -11, 23][nn] - 
         evalOp[-11, -12, 23][nn])/11 + (-evalOp[-23, 11, 12][nn] + 
         evalOp[-23, 12, 11][nn] - evalOp[-12, -11, 23][nn] + 
         evalOp[-11, -12, 23][nn])/12 + evalOp[-11, -1, 12][nn] + 
       evalOp[-11, 1, 10][nn] - evalOp[-11, 10, 1][nn] + 
       (evalOp[-30, 10, 20][nn] - evalOp[-30, 20, 10][nn] + 
         evalOp[-20, -10, 30][nn] - evalOp[-10, -20, 30][nn])/10 + 
       (-evalOp[-30, 10, 20][nn] + evalOp[-30, 20, 10][nn] - 
         evalOp[-20, -10, 30][nn] + evalOp[-10, -20, 30][nn])/20 + 
       (evalOp[-29, 10, 19][nn] - evalOp[-29, 19, 10][nn] + 
         evalOp[-19, -10, 29][nn] - evalOp[-10, -19, 29][nn])/10 + 
       (-evalOp[-29, 10, 19][nn] + evalOp[-29, 19, 10][nn] - 
         evalOp[-19, -10, 29][nn] + evalOp[-10, -19, 29][nn])/19 + 
       (evalOp[-28, 10, 18][nn] - evalOp[-28, 18, 10][nn] + 
         evalOp[-18, -10, 28][nn] - evalOp[-10, -18, 28][nn])/10 + 
       (-evalOp[-28, 10, 18][nn] + evalOp[-28, 18, 10][nn] - 
         evalOp[-18, -10, 28][nn] + evalOp[-10, -18, 28][nn])/18 + 
       (evalOp[-27, 10, 17][nn] - evalOp[-27, 17, 10][nn] + 
         evalOp[-17, -10, 27][nn] - evalOp[-10, -17, 27][nn])/10 + 
       (-evalOp[-27, 10, 17][nn] + evalOp[-27, 17, 10][nn] - 
         evalOp[-17, -10, 27][nn] + evalOp[-10, -17, 27][nn])/17 + 
       (evalOp[-26, 10, 16][nn] - evalOp[-26, 16, 10][nn] + 
         evalOp[-16, -10, 26][nn] - evalOp[-10, -16, 26][nn])/10 + 
       (-evalOp[-26, 10, 16][nn] + evalOp[-26, 16, 10][nn] - 
         evalOp[-16, -10, 26][nn] + evalOp[-10, -16, 26][nn])/16 + 
       (evalOp[-25, 10, 15][nn] - evalOp[-25, 15, 10][nn] + 
         evalOp[-15, -10, 25][nn] - evalOp[-10, -15, 25][nn])/10 + 
       (-evalOp[-25, 10, 15][nn] + evalOp[-25, 15, 10][nn] - 
         evalOp[-15, -10, 25][nn] + evalOp[-10, -15, 25][nn])/15 + 
       (evalOp[-24, 10, 14][nn] - evalOp[-24, 14, 10][nn] + 
         evalOp[-14, -10, 24][nn] - evalOp[-10, -14, 24][nn])/10 + 
       (-evalOp[-24, 10, 14][nn] + evalOp[-24, 14, 10][nn] - 
         evalOp[-14, -10, 24][nn] + evalOp[-10, -14, 24][nn])/14 + 
       (evalOp[-23, 10, 13][nn] - evalOp[-23, 13, 10][nn] + 
         evalOp[-13, -10, 23][nn] - evalOp[-10, -13, 23][nn])/10 + 
       (-evalOp[-23, 10, 13][nn] + evalOp[-23, 13, 10][nn] - 
         evalOp[-13, -10, 23][nn] + evalOp[-10, -13, 23][nn])/13 + 
       (evalOp[-22, 10, 12][nn] - evalOp[-22, 12, 10][nn] + 
         evalOp[-12, -10, 22][nn] - evalOp[-10, -12, 22][nn])/10 + 
       (-evalOp[-22, 10, 12][nn] + evalOp[-22, 12, 10][nn] - 
         evalOp[-12, -10, 22][nn] + evalOp[-10, -12, 22][nn])/12 + 
       (evalOp[-21, 10, 11][nn] - evalOp[-21, 11, 10][nn] + 
         evalOp[-11, -10, 21][nn] - evalOp[-10, -11, 21][nn])/10 + 
       (-evalOp[-21, 10, 11][nn] + evalOp[-21, 11, 10][nn] - 
         evalOp[-11, -10, 21][nn] + evalOp[-10, -11, 21][nn])/11 + 
       evalOp[-10, -1, 11][nn] + evalOp[-10, 1, 9][nn] - 
       evalOp[-10, 9, 1][nn] + (evalOp[-29, 9, 20][nn] - 
         evalOp[-29, 20, 9][nn] + evalOp[-20, -9, 29][nn] - 
         evalOp[-9, -20, 29][nn])/9 + (-evalOp[-29, 9, 20][nn] + 
         evalOp[-29, 20, 9][nn] - evalOp[-20, -9, 29][nn] + 
         evalOp[-9, -20, 29][nn])/20 + (evalOp[-28, 9, 19][nn] - 
         evalOp[-28, 19, 9][nn] + evalOp[-19, -9, 28][nn] - 
         evalOp[-9, -19, 28][nn])/9 + (-evalOp[-28, 9, 19][nn] + 
         evalOp[-28, 19, 9][nn] - evalOp[-19, -9, 28][nn] + 
         evalOp[-9, -19, 28][nn])/19 + (evalOp[-27, 9, 18][nn] - 
         evalOp[-27, 18, 9][nn] + evalOp[-18, -9, 27][nn] - 
         evalOp[-9, -18, 27][nn])/9 + (-evalOp[-27, 9, 18][nn] + 
         evalOp[-27, 18, 9][nn] - evalOp[-18, -9, 27][nn] + 
         evalOp[-9, -18, 27][nn])/18 + (evalOp[-26, 9, 17][nn] - 
         evalOp[-26, 17, 9][nn] + evalOp[-17, -9, 26][nn] - 
         evalOp[-9, -17, 26][nn])/9 + (-evalOp[-26, 9, 17][nn] + 
         evalOp[-26, 17, 9][nn] - evalOp[-17, -9, 26][nn] + 
         evalOp[-9, -17, 26][nn])/17 + (evalOp[-25, 9, 16][nn] - 
         evalOp[-25, 16, 9][nn] + evalOp[-16, -9, 25][nn] - 
         evalOp[-9, -16, 25][nn])/9 + (-evalOp[-25, 9, 16][nn] + 
         evalOp[-25, 16, 9][nn] - evalOp[-16, -9, 25][nn] + 
         evalOp[-9, -16, 25][nn])/16 + (evalOp[-24, 9, 15][nn] - 
         evalOp[-24, 15, 9][nn] + evalOp[-15, -9, 24][nn] - 
         evalOp[-9, -15, 24][nn])/9 + (-evalOp[-24, 9, 15][nn] + 
         evalOp[-24, 15, 9][nn] - evalOp[-15, -9, 24][nn] + 
         evalOp[-9, -15, 24][nn])/15 + (evalOp[-23, 9, 14][nn] - 
         evalOp[-23, 14, 9][nn] + evalOp[-14, -9, 23][nn] - 
         evalOp[-9, -14, 23][nn])/9 + (-evalOp[-23, 9, 14][nn] + 
         evalOp[-23, 14, 9][nn] - evalOp[-14, -9, 23][nn] + 
         evalOp[-9, -14, 23][nn])/14 + (evalOp[-22, 9, 13][nn] - 
         evalOp[-22, 13, 9][nn] + evalOp[-13, -9, 22][nn] - 
         evalOp[-9, -13, 22][nn])/9 + (-evalOp[-22, 9, 13][nn] + 
         evalOp[-22, 13, 9][nn] - evalOp[-13, -9, 22][nn] + 
         evalOp[-9, -13, 22][nn])/13 + (evalOp[-21, 9, 12][nn] - 
         evalOp[-21, 12, 9][nn] + evalOp[-12, -9, 21][nn] - 
         evalOp[-9, -12, 21][nn])/9 + (-evalOp[-21, 9, 12][nn] + 
         evalOp[-21, 12, 9][nn] - evalOp[-12, -9, 21][nn] + 
         evalOp[-9, -12, 21][nn])/12 + (evalOp[-20, 9, 11][nn] - 
         evalOp[-20, 11, 9][nn] + evalOp[-11, -9, 20][nn] - 
         evalOp[-9, -11, 20][nn])/9 + (-evalOp[-20, 9, 11][nn] + 
         evalOp[-20, 11, 9][nn] - evalOp[-11, -9, 20][nn] + 
         evalOp[-9, -11, 20][nn])/11 + (evalOp[-19, 9, 10][nn] - 
         evalOp[-19, 10, 9][nn] + evalOp[-10, -9, 19][nn] - 
         evalOp[-9, -10, 19][nn])/9 + (-evalOp[-19, 9, 10][nn] + 
         evalOp[-19, 10, 9][nn] - evalOp[-10, -9, 19][nn] + 
         evalOp[-9, -10, 19][nn])/10 + evalOp[-9, -1, 10][nn] + 
       evalOp[-9, 1, 8][nn] - evalOp[-9, 8, 1][nn] + 
       (evalOp[-28, 8, 20][nn] - evalOp[-28, 20, 8][nn] + 
         evalOp[-20, -8, 28][nn] - evalOp[-8, -20, 28][nn])/8 + 
       (-evalOp[-28, 8, 20][nn] + evalOp[-28, 20, 8][nn] - 
         evalOp[-20, -8, 28][nn] + evalOp[-8, -20, 28][nn])/20 + 
       (evalOp[-27, 8, 19][nn] - evalOp[-27, 19, 8][nn] + 
         evalOp[-19, -8, 27][nn] - evalOp[-8, -19, 27][nn])/8 + 
       (-evalOp[-27, 8, 19][nn] + evalOp[-27, 19, 8][nn] - 
         evalOp[-19, -8, 27][nn] + evalOp[-8, -19, 27][nn])/19 + 
       (evalOp[-26, 8, 18][nn] - evalOp[-26, 18, 8][nn] + 
         evalOp[-18, -8, 26][nn] - evalOp[-8, -18, 26][nn])/8 + 
       (-evalOp[-26, 8, 18][nn] + evalOp[-26, 18, 8][nn] - 
         evalOp[-18, -8, 26][nn] + evalOp[-8, -18, 26][nn])/18 + 
       (evalOp[-25, 8, 17][nn] - evalOp[-25, 17, 8][nn] + 
         evalOp[-17, -8, 25][nn] - evalOp[-8, -17, 25][nn])/8 + 
       (-evalOp[-25, 8, 17][nn] + evalOp[-25, 17, 8][nn] - 
         evalOp[-17, -8, 25][nn] + evalOp[-8, -17, 25][nn])/17 + 
       (evalOp[-24, 8, 16][nn] - evalOp[-24, 16, 8][nn] + 
         evalOp[-16, -8, 24][nn] - evalOp[-8, -16, 24][nn])/8 + 
       (-evalOp[-24, 8, 16][nn] + evalOp[-24, 16, 8][nn] - 
         evalOp[-16, -8, 24][nn] + evalOp[-8, -16, 24][nn])/16 + 
       (evalOp[-23, 8, 15][nn] - evalOp[-23, 15, 8][nn] + 
         evalOp[-15, -8, 23][nn] - evalOp[-8, -15, 23][nn])/8 + 
       (-evalOp[-23, 8, 15][nn] + evalOp[-23, 15, 8][nn] - 
         evalOp[-15, -8, 23][nn] + evalOp[-8, -15, 23][nn])/15 + 
       (evalOp[-22, 8, 14][nn] - evalOp[-22, 14, 8][nn] + 
         evalOp[-14, -8, 22][nn] - evalOp[-8, -14, 22][nn])/8 + 
       (-evalOp[-22, 8, 14][nn] + evalOp[-22, 14, 8][nn] - 
         evalOp[-14, -8, 22][nn] + evalOp[-8, -14, 22][nn])/14 + 
       (evalOp[-21, 8, 13][nn] - evalOp[-21, 13, 8][nn] + 
         evalOp[-13, -8, 21][nn] - evalOp[-8, -13, 21][nn])/8 + 
       (-evalOp[-21, 8, 13][nn] + evalOp[-21, 13, 8][nn] - 
         evalOp[-13, -8, 21][nn] + evalOp[-8, -13, 21][nn])/13 + 
       (evalOp[-20, 8, 12][nn] - evalOp[-20, 12, 8][nn] + 
         evalOp[-12, -8, 20][nn] - evalOp[-8, -12, 20][nn])/8 + 
       (-evalOp[-20, 8, 12][nn] + evalOp[-20, 12, 8][nn] - 
         evalOp[-12, -8, 20][nn] + evalOp[-8, -12, 20][nn])/12 + 
       (evalOp[-19, 8, 11][nn] - evalOp[-19, 11, 8][nn] + 
         evalOp[-11, -8, 19][nn] - evalOp[-8, -11, 19][nn])/8 + 
       (-evalOp[-19, 8, 11][nn] + evalOp[-19, 11, 8][nn] - 
         evalOp[-11, -8, 19][nn] + evalOp[-8, -11, 19][nn])/11 + 
       (evalOp[-18, 8, 10][nn] - evalOp[-18, 10, 8][nn] + 
         evalOp[-10, -8, 18][nn] - evalOp[-8, -10, 18][nn])/8 + 
       (-evalOp[-18, 8, 10][nn] + evalOp[-18, 10, 8][nn] - 
         evalOp[-10, -8, 18][nn] + evalOp[-8, -10, 18][nn])/10 + 
       (evalOp[-17, 8, 9][nn] - evalOp[-17, 9, 8][nn] + evalOp[-9, -8, 17][
          nn] - evalOp[-8, -9, 17][nn])/8 + (-evalOp[-17, 8, 9][nn] + 
         evalOp[-17, 9, 8][nn] - evalOp[-9, -8, 17][nn] + 
         evalOp[-8, -9, 17][nn])/9 + evalOp[-8, -1, 9][nn] + 
       evalOp[-8, 1, 7][nn] - evalOp[-8, 7, 1][nn] + 
       (evalOp[-27, 7, 20][nn] - evalOp[-27, 20, 7][nn] + 
         evalOp[-20, -7, 27][nn] - evalOp[-7, -20, 27][nn])/7 + 
       (-evalOp[-27, 7, 20][nn] + evalOp[-27, 20, 7][nn] - 
         evalOp[-20, -7, 27][nn] + evalOp[-7, -20, 27][nn])/20 + 
       (evalOp[-26, 7, 19][nn] - evalOp[-26, 19, 7][nn] + 
         evalOp[-19, -7, 26][nn] - evalOp[-7, -19, 26][nn])/7 + 
       (-evalOp[-26, 7, 19][nn] + evalOp[-26, 19, 7][nn] - 
         evalOp[-19, -7, 26][nn] + evalOp[-7, -19, 26][nn])/19 + 
       (evalOp[-25, 7, 18][nn] - evalOp[-25, 18, 7][nn] + 
         evalOp[-18, -7, 25][nn] - evalOp[-7, -18, 25][nn])/7 + 
       (-evalOp[-25, 7, 18][nn] + evalOp[-25, 18, 7][nn] - 
         evalOp[-18, -7, 25][nn] + evalOp[-7, -18, 25][nn])/18 + 
       (evalOp[-24, 7, 17][nn] - evalOp[-24, 17, 7][nn] + 
         evalOp[-17, -7, 24][nn] - evalOp[-7, -17, 24][nn])/7 + 
       (-evalOp[-24, 7, 17][nn] + evalOp[-24, 17, 7][nn] - 
         evalOp[-17, -7, 24][nn] + evalOp[-7, -17, 24][nn])/17 + 
       (evalOp[-23, 7, 16][nn] - evalOp[-23, 16, 7][nn] + 
         evalOp[-16, -7, 23][nn] - evalOp[-7, -16, 23][nn])/7 + 
       (-evalOp[-23, 7, 16][nn] + evalOp[-23, 16, 7][nn] - 
         evalOp[-16, -7, 23][nn] + evalOp[-7, -16, 23][nn])/16 + 
       (evalOp[-22, 7, 15][nn] - evalOp[-22, 15, 7][nn] + 
         evalOp[-15, -7, 22][nn] - evalOp[-7, -15, 22][nn])/7 + 
       (-evalOp[-22, 7, 15][nn] + evalOp[-22, 15, 7][nn] - 
         evalOp[-15, -7, 22][nn] + evalOp[-7, -15, 22][nn])/15 + 
       (evalOp[-21, 7, 14][nn] - evalOp[-21, 14, 7][nn] + 
         evalOp[-14, -7, 21][nn] - evalOp[-7, -14, 21][nn])/7 + 
       (-evalOp[-21, 7, 14][nn] + evalOp[-21, 14, 7][nn] - 
         evalOp[-14, -7, 21][nn] + evalOp[-7, -14, 21][nn])/14 + 
       (evalOp[-20, 7, 13][nn] - evalOp[-20, 13, 7][nn] + 
         evalOp[-13, -7, 20][nn] - evalOp[-7, -13, 20][nn])/7 + 
       (-evalOp[-20, 7, 13][nn] + evalOp[-20, 13, 7][nn] - 
         evalOp[-13, -7, 20][nn] + evalOp[-7, -13, 20][nn])/13 + 
       (evalOp[-19, 7, 12][nn] - evalOp[-19, 12, 7][nn] + 
         evalOp[-12, -7, 19][nn] - evalOp[-7, -12, 19][nn])/7 + 
       (-evalOp[-19, 7, 12][nn] + evalOp[-19, 12, 7][nn] - 
         evalOp[-12, -7, 19][nn] + evalOp[-7, -12, 19][nn])/12 + 
       (evalOp[-18, 7, 11][nn] - evalOp[-18, 11, 7][nn] + 
         evalOp[-11, -7, 18][nn] - evalOp[-7, -11, 18][nn])/7 + 
       (-evalOp[-18, 7, 11][nn] + evalOp[-18, 11, 7][nn] - 
         evalOp[-11, -7, 18][nn] + evalOp[-7, -11, 18][nn])/11 + 
       (evalOp[-17, 7, 10][nn] - evalOp[-17, 10, 7][nn] + 
         evalOp[-10, -7, 17][nn] - evalOp[-7, -10, 17][nn])/7 + 
       (-evalOp[-17, 7, 10][nn] + evalOp[-17, 10, 7][nn] - 
         evalOp[-10, -7, 17][nn] + evalOp[-7, -10, 17][nn])/10 + 
       (evalOp[-16, 7, 9][nn] - evalOp[-16, 9, 7][nn] + evalOp[-9, -7, 16][
          nn] - evalOp[-7, -9, 16][nn])/7 + (-evalOp[-16, 7, 9][nn] + 
         evalOp[-16, 9, 7][nn] - evalOp[-9, -7, 16][nn] + 
         evalOp[-7, -9, 16][nn])/9 + (evalOp[-15, 7, 8][nn] - 
         evalOp[-15, 8, 7][nn] + evalOp[-8, -7, 15][nn] - 
         evalOp[-7, -8, 15][nn])/7 + (-evalOp[-15, 7, 8][nn] + 
         evalOp[-15, 8, 7][nn] - evalOp[-8, -7, 15][nn] + 
         evalOp[-7, -8, 15][nn])/8 + evalOp[-7, -1, 8][nn] + 
       evalOp[-7, 1, 6][nn] - evalOp[-7, 6, 1][nn] + 
       (evalOp[-26, 6, 20][nn] - evalOp[-26, 20, 6][nn] + 
         evalOp[-20, -6, 26][nn] - evalOp[-6, -20, 26][nn])/6 + 
       (-evalOp[-26, 6, 20][nn] + evalOp[-26, 20, 6][nn] - 
         evalOp[-20, -6, 26][nn] + evalOp[-6, -20, 26][nn])/20 + 
       (evalOp[-25, 6, 19][nn] - evalOp[-25, 19, 6][nn] + 
         evalOp[-19, -6, 25][nn] - evalOp[-6, -19, 25][nn])/6 + 
       (-evalOp[-25, 6, 19][nn] + evalOp[-25, 19, 6][nn] - 
         evalOp[-19, -6, 25][nn] + evalOp[-6, -19, 25][nn])/19 + 
       (evalOp[-24, 6, 18][nn] - evalOp[-24, 18, 6][nn] + 
         evalOp[-18, -6, 24][nn] - evalOp[-6, -18, 24][nn])/6 + 
       (-evalOp[-24, 6, 18][nn] + evalOp[-24, 18, 6][nn] - 
         evalOp[-18, -6, 24][nn] + evalOp[-6, -18, 24][nn])/18 + 
       (evalOp[-23, 6, 17][nn] - evalOp[-23, 17, 6][nn] + 
         evalOp[-17, -6, 23][nn] - evalOp[-6, -17, 23][nn])/6 + 
       (-evalOp[-23, 6, 17][nn] + evalOp[-23, 17, 6][nn] - 
         evalOp[-17, -6, 23][nn] + evalOp[-6, -17, 23][nn])/17 + 
       (evalOp[-22, 6, 16][nn] - evalOp[-22, 16, 6][nn] + 
         evalOp[-16, -6, 22][nn] - evalOp[-6, -16, 22][nn])/6 + 
       (-evalOp[-22, 6, 16][nn] + evalOp[-22, 16, 6][nn] - 
         evalOp[-16, -6, 22][nn] + evalOp[-6, -16, 22][nn])/16 + 
       (evalOp[-21, 6, 15][nn] - evalOp[-21, 15, 6][nn] + 
         evalOp[-15, -6, 21][nn] - evalOp[-6, -15, 21][nn])/6 + 
       (-evalOp[-21, 6, 15][nn] + evalOp[-21, 15, 6][nn] - 
         evalOp[-15, -6, 21][nn] + evalOp[-6, -15, 21][nn])/15 + 
       (evalOp[-20, 6, 14][nn] - evalOp[-20, 14, 6][nn] + 
         evalOp[-14, -6, 20][nn] - evalOp[-6, -14, 20][nn])/6 + 
       (-evalOp[-20, 6, 14][nn] + evalOp[-20, 14, 6][nn] - 
         evalOp[-14, -6, 20][nn] + evalOp[-6, -14, 20][nn])/14 + 
       (evalOp[-19, 6, 13][nn] - evalOp[-19, 13, 6][nn] + 
         evalOp[-13, -6, 19][nn] - evalOp[-6, -13, 19][nn])/6 + 
       (-evalOp[-19, 6, 13][nn] + evalOp[-19, 13, 6][nn] - 
         evalOp[-13, -6, 19][nn] + evalOp[-6, -13, 19][nn])/13 + 
       (evalOp[-18, 6, 12][nn] - evalOp[-18, 12, 6][nn] + 
         evalOp[-12, -6, 18][nn] - evalOp[-6, -12, 18][nn])/6 + 
       (-evalOp[-18, 6, 12][nn] + evalOp[-18, 12, 6][nn] - 
         evalOp[-12, -6, 18][nn] + evalOp[-6, -12, 18][nn])/12 + 
       (evalOp[-17, 6, 11][nn] - evalOp[-17, 11, 6][nn] + 
         evalOp[-11, -6, 17][nn] - evalOp[-6, -11, 17][nn])/6 + 
       (-evalOp[-17, 6, 11][nn] + evalOp[-17, 11, 6][nn] - 
         evalOp[-11, -6, 17][nn] + evalOp[-6, -11, 17][nn])/11 + 
       (evalOp[-16, 6, 10][nn] - evalOp[-16, 10, 6][nn] + 
         evalOp[-10, -6, 16][nn] - evalOp[-6, -10, 16][nn])/6 + 
       (-evalOp[-16, 6, 10][nn] + evalOp[-16, 10, 6][nn] - 
         evalOp[-10, -6, 16][nn] + evalOp[-6, -10, 16][nn])/10 + 
       (evalOp[-15, 6, 9][nn] - evalOp[-15, 9, 6][nn] + evalOp[-9, -6, 15][
          nn] - evalOp[-6, -9, 15][nn])/6 + (-evalOp[-15, 6, 9][nn] + 
         evalOp[-15, 9, 6][nn] - evalOp[-9, -6, 15][nn] + 
         evalOp[-6, -9, 15][nn])/9 + (evalOp[-14, 6, 8][nn] - 
         evalOp[-14, 8, 6][nn] + evalOp[-8, -6, 14][nn] - 
         evalOp[-6, -8, 14][nn])/6 + (-evalOp[-14, 6, 8][nn] + 
         evalOp[-14, 8, 6][nn] - evalOp[-8, -6, 14][nn] + 
         evalOp[-6, -8, 14][nn])/8 + (evalOp[-13, 6, 7][nn] - 
         evalOp[-13, 7, 6][nn] + evalOp[-7, -6, 13][nn] - 
         evalOp[-6, -7, 13][nn])/6 + (-evalOp[-13, 6, 7][nn] + 
         evalOp[-13, 7, 6][nn] - evalOp[-7, -6, 13][nn] + 
         evalOp[-6, -7, 13][nn])/7 + evalOp[-6, -1, 7][nn] + 
       evalOp[-6, 1, 5][nn] - evalOp[-6, 5, 1][nn] + 
       (evalOp[-25, 5, 20][nn] - evalOp[-25, 20, 5][nn] + 
         evalOp[-20, -5, 25][nn] - evalOp[-5, -20, 25][nn])/5 + 
       (-evalOp[-25, 5, 20][nn] + evalOp[-25, 20, 5][nn] - 
         evalOp[-20, -5, 25][nn] + evalOp[-5, -20, 25][nn])/20 + 
       (evalOp[-24, 5, 19][nn] - evalOp[-24, 19, 5][nn] + 
         evalOp[-19, -5, 24][nn] - evalOp[-5, -19, 24][nn])/5 + 
       (-evalOp[-24, 5, 19][nn] + evalOp[-24, 19, 5][nn] - 
         evalOp[-19, -5, 24][nn] + evalOp[-5, -19, 24][nn])/19 + 
       (evalOp[-23, 5, 18][nn] - evalOp[-23, 18, 5][nn] + 
         evalOp[-18, -5, 23][nn] - evalOp[-5, -18, 23][nn])/5 + 
       (-evalOp[-23, 5, 18][nn] + evalOp[-23, 18, 5][nn] - 
         evalOp[-18, -5, 23][nn] + evalOp[-5, -18, 23][nn])/18 + 
       (evalOp[-22, 5, 17][nn] - evalOp[-22, 17, 5][nn] + 
         evalOp[-17, -5, 22][nn] - evalOp[-5, -17, 22][nn])/5 + 
       (-evalOp[-22, 5, 17][nn] + evalOp[-22, 17, 5][nn] - 
         evalOp[-17, -5, 22][nn] + evalOp[-5, -17, 22][nn])/17 + 
       (evalOp[-21, 5, 16][nn] - evalOp[-21, 16, 5][nn] + 
         evalOp[-16, -5, 21][nn] - evalOp[-5, -16, 21][nn])/5 + 
       (-evalOp[-21, 5, 16][nn] + evalOp[-21, 16, 5][nn] - 
         evalOp[-16, -5, 21][nn] + evalOp[-5, -16, 21][nn])/16 + 
       (evalOp[-20, 5, 15][nn] - evalOp[-20, 15, 5][nn] + 
         evalOp[-15, -5, 20][nn] - evalOp[-5, -15, 20][nn])/5 + 
       (-evalOp[-20, 5, 15][nn] + evalOp[-20, 15, 5][nn] - 
         evalOp[-15, -5, 20][nn] + evalOp[-5, -15, 20][nn])/15 + 
       (evalOp[-19, 5, 14][nn] - evalOp[-19, 14, 5][nn] + 
         evalOp[-14, -5, 19][nn] - evalOp[-5, -14, 19][nn])/5 + 
       (-evalOp[-19, 5, 14][nn] + evalOp[-19, 14, 5][nn] - 
         evalOp[-14, -5, 19][nn] + evalOp[-5, -14, 19][nn])/14 + 
       (evalOp[-18, 5, 13][nn] - evalOp[-18, 13, 5][nn] + 
         evalOp[-13, -5, 18][nn] - evalOp[-5, -13, 18][nn])/5 + 
       (-evalOp[-18, 5, 13][nn] + evalOp[-18, 13, 5][nn] - 
         evalOp[-13, -5, 18][nn] + evalOp[-5, -13, 18][nn])/13 + 
       (evalOp[-17, 5, 12][nn] - evalOp[-17, 12, 5][nn] + 
         evalOp[-12, -5, 17][nn] - evalOp[-5, -12, 17][nn])/5 + 
       (-evalOp[-17, 5, 12][nn] + evalOp[-17, 12, 5][nn] - 
         evalOp[-12, -5, 17][nn] + evalOp[-5, -12, 17][nn])/12 + 
       (evalOp[-16, 5, 11][nn] - evalOp[-16, 11, 5][nn] + 
         evalOp[-11, -5, 16][nn] - evalOp[-5, -11, 16][nn])/5 + 
       (-evalOp[-16, 5, 11][nn] + evalOp[-16, 11, 5][nn] - 
         evalOp[-11, -5, 16][nn] + evalOp[-5, -11, 16][nn])/11 + 
       (evalOp[-15, 5, 10][nn] - evalOp[-15, 10, 5][nn] + 
         evalOp[-10, -5, 15][nn] - evalOp[-5, -10, 15][nn])/5 + 
       (-evalOp[-15, 5, 10][nn] + evalOp[-15, 10, 5][nn] - 
         evalOp[-10, -5, 15][nn] + evalOp[-5, -10, 15][nn])/10 + 
       (evalOp[-14, 5, 9][nn] - evalOp[-14, 9, 5][nn] + evalOp[-9, -5, 14][
          nn] - evalOp[-5, -9, 14][nn])/5 + (-evalOp[-14, 5, 9][nn] + 
         evalOp[-14, 9, 5][nn] - evalOp[-9, -5, 14][nn] + 
         evalOp[-5, -9, 14][nn])/9 + (evalOp[-13, 5, 8][nn] - 
         evalOp[-13, 8, 5][nn] + evalOp[-8, -5, 13][nn] - 
         evalOp[-5, -8, 13][nn])/5 + (-evalOp[-13, 5, 8][nn] + 
         evalOp[-13, 8, 5][nn] - evalOp[-8, -5, 13][nn] + 
         evalOp[-5, -8, 13][nn])/8 + (evalOp[-12, 5, 7][nn] - 
         evalOp[-12, 7, 5][nn] + evalOp[-7, -5, 12][nn] - 
         evalOp[-5, -7, 12][nn])/5 + (-evalOp[-12, 5, 7][nn] + 
         evalOp[-12, 7, 5][nn] - evalOp[-7, -5, 12][nn] + 
         evalOp[-5, -7, 12][nn])/7 + (evalOp[-11, 5, 6][nn] - 
         evalOp[-11, 6, 5][nn] + evalOp[-6, -5, 11][nn] - 
         evalOp[-5, -6, 11][nn])/5 + (-evalOp[-11, 5, 6][nn] + 
         evalOp[-11, 6, 5][nn] - evalOp[-6, -5, 11][nn] + 
         evalOp[-5, -6, 11][nn])/6 + evalOp[-5, -1, 6][nn] + 
       evalOp[-5, 1, 4][nn] - evalOp[-5, 4, 1][nn] + 
       (evalOp[-24, 4, 20][nn] - evalOp[-24, 20, 4][nn] + 
         evalOp[-20, -4, 24][nn] - evalOp[-4, -20, 24][nn])/4 + 
       (-evalOp[-24, 4, 20][nn] + evalOp[-24, 20, 4][nn] - 
         evalOp[-20, -4, 24][nn] + evalOp[-4, -20, 24][nn])/20 + 
       (evalOp[-23, 4, 19][nn] - evalOp[-23, 19, 4][nn] + 
         evalOp[-19, -4, 23][nn] - evalOp[-4, -19, 23][nn])/4 + 
       (-evalOp[-23, 4, 19][nn] + evalOp[-23, 19, 4][nn] - 
         evalOp[-19, -4, 23][nn] + evalOp[-4, -19, 23][nn])/19 + 
       (evalOp[-22, 4, 18][nn] - evalOp[-22, 18, 4][nn] + 
         evalOp[-18, -4, 22][nn] - evalOp[-4, -18, 22][nn])/4 + 
       (-evalOp[-22, 4, 18][nn] + evalOp[-22, 18, 4][nn] - 
         evalOp[-18, -4, 22][nn] + evalOp[-4, -18, 22][nn])/18 + 
       (evalOp[-21, 4, 17][nn] - evalOp[-21, 17, 4][nn] + 
         evalOp[-17, -4, 21][nn] - evalOp[-4, -17, 21][nn])/4 + 
       (-evalOp[-21, 4, 17][nn] + evalOp[-21, 17, 4][nn] - 
         evalOp[-17, -4, 21][nn] + evalOp[-4, -17, 21][nn])/17 + 
       (evalOp[-20, 4, 16][nn] - evalOp[-20, 16, 4][nn] + 
         evalOp[-16, -4, 20][nn] - evalOp[-4, -16, 20][nn])/4 + 
       (-evalOp[-20, 4, 16][nn] + evalOp[-20, 16, 4][nn] - 
         evalOp[-16, -4, 20][nn] + evalOp[-4, -16, 20][nn])/16 + 
       (evalOp[-19, 4, 15][nn] - evalOp[-19, 15, 4][nn] + 
         evalOp[-15, -4, 19][nn] - evalOp[-4, -15, 19][nn])/4 + 
       (-evalOp[-19, 4, 15][nn] + evalOp[-19, 15, 4][nn] - 
         evalOp[-15, -4, 19][nn] + evalOp[-4, -15, 19][nn])/15 + 
       (evalOp[-18, 4, 14][nn] - evalOp[-18, 14, 4][nn] + 
         evalOp[-14, -4, 18][nn] - evalOp[-4, -14, 18][nn])/4 + 
       (-evalOp[-18, 4, 14][nn] + evalOp[-18, 14, 4][nn] - 
         evalOp[-14, -4, 18][nn] + evalOp[-4, -14, 18][nn])/14 + 
       (evalOp[-17, 4, 13][nn] - evalOp[-17, 13, 4][nn] + 
         evalOp[-13, -4, 17][nn] - evalOp[-4, -13, 17][nn])/4 + 
       (-evalOp[-17, 4, 13][nn] + evalOp[-17, 13, 4][nn] - 
         evalOp[-13, -4, 17][nn] + evalOp[-4, -13, 17][nn])/13 + 
       (evalOp[-16, 4, 12][nn] - evalOp[-16, 12, 4][nn] + 
         evalOp[-12, -4, 16][nn] - evalOp[-4, -12, 16][nn])/4 + 
       (-evalOp[-16, 4, 12][nn] + evalOp[-16, 12, 4][nn] - 
         evalOp[-12, -4, 16][nn] + evalOp[-4, -12, 16][nn])/12 + 
       (evalOp[-15, 4, 11][nn] - evalOp[-15, 11, 4][nn] + 
         evalOp[-11, -4, 15][nn] - evalOp[-4, -11, 15][nn])/4 + 
       (-evalOp[-15, 4, 11][nn] + evalOp[-15, 11, 4][nn] - 
         evalOp[-11, -4, 15][nn] + evalOp[-4, -11, 15][nn])/11 + 
       (evalOp[-14, 4, 10][nn] - evalOp[-14, 10, 4][nn] + 
         evalOp[-10, -4, 14][nn] - evalOp[-4, -10, 14][nn])/4 + 
       (-evalOp[-14, 4, 10][nn] + evalOp[-14, 10, 4][nn] - 
         evalOp[-10, -4, 14][nn] + evalOp[-4, -10, 14][nn])/10 + 
       (evalOp[-13, 4, 9][nn] - evalOp[-13, 9, 4][nn] + evalOp[-9, -4, 13][
          nn] - evalOp[-4, -9, 13][nn])/4 + (-evalOp[-13, 4, 9][nn] + 
         evalOp[-13, 9, 4][nn] - evalOp[-9, -4, 13][nn] + 
         evalOp[-4, -9, 13][nn])/9 + (evalOp[-12, 4, 8][nn] - 
         evalOp[-12, 8, 4][nn] + evalOp[-8, -4, 12][nn] - 
         evalOp[-4, -8, 12][nn])/4 + (-evalOp[-12, 4, 8][nn] + 
         evalOp[-12, 8, 4][nn] - evalOp[-8, -4, 12][nn] + 
         evalOp[-4, -8, 12][nn])/8 + (evalOp[-11, 4, 7][nn] - 
         evalOp[-11, 7, 4][nn] + evalOp[-7, -4, 11][nn] - 
         evalOp[-4, -7, 11][nn])/4 + (-evalOp[-11, 4, 7][nn] + 
         evalOp[-11, 7, 4][nn] - evalOp[-7, -4, 11][nn] + 
         evalOp[-4, -7, 11][nn])/7 + (evalOp[-10, 4, 6][nn] - 
         evalOp[-10, 6, 4][nn] + evalOp[-6, -4, 10][nn] - 
         evalOp[-4, -6, 10][nn])/4 + (-evalOp[-10, 4, 6][nn] + 
         evalOp[-10, 6, 4][nn] - evalOp[-6, -4, 10][nn] + 
         evalOp[-4, -6, 10][nn])/6 + (evalOp[-9, 4, 5][nn] - 
         evalOp[-9, 5, 4][nn] + evalOp[-5, -4, 9][nn] - 
         evalOp[-4, -5, 9][nn])/4 + (-evalOp[-9, 4, 5][nn] + 
         evalOp[-9, 5, 4][nn] - evalOp[-5, -4, 9][nn] + 
         evalOp[-4, -5, 9][nn])/5 + evalOp[-4, -1, 5][nn] + 
       evalOp[-4, 1, 3][nn] - evalOp[-4, 3, 1][nn] + 
       (evalOp[-23, 3, 20][nn] - evalOp[-23, 20, 3][nn] + 
         evalOp[-20, -3, 23][nn] - evalOp[-3, -20, 23][nn])/3 + 
       (-evalOp[-23, 3, 20][nn] + evalOp[-23, 20, 3][nn] - 
         evalOp[-20, -3, 23][nn] + evalOp[-3, -20, 23][nn])/20 + 
       (evalOp[-22, 3, 19][nn] - evalOp[-22, 19, 3][nn] + 
         evalOp[-19, -3, 22][nn] - evalOp[-3, -19, 22][nn])/3 + 
       (-evalOp[-22, 3, 19][nn] + evalOp[-22, 19, 3][nn] - 
         evalOp[-19, -3, 22][nn] + evalOp[-3, -19, 22][nn])/19 + 
       (evalOp[-21, 3, 18][nn] - evalOp[-21, 18, 3][nn] + 
         evalOp[-18, -3, 21][nn] - evalOp[-3, -18, 21][nn])/3 + 
       (-evalOp[-21, 3, 18][nn] + evalOp[-21, 18, 3][nn] - 
         evalOp[-18, -3, 21][nn] + evalOp[-3, -18, 21][nn])/18 + 
       (evalOp[-20, 3, 17][nn] - evalOp[-20, 17, 3][nn] + 
         evalOp[-17, -3, 20][nn] - evalOp[-3, -17, 20][nn])/3 + 
       (-evalOp[-20, 3, 17][nn] + evalOp[-20, 17, 3][nn] - 
         evalOp[-17, -3, 20][nn] + evalOp[-3, -17, 20][nn])/17 + 
       (evalOp[-19, 3, 16][nn] - evalOp[-19, 16, 3][nn] + 
         evalOp[-16, -3, 19][nn] - evalOp[-3, -16, 19][nn])/3 + 
       (-evalOp[-19, 3, 16][nn] + evalOp[-19, 16, 3][nn] - 
         evalOp[-16, -3, 19][nn] + evalOp[-3, -16, 19][nn])/16 + 
       (evalOp[-18, 3, 15][nn] - evalOp[-18, 15, 3][nn] + 
         evalOp[-15, -3, 18][nn] - evalOp[-3, -15, 18][nn])/3 + 
       (-evalOp[-18, 3, 15][nn] + evalOp[-18, 15, 3][nn] - 
         evalOp[-15, -3, 18][nn] + evalOp[-3, -15, 18][nn])/15 + 
       (evalOp[-17, 3, 14][nn] - evalOp[-17, 14, 3][nn] + 
         evalOp[-14, -3, 17][nn] - evalOp[-3, -14, 17][nn])/3 + 
       (-evalOp[-17, 3, 14][nn] + evalOp[-17, 14, 3][nn] - 
         evalOp[-14, -3, 17][nn] + evalOp[-3, -14, 17][nn])/14 + 
       (evalOp[-16, 3, 13][nn] - evalOp[-16, 13, 3][nn] + 
         evalOp[-13, -3, 16][nn] - evalOp[-3, -13, 16][nn])/3 + 
       (-evalOp[-16, 3, 13][nn] + evalOp[-16, 13, 3][nn] - 
         evalOp[-13, -3, 16][nn] + evalOp[-3, -13, 16][nn])/13 + 
       (evalOp[-15, 3, 12][nn] - evalOp[-15, 12, 3][nn] + 
         evalOp[-12, -3, 15][nn] - evalOp[-3, -12, 15][nn])/3 + 
       (-evalOp[-15, 3, 12][nn] + evalOp[-15, 12, 3][nn] - 
         evalOp[-12, -3, 15][nn] + evalOp[-3, -12, 15][nn])/12 + 
       (evalOp[-14, 3, 11][nn] - evalOp[-14, 11, 3][nn] + 
         evalOp[-11, -3, 14][nn] - evalOp[-3, -11, 14][nn])/3 + 
       (-evalOp[-14, 3, 11][nn] + evalOp[-14, 11, 3][nn] - 
         evalOp[-11, -3, 14][nn] + evalOp[-3, -11, 14][nn])/11 + 
       (evalOp[-13, 3, 10][nn] - evalOp[-13, 10, 3][nn] + 
         evalOp[-10, -3, 13][nn] - evalOp[-3, -10, 13][nn])/3 + 
       (-evalOp[-13, 3, 10][nn] + evalOp[-13, 10, 3][nn] - 
         evalOp[-10, -3, 13][nn] + evalOp[-3, -10, 13][nn])/10 + 
       (evalOp[-12, 3, 9][nn] - evalOp[-12, 9, 3][nn] + evalOp[-9, -3, 12][
          nn] - evalOp[-3, -9, 12][nn])/3 + (-evalOp[-12, 3, 9][nn] + 
         evalOp[-12, 9, 3][nn] - evalOp[-9, -3, 12][nn] + 
         evalOp[-3, -9, 12][nn])/9 + (evalOp[-11, 3, 8][nn] - 
         evalOp[-11, 8, 3][nn] + evalOp[-8, -3, 11][nn] - 
         evalOp[-3, -8, 11][nn])/3 + (-evalOp[-11, 3, 8][nn] + 
         evalOp[-11, 8, 3][nn] - evalOp[-8, -3, 11][nn] + 
         evalOp[-3, -8, 11][nn])/8 + (evalOp[-10, 3, 7][nn] - 
         evalOp[-10, 7, 3][nn] + evalOp[-7, -3, 10][nn] - 
         evalOp[-3, -7, 10][nn])/3 + (-evalOp[-10, 3, 7][nn] + 
         evalOp[-10, 7, 3][nn] - evalOp[-7, -3, 10][nn] + 
         evalOp[-3, -7, 10][nn])/7 + (evalOp[-9, 3, 6][nn] - 
         evalOp[-9, 6, 3][nn] + evalOp[-6, -3, 9][nn] - 
         evalOp[-3, -6, 9][nn])/3 + (-evalOp[-9, 3, 6][nn] + 
         evalOp[-9, 6, 3][nn] - evalOp[-6, -3, 9][nn] + 
         evalOp[-3, -6, 9][nn])/6 + (evalOp[-8, 3, 5][nn] - 
         evalOp[-8, 5, 3][nn] + evalOp[-5, -3, 8][nn] - 
         evalOp[-3, -5, 8][nn])/3 + (-evalOp[-8, 3, 5][nn] + 
         evalOp[-8, 5, 3][nn] - evalOp[-5, -3, 8][nn] + 
         evalOp[-3, -5, 8][nn])/5 + (evalOp[-7, 3, 4][nn] - 
         evalOp[-7, 4, 3][nn] + evalOp[-4, -3, 7][nn] - 
         evalOp[-3, -4, 7][nn])/3 + (-evalOp[-7, 3, 4][nn] + 
         evalOp[-7, 4, 3][nn] - evalOp[-4, -3, 7][nn] + 
         evalOp[-3, -4, 7][nn])/4 + evalOp[-3, -1, 4][nn] + 
       evalOp[-3, 1, 2][nn] - evalOp[-3, 2, 1][nn] + 
       (evalOp[-22, 2, 20][nn] - evalOp[-22, 20, 2][nn] + 
         evalOp[-20, -2, 22][nn] - evalOp[-2, -20, 22][nn])/2 + 
       (-evalOp[-22, 2, 20][nn] + evalOp[-22, 20, 2][nn] - 
         evalOp[-20, -2, 22][nn] + evalOp[-2, -20, 22][nn])/20 + 
       (evalOp[-21, 2, 19][nn] - evalOp[-21, 19, 2][nn] + 
         evalOp[-19, -2, 21][nn] - evalOp[-2, -19, 21][nn])/2 + 
       (-evalOp[-21, 2, 19][nn] + evalOp[-21, 19, 2][nn] - 
         evalOp[-19, -2, 21][nn] + evalOp[-2, -19, 21][nn])/19 + 
       (evalOp[-20, 2, 18][nn] - evalOp[-20, 18, 2][nn] + 
         evalOp[-18, -2, 20][nn] - evalOp[-2, -18, 20][nn])/2 + 
       (-evalOp[-20, 2, 18][nn] + evalOp[-20, 18, 2][nn] - 
         evalOp[-18, -2, 20][nn] + evalOp[-2, -18, 20][nn])/18 + 
       (evalOp[-19, 2, 17][nn] - evalOp[-19, 17, 2][nn] + 
         evalOp[-17, -2, 19][nn] - evalOp[-2, -17, 19][nn])/2 + 
       (-evalOp[-19, 2, 17][nn] + evalOp[-19, 17, 2][nn] - 
         evalOp[-17, -2, 19][nn] + evalOp[-2, -17, 19][nn])/17 + 
       (evalOp[-18, 2, 16][nn] - evalOp[-18, 16, 2][nn] + 
         evalOp[-16, -2, 18][nn] - evalOp[-2, -16, 18][nn])/2 + 
       (-evalOp[-18, 2, 16][nn] + evalOp[-18, 16, 2][nn] - 
         evalOp[-16, -2, 18][nn] + evalOp[-2, -16, 18][nn])/16 + 
       (evalOp[-17, 2, 15][nn] - evalOp[-17, 15, 2][nn] + 
         evalOp[-15, -2, 17][nn] - evalOp[-2, -15, 17][nn])/2 + 
       (-evalOp[-17, 2, 15][nn] + evalOp[-17, 15, 2][nn] - 
         evalOp[-15, -2, 17][nn] + evalOp[-2, -15, 17][nn])/15 + 
       (evalOp[-16, 2, 14][nn] - evalOp[-16, 14, 2][nn] + 
         evalOp[-14, -2, 16][nn] - evalOp[-2, -14, 16][nn])/2 + 
       (-evalOp[-16, 2, 14][nn] + evalOp[-16, 14, 2][nn] - 
         evalOp[-14, -2, 16][nn] + evalOp[-2, -14, 16][nn])/14 + 
       (evalOp[-15, 2, 13][nn] - evalOp[-15, 13, 2][nn] + 
         evalOp[-13, -2, 15][nn] - evalOp[-2, -13, 15][nn])/2 + 
       (-evalOp[-15, 2, 13][nn] + evalOp[-15, 13, 2][nn] - 
         evalOp[-13, -2, 15][nn] + evalOp[-2, -13, 15][nn])/13 + 
       (evalOp[-14, 2, 12][nn] - evalOp[-14, 12, 2][nn] + 
         evalOp[-12, -2, 14][nn] - evalOp[-2, -12, 14][nn])/2 + 
       (-evalOp[-14, 2, 12][nn] + evalOp[-14, 12, 2][nn] - 
         evalOp[-12, -2, 14][nn] + evalOp[-2, -12, 14][nn])/12 + 
       (evalOp[-13, 2, 11][nn] - evalOp[-13, 11, 2][nn] + 
         evalOp[-11, -2, 13][nn] - evalOp[-2, -11, 13][nn])/2 + 
       (-evalOp[-13, 2, 11][nn] + evalOp[-13, 11, 2][nn] - 
         evalOp[-11, -2, 13][nn] + evalOp[-2, -11, 13][nn])/11 + 
       (evalOp[-12, 2, 10][nn] - evalOp[-12, 10, 2][nn] + 
         evalOp[-10, -2, 12][nn] - evalOp[-2, -10, 12][nn])/2 + 
       (-evalOp[-12, 2, 10][nn] + evalOp[-12, 10, 2][nn] - 
         evalOp[-10, -2, 12][nn] + evalOp[-2, -10, 12][nn])/10 + 
       (evalOp[-11, 2, 9][nn] - evalOp[-11, 9, 2][nn] + evalOp[-9, -2, 11][
          nn] - evalOp[-2, -9, 11][nn])/2 + (-evalOp[-11, 2, 9][nn] + 
         evalOp[-11, 9, 2][nn] - evalOp[-9, -2, 11][nn] + 
         evalOp[-2, -9, 11][nn])/9 + (evalOp[-10, 2, 8][nn] - 
         evalOp[-10, 8, 2][nn] + evalOp[-8, -2, 10][nn] - 
         evalOp[-2, -8, 10][nn])/2 + (-evalOp[-10, 2, 8][nn] + 
         evalOp[-10, 8, 2][nn] - evalOp[-8, -2, 10][nn] + 
         evalOp[-2, -8, 10][nn])/8 + (evalOp[-9, 2, 7][nn] - 
         evalOp[-9, 7, 2][nn] + evalOp[-7, -2, 9][nn] - 
         evalOp[-2, -7, 9][nn])/2 + (-evalOp[-9, 2, 7][nn] + 
         evalOp[-9, 7, 2][nn] - evalOp[-7, -2, 9][nn] + 
         evalOp[-2, -7, 9][nn])/7 + (evalOp[-8, 2, 6][nn] - 
         evalOp[-8, 6, 2][nn] + evalOp[-6, -2, 8][nn] - 
         evalOp[-2, -6, 8][nn])/2 + (-evalOp[-8, 2, 6][nn] + 
         evalOp[-8, 6, 2][nn] - evalOp[-6, -2, 8][nn] + 
         evalOp[-2, -6, 8][nn])/6 + (evalOp[-7, 2, 5][nn] - 
         evalOp[-7, 5, 2][nn] + evalOp[-5, -2, 7][nn] - 
         evalOp[-2, -5, 7][nn])/2 + (-evalOp[-7, 2, 5][nn] + 
         evalOp[-7, 5, 2][nn] - evalOp[-5, -2, 7][nn] + 
         evalOp[-2, -5, 7][nn])/5 + (evalOp[-6, 2, 4][nn] - 
         evalOp[-6, 4, 2][nn] + evalOp[-4, -2, 6][nn] - 
         evalOp[-2, -4, 6][nn])/2 + (-evalOp[-6, 2, 4][nn] + 
         evalOp[-6, 4, 2][nn] - evalOp[-4, -2, 6][nn] + 
         evalOp[-2, -4, 6][nn])/4 + (evalOp[-5, 2, 3][nn] - 
         evalOp[-5, 3, 2][nn] + evalOp[-3, -2, 5][nn] - 
         evalOp[-2, -3, 5][nn])/2 + (-evalOp[-5, 2, 3][nn] + 
         evalOp[-5, 3, 2][nn] - evalOp[-3, -2, 5][nn] + 
         evalOp[-2, -3, 5][nn])/3 + evalOp[-2, -1, 3][nn] - 
       evalOp[-1, -20, 21][nn] + (-evalOp[-21, 1, 20][nn] + 
         evalOp[-21, 20, 1][nn] - evalOp[-20, -1, 21][nn] + 
         evalOp[-1, -20, 21][nn])/20 - evalOp[-1, -19, 20][nn] + 
       (-evalOp[-20, 1, 19][nn] + evalOp[-20, 19, 1][nn] - 
         evalOp[-19, -1, 20][nn] + evalOp[-1, -19, 20][nn])/19 - 
       evalOp[-1, -18, 19][nn] + (-evalOp[-19, 1, 18][nn] + 
         evalOp[-19, 18, 1][nn] - evalOp[-18, -1, 19][nn] + 
         evalOp[-1, -18, 19][nn])/18 - evalOp[-1, -17, 18][nn] + 
       (-evalOp[-18, 1, 17][nn] + evalOp[-18, 17, 1][nn] - 
         evalOp[-17, -1, 18][nn] + evalOp[-1, -17, 18][nn])/17 - 
       evalOp[-1, -16, 17][nn] + (-evalOp[-17, 1, 16][nn] + 
         evalOp[-17, 16, 1][nn] - evalOp[-16, -1, 17][nn] + 
         evalOp[-1, -16, 17][nn])/16 - evalOp[-1, -15, 16][nn] + 
       (-evalOp[-16, 1, 15][nn] + evalOp[-16, 15, 1][nn] - 
         evalOp[-15, -1, 16][nn] + evalOp[-1, -15, 16][nn])/15 - 
       evalOp[-1, -14, 15][nn] + (-evalOp[-15, 1, 14][nn] + 
         evalOp[-15, 14, 1][nn] - evalOp[-14, -1, 15][nn] + 
         evalOp[-1, -14, 15][nn])/14 - evalOp[-1, -13, 14][nn] + 
       (-evalOp[-14, 1, 13][nn] + evalOp[-14, 13, 1][nn] - 
         evalOp[-13, -1, 14][nn] + evalOp[-1, -13, 14][nn])/13 - 
       evalOp[-1, -12, 13][nn] + (-evalOp[-13, 1, 12][nn] + 
         evalOp[-13, 12, 1][nn] - evalOp[-12, -1, 13][nn] + 
         evalOp[-1, -12, 13][nn])/12 - evalOp[-1, -11, 12][nn] + 
       (-evalOp[-12, 1, 11][nn] + evalOp[-12, 11, 1][nn] - 
         evalOp[-11, -1, 12][nn] + evalOp[-1, -11, 12][nn])/11 - 
       evalOp[-1, -10, 11][nn] + (-evalOp[-11, 1, 10][nn] + 
         evalOp[-11, 10, 1][nn] - evalOp[-10, -1, 11][nn] + 
         evalOp[-1, -10, 11][nn])/10 - evalOp[-1, -9, 10][nn] + 
       (-evalOp[-10, 1, 9][nn] + evalOp[-10, 9, 1][nn] - 
         evalOp[-9, -1, 10][nn] + evalOp[-1, -9, 10][nn])/9 - 
       evalOp[-1, -8, 9][nn] + (-evalOp[-9, 1, 8][nn] + 
         evalOp[-9, 8, 1][nn] - evalOp[-8, -1, 9][nn] + 
         evalOp[-1, -8, 9][nn])/8 - evalOp[-1, -7, 8][nn] + 
       (-evalOp[-8, 1, 7][nn] + evalOp[-8, 7, 1][nn] - evalOp[-7, -1, 8][
          nn] + evalOp[-1, -7, 8][nn])/7 - evalOp[-1, -6, 7][nn] + 
       (-evalOp[-7, 1, 6][nn] + evalOp[-7, 6, 1][nn] - evalOp[-6, -1, 7][
          nn] + evalOp[-1, -6, 7][nn])/6 - evalOp[-1, -5, 6][nn] + 
       (-evalOp[-6, 1, 5][nn] + evalOp[-6, 5, 1][nn] - evalOp[-5, -1, 6][
          nn] + evalOp[-1, -5, 6][nn])/5 - evalOp[-1, -4, 5][nn] + 
       (-evalOp[-5, 1, 4][nn] + evalOp[-5, 4, 1][nn] - evalOp[-4, -1, 5][
          nn] + evalOp[-1, -4, 5][nn])/4 - evalOp[-1, -3, 4][nn] + 
       (-evalOp[-4, 1, 3][nn] + evalOp[-4, 3, 1][nn] - evalOp[-3, -1, 4][
          nn] + evalOp[-1, -3, 4][nn])/3 - evalOp[-1, -2, 3][nn] + 
       (-evalOp[-3, 1, 2][nn] + evalOp[-3, 2, 1][nn] - evalOp[-2, -1, 3][
          nn] + evalOp[-1, -2, 3][nn])/2}, {nn, 0, 3}]
